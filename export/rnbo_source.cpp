/*******************************************************************************************************************
Copyright (c) 2023 Cycling '74

The code that Max generates automatically and that end users are capable of
exporting and using, and any associated documentation files (the “Software”)
is a work of authorship for which Cycling '74 is the author and owner for
copyright purposes.

This Software is dual-licensed either under the terms of the Cycling '74
License for Max-Generated Code for Export, or alternatively under the terms
of the General Public License (GPL) Version 3. You may use the Software
according to either of these licenses as it is most appropriate for your
project on a case-by-case basis (proprietary or not).

A) Cycling '74 License for Max-Generated Code for Export

A license is hereby granted, free of charge, to any person obtaining a copy
of the Software (“Licensee”) to use, copy, modify, merge, publish, and
distribute copies of the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following conditions:

The Software is licensed to Licensee for all uses that do not include the sale,
sublicensing, or commercial distribution of software that incorporates this
source code. This means that the Licensee is free to use this software for
educational, research, and prototyping purposes, to create musical or other
creative works with software that incorporates this source code, or any other
use that does not constitute selling software that makes use of this source
code. Commercial distribution also includes the packaging of free software with
other paid software, hardware, or software-provided commercial services.

For entities with UNDER $200k in annual revenue or funding, a license is hereby
granted, free of charge, for the sale, sublicensing, or commercial distribution
of software that incorporates this source code, for as long as the entity's
annual revenue remains below $200k annual revenue or funding.

For entities with OVER $200k in annual revenue or funding interested in the
sale, sublicensing, or commercial distribution of software that incorporates
this source code, please send inquiries to licensing@cycling74.com.

The above copyright notice and this license shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Please see
https://support.cycling74.com/hc/en-us/articles/10730637742483-RNBO-Export-Licensing-FAQ
for additional information

B) General Public License Version 3 (GPLv3)
Details of the GPLv3 license can be found at: https://www.gnu.org/licenses/gpl-3.0.html
*******************************************************************************************************************/

#include "RNBO_Common.h"
#include "RNBO_AudioSignal.h"

namespace RNBO {


#define trunc(x) ((Int)(x))

#if defined(__GNUC__) || defined(__clang__)
    #define RNBO_RESTRICT __restrict__
#elif defined(_MSC_VER)
    #define RNBO_RESTRICT __restrict
#endif

#define FIXEDSIZEARRAYINIT(...) { }

class rnbomatic : public PatcherInterfaceImpl {
public:

class RNBOSubpatcher_29 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_20 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_29;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_16 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_20;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_16()
                        {
                        }
                        
                        ~RNBOSubpatcher_16()
                        {
                        }
                        
                        virtual RNBOSubpatcher_20* getPatcher() const {
                            return static_cast<RNBOSubpatcher_20 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("STUTTER/circ1l/quantize/message_obj-30") == objectId)
                                    this->message_01_listin_number_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/message_obj-138") == objectId)
                                    this->message_02_listin_number_set(payload);
                        
                                break;
                                }
                            case TAG("valin"):
                                {
                                if (TAG("STUTTER/circ1l/quantize/number_obj-13") == objectId)
                                    this->numberobj_01_valin_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-39") == objectId)
                                    this->numberobj_02_valin_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-37") == objectId)
                                    this->numberobj_03_valin_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-15") == objectId)
                                    this->numberobj_04_valin_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-17") == objectId)
                                    this->numberobj_05_valin_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-19") == objectId)
                                    this->numberobj_06_valin_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-21") == objectId)
                                    this->numberobj_07_valin_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-23") == objectId)
                                    this->numberobj_08_valin_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-25") == objectId)
                                    this->numberobj_09_valin_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-27") == objectId)
                                    this->numberobj_10_valin_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-11") == objectId)
                                    this->numberobj_11_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("STUTTER/circ1l/quantize/number_obj-13") == objectId)
                                    this->numberobj_01_format_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-39") == objectId)
                                    this->numberobj_02_format_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-37") == objectId)
                                    this->numberobj_03_format_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-15") == objectId)
                                    this->numberobj_04_format_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-17") == objectId)
                                    this->numberobj_05_format_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-19") == objectId)
                                    this->numberobj_06_format_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-21") == objectId)
                                    this->numberobj_07_format_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-23") == objectId)
                                    this->numberobj_08_format_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-25") == objectId)
                                    this->numberobj_09_format_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-27") == objectId)
                                    this->numberobj_10_format_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/number_obj-11") == objectId)
                                    this->numberobj_11_format_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("STUTTER/circ1l/quantize/message_obj-30") == objectId)
                                    this->message_01_listin_list_set(payload);
                        
                                if (TAG("STUTTER/circ1l/quantize/message_obj-138") == objectId)
                                    this->message_02_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("STUTTER/circ1l/quantize/message_obj-30") == objectId)
                                    this->message_01_listin_bang_bang();
                        
                                if (TAG("STUTTER/circ1l/quantize/message_obj-138") == objectId)
                                    this->message_02_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("STUTTER/circ1l/quantize/message_obj-30"):
                                {
                                return "STUTTER/circ1l/quantize/message_obj-30";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("STUTTER/circ1l/quantize/number_obj-13"):
                                {
                                return "STUTTER/circ1l/quantize/number_obj-13";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("STUTTER/circ1l/quantize/message_obj-138"):
                                {
                                return "STUTTER/circ1l/quantize/message_obj-138";
                                }
                            case TAG("STUTTER/circ1l/quantize/number_obj-39"):
                                {
                                return "STUTTER/circ1l/quantize/number_obj-39";
                                }
                            case TAG("STUTTER/circ1l/quantize/number_obj-37"):
                                {
                                return "STUTTER/circ1l/quantize/number_obj-37";
                                }
                            case TAG("STUTTER/circ1l/quantize/number_obj-15"):
                                {
                                return "STUTTER/circ1l/quantize/number_obj-15";
                                }
                            case TAG("STUTTER/circ1l/quantize/number_obj-17"):
                                {
                                return "STUTTER/circ1l/quantize/number_obj-17";
                                }
                            case TAG("STUTTER/circ1l/quantize/number_obj-19"):
                                {
                                return "STUTTER/circ1l/quantize/number_obj-19";
                                }
                            case TAG("STUTTER/circ1l/quantize/number_obj-21"):
                                {
                                return "STUTTER/circ1l/quantize/number_obj-21";
                                }
                            case TAG("STUTTER/circ1l/quantize/number_obj-23"):
                                {
                                return "STUTTER/circ1l/quantize/number_obj-23";
                                }
                            case TAG("STUTTER/circ1l/quantize/number_obj-25"):
                                {
                                return "STUTTER/circ1l/quantize/number_obj-25";
                                }
                            case TAG("STUTTER/circ1l/quantize/number_obj-27"):
                                {
                                return "STUTTER/circ1l/quantize/number_obj-27";
                                }
                            case TAG("STUTTER/circ1l/quantize/number_obj-11"):
                                {
                                return "STUTTER/circ1l/quantize/number_obj-11";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void message_01_listin_list_set(const list& v) {
                            this->message_01_set_set(v);
                        }
                        
                        void message_01_listin_number_set(number v) {
                            this->message_01_set_set(v);
                        }
                        
                        void message_01_listin_bang_bang() {
                            this->message_01_trigger_bang();
                        }
                        
                        void numberobj_01_valin_set(number v) {
                            this->numberobj_01_value_set(v);
                        }
                        
                        void numberobj_01_format_set(number v) {
                            this->numberobj_01_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_02_listin_list_set(const list& v) {
                            this->message_02_set_set(v);
                        }
                        
                        void message_02_listin_number_set(number v) {
                            this->message_02_set_set(v);
                        }
                        
                        void message_02_listin_bang_bang() {
                            this->message_02_trigger_bang();
                        }
                        
                        void numberobj_02_valin_set(number v) {
                            this->numberobj_02_value_set(v);
                        }
                        
                        void numberobj_02_format_set(number v) {
                            this->numberobj_02_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_03_valin_set(number v) {
                            this->numberobj_03_value_set(v);
                        }
                        
                        void numberobj_03_format_set(number v) {
                            this->numberobj_03_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_04_valin_set(number v) {
                            this->numberobj_04_value_set(v);
                        }
                        
                        void numberobj_04_format_set(number v) {
                            this->numberobj_04_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_05_valin_set(number v) {
                            this->numberobj_05_value_set(v);
                        }
                        
                        void numberobj_05_format_set(number v) {
                            this->numberobj_05_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_06_valin_set(number v) {
                            this->numberobj_06_value_set(v);
                        }
                        
                        void numberobj_06_format_set(number v) {
                            this->numberobj_06_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_07_valin_set(number v) {
                            this->numberobj_07_value_set(v);
                        }
                        
                        void numberobj_07_format_set(number v) {
                            this->numberobj_07_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_08_valin_set(number v) {
                            this->numberobj_08_value_set(v);
                        }
                        
                        void numberobj_08_format_set(number v) {
                            this->numberobj_08_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_09_valin_set(number v) {
                            this->numberobj_09_value_set(v);
                        }
                        
                        void numberobj_09_format_set(number v) {
                            this->numberobj_09_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_10_valin_set(number v) {
                            this->numberobj_10_value_set(v);
                        }
                        
                        void numberobj_10_format_set(number v) {
                            this->numberobj_10_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_11_valin_set(number v) {
                            this->numberobj_11_value_set(v);
                        }
                        
                        void numberobj_11_format_set(number v) {
                            this->numberobj_11_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void eventinlet_02_out1_bang_bang() {
                            this->numberobj_11_value_bang();
                        }
                        
                        void eventinlet_02_out1_number_set(number v) {
                            this->numberobj_11_value_set(v);
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->message_01_init();
                            this->numberobj_01_init();
                            this->message_02_init();
                            this->numberobj_02_init();
                            this->numberobj_03_init();
                            this->numberobj_04_init();
                            this->numberobj_05_init();
                            this->numberobj_06_init();
                            this->numberobj_07_init();
                            this->numberobj_08_init();
                            this->numberobj_09_init();
                            this->numberobj_10_init();
                            this->numberobj_11_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void message_01_set_set(const list& v) {
                            this->message_01_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("STUTTER/circ1l/quantize/message_obj-30"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void eventoutlet_01_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_01_out1_number_set(v);
                        }
                        
                        void numberobj_02_output_set(number v) {
                            this->eventoutlet_01_in1_number_set(v);
                        }
                        
                        void numberobj_02_value_set(number v) {
                            this->numberobj_02_value_setter(v);
                            v = this->numberobj_02_value;
                            number localvalue = v;
                        
                            if (this->numberobj_02_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ1l/quantize/number_obj-39"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_02_output_set(localvalue);
                        }
                        
                        void listlookup_01_out_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_02_value_set(converted);
                            }
                        }
                        
                        void listlookup_01_input_set(const list& v) {
                            this->listlookup_01_input = jsCreateListCopy(v);
                            list tmp = list();
                        
                            for (Index i = 0; i < v->length; i++) {
                                long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
                        
                                if (j >= 0 && (Index)(j) < this->listlookup_01_lookup->length)
                                    tmp->push(this->listlookup_01_lookup[(Index)j]);
                            }
                        
                            if ((bool)(tmp->length))
                                this->listlookup_01_out_set(tmp);
                        }
                        
                        void numberobj_03_output_set(number v) {
                            {
                                list converted = {v};
                                this->listlookup_01_input_set(converted);
                            }
                        }
                        
                        void numberobj_03_value_set(number v) {
                            this->numberobj_03_value_setter(v);
                            v = this->numberobj_03_value;
                            number localvalue = v;
                        
                            if (this->numberobj_03_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ1l/quantize/number_obj-37"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_03_output_set(localvalue);
                        }
                        
                        void minimum_01_index_set(number v) {
                            this->minimum_01_index = v;
                            this->numberobj_03_value_set(v);
                        }
                        
                        void minimum_01_out_set(number v) {
                            this->minimum_01_out = v;
                        }
                        
                        void minimum_01_input_set(const list& v) {
                            this->minimum_01_input = jsCreateListCopy(v);
                        
                            if (v->length == 1) {
                                if (v[0] < this->minimum_01_right) {
                                    this->minimum_01_index_set(0);
                                    this->minimum_01_out_set(v[0]);
                                } else {
                                    this->minimum_01_index_set(1);
                                    this->minimum_01_out_set(this->minimum_01_right);
                                }
                            } else if (v->length > 0) {
                                int idx = 0;
                                number minimum = v[0];
                        
                                for (Index i = 1; i < v->length; i++) {
                                    if (v[(Index)i] < minimum) {
                                        minimum = v[(Index)i];
                                        idx = i;
                                    }
                                }
                        
                                this->minimum_01_index_set(idx);
                                this->minimum_01_out_set(minimum);
                            }
                        }
                        
                        void message_01_out_set(const list& v) {
                            this->minimum_01_input_set(v);
                        }
                        
                        void message_01_trigger_bang() {
                            this->message_01_out_set(this->message_01_set);
                        }
                        
                        void pak_01_out_set(const list& v) {
                            this->message_01_set_set(v);
                            this->message_01_trigger_bang();
                        }
                        
                        void pak_01_in8_set(number v) {
                            this->pak_01_in8 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_01_in1;
                            array[1] = this->pak_01_in2;
                            array[2] = this->pak_01_in3;
                            array[3] = this->pak_01_in4;
                            array[4] = this->pak_01_in5;
                            array[5] = this->pak_01_in6;
                            array[6] = this->pak_01_in7;
                            array[7] = this->pak_01_in8;
                            this->pak_01_out_set(array);
                        }
                        
                        void numberobj_10_output_set(number v) {
                            this->pak_01_in8_set(v);
                        }
                        
                        void numberobj_10_value_set(number v) {
                            this->numberobj_10_value_setter(v);
                            v = this->numberobj_10_value;
                            number localvalue = v;
                        
                            if (this->numberobj_10_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ1l/quantize/number_obj-27"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_10_output_set(localvalue);
                        }
                        
                        void expr_08_out1_set(number v) {
                            this->expr_08_out1 = v;
                            this->numberobj_10_value_set(this->expr_08_out1);
                        }
                        
                        void expr_08_in1_set(number in1) {
                            this->expr_08_in1 = in1;
                            this->expr_08_out1_set(rnbo_abs(this->expr_08_in1 - this->expr_08_in2));//#map:STUTTER/circ1l/quantize/absdiff_obj-7:1
                        }
                        
                        void expr_08_in2_set(number v) {
                            this->expr_08_in2 = v;
                            this->expr_08_in1_set(this->expr_08_in1);
                        }
                        
                        void pak_01_in7_set(number v) {
                            this->pak_01_in7 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_01_in1;
                            array[1] = this->pak_01_in2;
                            array[2] = this->pak_01_in3;
                            array[3] = this->pak_01_in4;
                            array[4] = this->pak_01_in5;
                            array[5] = this->pak_01_in6;
                            array[6] = this->pak_01_in7;
                            array[7] = this->pak_01_in8;
                            this->pak_01_out_set(array);
                        }
                        
                        void numberobj_09_output_set(number v) {
                            this->pak_01_in7_set(v);
                        }
                        
                        void numberobj_09_value_set(number v) {
                            this->numberobj_09_value_setter(v);
                            v = this->numberobj_09_value;
                            number localvalue = v;
                        
                            if (this->numberobj_09_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ1l/quantize/number_obj-25"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_09_output_set(localvalue);
                        }
                        
                        void expr_07_out1_set(number v) {
                            this->expr_07_out1 = v;
                            this->numberobj_09_value_set(this->expr_07_out1);
                        }
                        
                        void expr_07_in1_set(number in1) {
                            this->expr_07_in1 = in1;
                            this->expr_07_out1_set(rnbo_abs(this->expr_07_in1 - this->expr_07_in2));//#map:STUTTER/circ1l/quantize/absdiff_obj-6:1
                        }
                        
                        void expr_07_in2_set(number v) {
                            this->expr_07_in2 = v;
                            this->expr_07_in1_set(this->expr_07_in1);
                        }
                        
                        void pak_01_in6_set(number v) {
                            this->pak_01_in6 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_01_in1;
                            array[1] = this->pak_01_in2;
                            array[2] = this->pak_01_in3;
                            array[3] = this->pak_01_in4;
                            array[4] = this->pak_01_in5;
                            array[5] = this->pak_01_in6;
                            array[6] = this->pak_01_in7;
                            array[7] = this->pak_01_in8;
                            this->pak_01_out_set(array);
                        }
                        
                        void numberobj_08_output_set(number v) {
                            this->pak_01_in6_set(v);
                        }
                        
                        void numberobj_08_value_set(number v) {
                            this->numberobj_08_value_setter(v);
                            v = this->numberobj_08_value;
                            number localvalue = v;
                        
                            if (this->numberobj_08_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ1l/quantize/number_obj-23"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_08_output_set(localvalue);
                        }
                        
                        void expr_06_out1_set(number v) {
                            this->expr_06_out1 = v;
                            this->numberobj_08_value_set(this->expr_06_out1);
                        }
                        
                        void expr_06_in1_set(number in1) {
                            this->expr_06_in1 = in1;
                            this->expr_06_out1_set(rnbo_abs(this->expr_06_in1 - this->expr_06_in2));//#map:STUTTER/circ1l/quantize/absdiff_obj-5:1
                        }
                        
                        void expr_06_in2_set(number v) {
                            this->expr_06_in2 = v;
                            this->expr_06_in1_set(this->expr_06_in1);
                        }
                        
                        void pak_01_in5_set(number v) {
                            this->pak_01_in5 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_01_in1;
                            array[1] = this->pak_01_in2;
                            array[2] = this->pak_01_in3;
                            array[3] = this->pak_01_in4;
                            array[4] = this->pak_01_in5;
                            array[5] = this->pak_01_in6;
                            array[6] = this->pak_01_in7;
                            array[7] = this->pak_01_in8;
                            this->pak_01_out_set(array);
                        }
                        
                        void numberobj_07_output_set(number v) {
                            this->pak_01_in5_set(v);
                        }
                        
                        void numberobj_07_value_set(number v) {
                            this->numberobj_07_value_setter(v);
                            v = this->numberobj_07_value;
                            number localvalue = v;
                        
                            if (this->numberobj_07_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ1l/quantize/number_obj-21"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_07_output_set(localvalue);
                        }
                        
                        void expr_05_out1_set(number v) {
                            this->expr_05_out1 = v;
                            this->numberobj_07_value_set(this->expr_05_out1);
                        }
                        
                        void expr_05_in1_set(number in1) {
                            this->expr_05_in1 = in1;
                            this->expr_05_out1_set(rnbo_abs(this->expr_05_in1 - this->expr_05_in2));//#map:STUTTER/circ1l/quantize/absdiff_obj-4:1
                        }
                        
                        void expr_05_in2_set(number v) {
                            this->expr_05_in2 = v;
                            this->expr_05_in1_set(this->expr_05_in1);
                        }
                        
                        void pak_01_in4_set(number v) {
                            this->pak_01_in4 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_01_in1;
                            array[1] = this->pak_01_in2;
                            array[2] = this->pak_01_in3;
                            array[3] = this->pak_01_in4;
                            array[4] = this->pak_01_in5;
                            array[5] = this->pak_01_in6;
                            array[6] = this->pak_01_in7;
                            array[7] = this->pak_01_in8;
                            this->pak_01_out_set(array);
                        }
                        
                        void numberobj_06_output_set(number v) {
                            this->pak_01_in4_set(v);
                        }
                        
                        void numberobj_06_value_set(number v) {
                            this->numberobj_06_value_setter(v);
                            v = this->numberobj_06_value;
                            number localvalue = v;
                        
                            if (this->numberobj_06_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ1l/quantize/number_obj-19"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_06_output_set(localvalue);
                        }
                        
                        void expr_04_out1_set(number v) {
                            this->expr_04_out1 = v;
                            this->numberobj_06_value_set(this->expr_04_out1);
                        }
                        
                        void expr_04_in1_set(number in1) {
                            this->expr_04_in1 = in1;
                            this->expr_04_out1_set(rnbo_abs(this->expr_04_in1 - this->expr_04_in2));//#map:STUTTER/circ1l/quantize/absdiff_obj-3:1
                        }
                        
                        void expr_04_in2_set(number v) {
                            this->expr_04_in2 = v;
                            this->expr_04_in1_set(this->expr_04_in1);
                        }
                        
                        void pak_01_in3_set(number v) {
                            this->pak_01_in3 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_01_in1;
                            array[1] = this->pak_01_in2;
                            array[2] = this->pak_01_in3;
                            array[3] = this->pak_01_in4;
                            array[4] = this->pak_01_in5;
                            array[5] = this->pak_01_in6;
                            array[6] = this->pak_01_in7;
                            array[7] = this->pak_01_in8;
                            this->pak_01_out_set(array);
                        }
                        
                        void numberobj_05_output_set(number v) {
                            this->pak_01_in3_set(v);
                        }
                        
                        void numberobj_05_value_set(number v) {
                            this->numberobj_05_value_setter(v);
                            v = this->numberobj_05_value;
                            number localvalue = v;
                        
                            if (this->numberobj_05_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ1l/quantize/number_obj-17"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_05_output_set(localvalue);
                        }
                        
                        void expr_03_out1_set(number v) {
                            this->expr_03_out1 = v;
                            this->numberobj_05_value_set(this->expr_03_out1);
                        }
                        
                        void expr_03_in1_set(number in1) {
                            this->expr_03_in1 = in1;
                            this->expr_03_out1_set(rnbo_abs(this->expr_03_in1 - this->expr_03_in2));//#map:STUTTER/circ1l/quantize/absdiff_obj-2:1
                        }
                        
                        void expr_03_in2_set(number v) {
                            this->expr_03_in2 = v;
                            this->expr_03_in1_set(this->expr_03_in1);
                        }
                        
                        void pak_01_in2_set(number v) {
                            this->pak_01_in2 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_01_in1;
                            array[1] = this->pak_01_in2;
                            array[2] = this->pak_01_in3;
                            array[3] = this->pak_01_in4;
                            array[4] = this->pak_01_in5;
                            array[5] = this->pak_01_in6;
                            array[6] = this->pak_01_in7;
                            array[7] = this->pak_01_in8;
                            this->pak_01_out_set(array);
                        }
                        
                        void numberobj_04_output_set(number v) {
                            this->pak_01_in2_set(v);
                        }
                        
                        void numberobj_04_value_set(number v) {
                            this->numberobj_04_value_setter(v);
                            v = this->numberobj_04_value;
                            number localvalue = v;
                        
                            if (this->numberobj_04_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ1l/quantize/number_obj-15"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_04_output_set(localvalue);
                        }
                        
                        void expr_02_out1_set(number v) {
                            this->expr_02_out1 = v;
                            this->numberobj_04_value_set(this->expr_02_out1);
                        }
                        
                        void expr_02_in1_set(number in1) {
                            this->expr_02_in1 = in1;
                            this->expr_02_out1_set(rnbo_abs(this->expr_02_in1 - this->expr_02_in2));//#map:STUTTER/circ1l/quantize/absdiff_obj-1:1
                        }
                        
                        void expr_02_in2_set(number v) {
                            this->expr_02_in2 = v;
                            this->expr_02_in1_set(this->expr_02_in1);
                        }
                        
                        void pak_01_in1_set(number v) {
                            this->pak_01_in1 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_01_in1;
                            array[1] = this->pak_01_in2;
                            array[2] = this->pak_01_in3;
                            array[3] = this->pak_01_in4;
                            array[4] = this->pak_01_in5;
                            array[5] = this->pak_01_in6;
                            array[6] = this->pak_01_in7;
                            array[7] = this->pak_01_in8;
                            this->pak_01_out_set(array);
                        }
                        
                        void numberobj_01_output_set(number v) {
                            this->pak_01_in1_set(v);
                        }
                        
                        void numberobj_01_value_set(number v) {
                            this->numberobj_01_value_setter(v);
                            v = this->numberobj_01_value;
                            number localvalue = v;
                        
                            if (this->numberobj_01_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ1l/quantize/number_obj-13"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_01_output_set(localvalue);
                        }
                        
                        void expr_01_out1_set(number v) {
                            this->expr_01_out1 = v;
                            this->numberobj_01_value_set(this->expr_01_out1);
                        }
                        
                        void expr_01_in1_set(number in1) {
                            this->expr_01_in1 = in1;
                            this->expr_01_out1_set(rnbo_abs(this->expr_01_in1 - this->expr_01_in2));//#map:STUTTER/circ1l/quantize/absdiff_obj-143:1
                        }
                        
                        void expr_01_in2_set(number v) {
                            this->expr_01_in2 = v;
                            this->expr_01_in1_set(this->expr_01_in1);
                        }
                        
                        void numberobj_11_output_set(number v) {
                            this->expr_08_in2_set(v);
                            this->expr_07_in2_set(v);
                            this->expr_06_in2_set(v);
                            this->expr_05_in2_set(v);
                            this->expr_04_in2_set(v);
                            this->expr_03_in2_set(v);
                            this->expr_02_in2_set(v);
                            this->expr_01_in2_set(v);
                        }
                        
                        void numberobj_11_value_set(number v) {
                            this->numberobj_11_value_setter(v);
                            v = this->numberobj_11_value;
                            number localvalue = v;
                        
                            if (this->numberobj_11_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ1l/quantize/number_obj-11"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_11_output_set(localvalue);
                        }
                        
                        void eventinlet_02_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_11_value_set(converted);
                            }
                        }
                        
                        void message_02_set_set(const list& v) {
                            this->message_02_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("STUTTER/circ1l/quantize/message_obj-138"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void listlookup_01_lookup_set(const list& v) {
                            this->listlookup_01_lookup = jsCreateListCopy(v);
                        }
                        
                        void unpack_01_out8_set(number v) {
                            this->unpack_01_out8 = v;
                            this->expr_08_in1_set(v);
                        }
                        
                        void unpack_01_out7_set(number v) {
                            this->unpack_01_out7 = v;
                            this->expr_07_in1_set(v);
                        }
                        
                        void unpack_01_out6_set(number v) {
                            this->unpack_01_out6 = v;
                            this->expr_06_in1_set(v);
                        }
                        
                        void unpack_01_out5_set(number v) {
                            this->unpack_01_out5 = v;
                            this->expr_05_in1_set(v);
                        }
                        
                        void unpack_01_out4_set(number v) {
                            this->unpack_01_out4 = v;
                            this->expr_04_in1_set(v);
                        }
                        
                        void unpack_01_out3_set(number v) {
                            this->unpack_01_out3 = v;
                            this->expr_03_in1_set(v);
                        }
                        
                        void unpack_01_out2_set(number v) {
                            this->unpack_01_out2 = v;
                            this->expr_02_in1_set(v);
                        }
                        
                        void unpack_01_out1_set(number v) {
                            this->unpack_01_out1 = v;
                            this->expr_01_in1_set(v);
                        }
                        
                        void unpack_01_input_list_set(const list& v) {
                            if (v->length > 7)
                                this->unpack_01_out8_set(v[7]);
                        
                            if (v->length > 6)
                                this->unpack_01_out7_set(v[6]);
                        
                            if (v->length > 5)
                                this->unpack_01_out6_set(v[5]);
                        
                            if (v->length > 4)
                                this->unpack_01_out5_set(v[4]);
                        
                            if (v->length > 3)
                                this->unpack_01_out4_set(v[3]);
                        
                            if (v->length > 2)
                                this->unpack_01_out3_set(v[2]);
                        
                            if (v->length > 1)
                                this->unpack_01_out2_set(v[1]);
                        
                            if (v->length > 0)
                                this->unpack_01_out1_set(v[0]);
                        }
                        
                        void message_02_out_set(const list& v) {
                            this->listlookup_01_lookup_set(v);
                            this->unpack_01_input_list_set(v);
                        }
                        
                        void message_02_trigger_bang() {
                            this->message_02_out_set(this->message_02_set);
                        }
                        
                        void eventinlet_01_out1_list_set(const list& v) {
                            this->message_02_set_set(v);
                            this->message_02_trigger_bang();
                        }
                        
                        void message_02_set_bang() {
                            list v = this->message_02_set;
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("STUTTER/circ1l/quantize/message_obj-138"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void eventinlet_01_out1_bang_bang() {
                            this->message_02_set_bang();
                            this->message_02_trigger_bang();
                        }
                        
                        void eventinlet_01_out1_number_set(number v) {
                            {
                                list converted = {v};
                                this->message_02_set_set(converted);
                            }
                        
                            this->message_02_trigger_bang();
                        }
                        
                        void numberobj_11_value_bang() {
                            number v = this->numberobj_11_value;
                            number localvalue = v;
                        
                            if (this->numberobj_11_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ1l/quantize/number_obj-11"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_11_output_set(localvalue);
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_01_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_01_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_01_value = localvalue;
                        }
                        
                        void numberobj_02_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_02_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_02_value = localvalue;
                        }
                        
                        void numberobj_03_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_03_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_03_value = localvalue;
                        }
                        
                        void numberobj_04_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_04_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_04_value = localvalue;
                        }
                        
                        void numberobj_05_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_05_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_05_value = localvalue;
                        }
                        
                        void numberobj_06_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_06_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_06_value = localvalue;
                        }
                        
                        void numberobj_07_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_07_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_07_value = localvalue;
                        }
                        
                        void numberobj_08_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_08_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_08_value = localvalue;
                        }
                        
                        void numberobj_09_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_09_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_09_value = localvalue;
                        }
                        
                        void numberobj_10_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_10_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_10_value = localvalue;
                        }
                        
                        void numberobj_11_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_11_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_11_value = localvalue;
                        }
                        
                        void message_01_init() {
                            this->message_01_set_set({
                                1816.137441,
                                816.137441,
                                316.137441,
                                66.137441,
                                58.862559,
                                121.362559,
                                152.612559,
                                168.237559
                            });
                        }
                        
                        void numberobj_01_init() {
                            this->numberobj_01_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ1l/quantize/number_obj-13"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_01_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_01_value;
                        }
                        
                        void numberobj_01_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_01_value_set(preset["value"]);
                        }
                        
                        void message_02_init() {
                            this->message_02_set_set({2000, 1000, 500, 250, 125, 62.5, 31.25, 15.625});
                        }
                        
                        void numberobj_02_init() {
                            this->numberobj_02_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ1l/quantize/number_obj-39"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_02_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_02_value;
                        }
                        
                        void numberobj_02_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_02_value_set(preset["value"]);
                        }
                        
                        void numberobj_03_init() {
                            this->numberobj_03_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ1l/quantize/number_obj-37"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_03_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_03_value;
                        }
                        
                        void numberobj_03_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_03_value_set(preset["value"]);
                        }
                        
                        void numberobj_04_init() {
                            this->numberobj_04_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ1l/quantize/number_obj-15"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_04_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_04_value;
                        }
                        
                        void numberobj_04_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_04_value_set(preset["value"]);
                        }
                        
                        void numberobj_05_init() {
                            this->numberobj_05_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ1l/quantize/number_obj-17"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_05_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_05_value;
                        }
                        
                        void numberobj_05_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_05_value_set(preset["value"]);
                        }
                        
                        void numberobj_06_init() {
                            this->numberobj_06_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ1l/quantize/number_obj-19"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_06_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_06_value;
                        }
                        
                        void numberobj_06_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_06_value_set(preset["value"]);
                        }
                        
                        void numberobj_07_init() {
                            this->numberobj_07_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ1l/quantize/number_obj-21"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_07_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_07_value;
                        }
                        
                        void numberobj_07_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_07_value_set(preset["value"]);
                        }
                        
                        void numberobj_08_init() {
                            this->numberobj_08_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ1l/quantize/number_obj-23"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_08_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_08_value;
                        }
                        
                        void numberobj_08_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_08_value_set(preset["value"]);
                        }
                        
                        void numberobj_09_init() {
                            this->numberobj_09_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ1l/quantize/number_obj-25"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_09_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_09_value;
                        }
                        
                        void numberobj_09_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_09_value_set(preset["value"]);
                        }
                        
                        void numberobj_10_init() {
                            this->numberobj_10_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ1l/quantize/number_obj-27"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_10_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_10_value;
                        }
                        
                        void numberobj_10_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_10_value_set(preset["value"]);
                        }
                        
                        void numberobj_11_init() {
                            this->numberobj_11_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ1l/quantize/number_obj-11"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_11_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_11_value;
                        }
                        
                        void numberobj_11_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_11_value_set(preset["value"]);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            minimum_01_right = 0;
                            minimum_01_out = 0;
                            minimum_01_index = 0;
                            pak_01_in1 = 0;
                            pak_01_in2 = 0;
                            pak_01_in3 = 0;
                            pak_01_in4 = 0;
                            pak_01_in5 = 0;
                            pak_01_in6 = 0;
                            pak_01_in7 = 0;
                            pak_01_in8 = 0;
                            numberobj_01_value = 0;
                            numberobj_01_value_setter(numberobj_01_value);
                            expr_01_in1 = 0;
                            expr_01_in2 = 0;
                            expr_01_out1 = 0;
                            unpack_01_out1 = 0;
                            unpack_01_out2 = 0;
                            unpack_01_out3 = 0;
                            unpack_01_out4 = 0;
                            unpack_01_out5 = 0;
                            unpack_01_out6 = 0;
                            unpack_01_out7 = 0;
                            unpack_01_out8 = 0;
                            numberobj_02_value = 0;
                            numberobj_02_value_setter(numberobj_02_value);
                            numberobj_03_value = 0;
                            numberobj_03_value_setter(numberobj_03_value);
                            numberobj_04_value = 0;
                            numberobj_04_value_setter(numberobj_04_value);
                            expr_02_in1 = 0;
                            expr_02_in2 = 0;
                            expr_02_out1 = 0;
                            numberobj_05_value = 0;
                            numberobj_05_value_setter(numberobj_05_value);
                            expr_03_in1 = 0;
                            expr_03_in2 = 0;
                            expr_03_out1 = 0;
                            numberobj_06_value = 0;
                            numberobj_06_value_setter(numberobj_06_value);
                            expr_04_in1 = 0;
                            expr_04_in2 = 0;
                            expr_04_out1 = 0;
                            numberobj_07_value = 0;
                            numberobj_07_value_setter(numberobj_07_value);
                            expr_05_in1 = 0;
                            expr_05_in2 = 0;
                            expr_05_out1 = 0;
                            numberobj_08_value = 0;
                            numberobj_08_value_setter(numberobj_08_value);
                            expr_06_in1 = 0;
                            expr_06_in2 = 0;
                            expr_06_out1 = 0;
                            numberobj_09_value = 0;
                            numberobj_09_value_setter(numberobj_09_value);
                            expr_07_in1 = 0;
                            expr_07_in2 = 0;
                            expr_07_out1 = 0;
                            numberobj_10_value = 0;
                            numberobj_10_value_setter(numberobj_10_value);
                            expr_08_in1 = 0;
                            expr_08_in2 = 0;
                            expr_08_out1 = 0;
                            numberobj_11_value = 0;
                            numberobj_11_value_setter(numberobj_11_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_01_currentFormat = 6;
                            numberobj_01_lastValue = 0;
                            numberobj_02_currentFormat = 6;
                            numberobj_02_lastValue = 0;
                            numberobj_03_currentFormat = 6;
                            numberobj_03_lastValue = 0;
                            numberobj_04_currentFormat = 6;
                            numberobj_04_lastValue = 0;
                            numberobj_05_currentFormat = 6;
                            numberobj_05_lastValue = 0;
                            numberobj_06_currentFormat = 6;
                            numberobj_06_lastValue = 0;
                            numberobj_07_currentFormat = 6;
                            numberobj_07_lastValue = 0;
                            numberobj_08_currentFormat = 6;
                            numberobj_08_lastValue = 0;
                            numberobj_09_currentFormat = 6;
                            numberobj_09_lastValue = 0;
                            numberobj_10_currentFormat = 6;
                            numberobj_10_lastValue = 0;
                            numberobj_11_currentFormat = 6;
                            numberobj_11_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            list minimum_01_input;
                            number minimum_01_right;
                            number minimum_01_out;
                            number minimum_01_index;
                            list message_01_set;
                            number pak_01_in1;
                            number pak_01_in2;
                            number pak_01_in3;
                            number pak_01_in4;
                            number pak_01_in5;
                            number pak_01_in6;
                            number pak_01_in7;
                            number pak_01_in8;
                            number numberobj_01_value;
                            number expr_01_in1;
                            number expr_01_in2;
                            number expr_01_out1;
                            number unpack_01_out1;
                            number unpack_01_out2;
                            number unpack_01_out3;
                            number unpack_01_out4;
                            number unpack_01_out5;
                            number unpack_01_out6;
                            number unpack_01_out7;
                            number unpack_01_out8;
                            list message_02_set;
                            number numberobj_02_value;
                            number numberobj_03_value;
                            list listlookup_01_input;
                            list listlookup_01_lookup;
                            number numberobj_04_value;
                            number expr_02_in1;
                            number expr_02_in2;
                            number expr_02_out1;
                            number numberobj_05_value;
                            number expr_03_in1;
                            number expr_03_in2;
                            number expr_03_out1;
                            number numberobj_06_value;
                            number expr_04_in1;
                            number expr_04_in2;
                            number expr_04_out1;
                            number numberobj_07_value;
                            number expr_05_in1;
                            number expr_05_in2;
                            number expr_05_out1;
                            number numberobj_08_value;
                            number expr_06_in1;
                            number expr_06_in2;
                            number expr_06_out1;
                            number numberobj_09_value;
                            number expr_07_in1;
                            number expr_07_in2;
                            number expr_07_out1;
                            number numberobj_10_value;
                            number expr_08_in1;
                            number expr_08_in2;
                            number expr_08_out1;
                            number numberobj_11_value;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Int numberobj_01_currentFormat;
                            number numberobj_01_lastValue;
                            Int numberobj_02_currentFormat;
                            number numberobj_02_lastValue;
                            Int numberobj_03_currentFormat;
                            number numberobj_03_lastValue;
                            Int numberobj_04_currentFormat;
                            number numberobj_04_lastValue;
                            Int numberobj_05_currentFormat;
                            number numberobj_05_lastValue;
                            Int numberobj_06_currentFormat;
                            number numberobj_06_lastValue;
                            Int numberobj_07_currentFormat;
                            number numberobj_07_lastValue;
                            Int numberobj_08_currentFormat;
                            number numberobj_08_lastValue;
                            Int numberobj_09_currentFormat;
                            number numberobj_09_lastValue;
                            Int numberobj_10_currentFormat;
                            number numberobj_10_lastValue;
                            Int numberobj_11_currentFormat;
                            number numberobj_11_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_20()
            {
            }
            
            ~RNBOSubpatcher_20()
            {
                delete this->p_01;
            }
            
            virtual RNBOSubpatcher_29* getPatcher() const {
                return static_cast<RNBOSubpatcher_29 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, 892732297, false);
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number minimum(number x, number y) {
                return (y < x ? y : x);
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return globalrandom() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out2 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
            
                this->groove_01_perform(
                    this->groove_01_rate_auto,
                    this->groove_01_begin,
                    this->groove_01_end,
                    out2,
                    this->dummyBuffer,
                    n
                );
            
                this->p_01_perform(n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->groove_01_dspsetup(forceDSPSetup);
                this->p_01->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_01 = new RNBOSubpatcher_16();
                this->p_01->setEngineAndPatcher(this->getEngine(), this);
                this->p_01->initialize();
                this->p_01->setParameterOffset(this->getParameterOffset(this->p_01));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_01->getPreset(getSubState(getSubState(preset, "__sps"), "quantize"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        this->p_01->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_01->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_01->getNumParameters())
                            this->p_01->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_01)
                    return 0;
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case 892732297:
                    {
                    this->loadmess_01_startupbang_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/circ1l/message_obj-22") == objectId)
                        this->message_03_listin_number_set(payload);
            
                    if (TAG("STUTTER/circ1l/message_obj-20") == objectId)
                        this->message_04_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("STUTTER/circ1l/number_obj-57") == objectId)
                        this->numberobj_12_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("STUTTER/circ1l/number_obj-57") == objectId)
                        this->numberobj_12_format_set(payload);
            
                    break;
                    }
                }
            
                this->p_01->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/circ1l/message_obj-22") == objectId)
                        this->message_03_listin_list_set(payload);
            
                    if (TAG("STUTTER/circ1l/message_obj-20") == objectId)
                        this->message_04_listin_list_set(payload);
            
                    break;
                    }
                }
            
                this->p_01->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("bangin"):
                    {
                    if (TAG("STUTTER/circ1l/button_obj-13") == objectId)
                        this->button_01_bangin_bang();
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/circ1l/message_obj-22") == objectId)
                        this->message_03_listin_bang_bang();
            
                    if (TAG("STUTTER/circ1l/message_obj-20") == objectId)
                        this->message_04_listin_bang_bang();
            
                    break;
                    }
                case TAG("startupbang"):
                    {
                    if (TAG("STUTTER/circ1l/loadmess_obj-7") == objectId)
                        this->loadmess_01_startupbang_bang();
            
                    break;
                    }
                }
            
                this->p_01->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("STUTTER/circ1l/button_obj-13"):
                    {
                    return "STUTTER/circ1l/button_obj-13";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("STUTTER/circ1l/message_obj-22"):
                    {
                    return "STUTTER/circ1l/message_obj-22";
                    }
                case TAG("STUTTER/circ1l/message_obj-20"):
                    {
                    return "STUTTER/circ1l/message_obj-20";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("STUTTER/circ1l/number_obj-57"):
                    {
                    return "STUTTER/circ1l/number_obj-57";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("startupbang"):
                    {
                    return "startupbang";
                    }
                case TAG("STUTTER/circ1l/loadmess_obj-7"):
                    {
                    return "STUTTER/circ1l/loadmess_obj-7";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                auto subpatchResult_0 = this->p_01->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->groove_01_buffer = new Float32Buffer(this->getPatcher()->getPatcher()->buff1);
                }
            
                this->p_01->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->groove_01_buffer = new Float32Buffer(this->getPatcher()->getPatcher()->buff1);
            }
            
            protected:
            
            void button_01_bangin_bang() {
                this->button_01_bangval_bang();
            }
            
            void eventinlet_03_out1_number_set(number v) {
                RNBO_UNUSED(v);
                this->button_01_bangval_bang();
            }
            
            void eventinlet_03_out1_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->button_01_bangval_bang();
            }
            
            void message_03_listin_list_set(const list& v) {
                this->message_03_set_set(v);
            }
            
            void message_03_listin_number_set(number v) {
                this->message_03_set_set(v);
            }
            
            void message_03_listin_bang_bang() {
                this->message_03_trigger_bang();
            }
            
            void message_04_listin_list_set(const list& v) {
                this->message_04_set_set(v);
            }
            
            void message_04_listin_number_set(number v) {
                this->message_04_set_set(v);
            }
            
            void message_04_listin_bang_bang() {
                this->message_04_trigger_bang();
            }
            
            void eventinlet_04_out1_bang_bang() {
                this->scale_01_outlow_bang();
            }
            
            void eventinlet_04_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_01_outlow_set(converted);
                }
            }
            
            void eventinlet_05_out1_bang_bang() {
                this->scale_01_outhigh_bang();
            }
            
            void eventinlet_05_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_01_outhigh_set(converted);
                }
            }
            
            void loadmess_01_startupbang_bang() {
                this->loadmess_01_message_bang();
            }
            
            void numberobj_12_valin_set(number v) {
                this->numberobj_12_value_set(v);
            }
            
            void numberobj_12_format_set(number v) {
                this->numberobj_12_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_06_out1_bang_bang() {
                this->p_01_in1_bang_bang();
            }
            
            void eventinlet_06_out1_number_set(number v) {
                this->p_01_in1_number_set(v);
            }
            
            void eventinlet_07_out1_bang_bang() {
                this->switchobj_01_onoff_bang();
            }
            
            void eventinlet_07_out1_number_set(number v) {
                this->switchobj_01_onoff_set(v);
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->message_03_init();
                this->message_04_init();
                this->random_01_nz_init();
                this->numberobj_12_init();
                this->p_01->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_01->startup();
                this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
            }
            
            void allocateDataRefs() {
                this->p_01->allocateDataRefs();
                this->groove_01_buffer = this->groove_01_buffer->allocateIfNeeded();
            }
            
            void message_04_set_set(const list& v) {
                this->message_04_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/circ1l/message_obj-20"),
                    v,
                    this->_currentTime
                );
            }
            
            void expr_10_out1_set(number v) {
                this->expr_10_out1 = v;
            
                {
                    list converted = {this->expr_10_out1};
                    this->message_04_set_set(converted);
                }
            }
            
            void expr_10_in1_set(number in1) {
                this->expr_10_in1 = in1;
                this->expr_10_out1_set(this->expr_10_in1 + this->expr_10_in2);//#map:STUTTER/circ1l/+_obj-18:1
            }
            
            void expr_10_in2_set(number v) {
                this->expr_10_in2 = v;
                this->expr_10_in1_set(this->expr_10_in1);
            }
            
            void switchobj_01_out_number_set(number v) {
                this->expr_10_in2_set(v);
            }
            
            void switchobj_01_in2_number_set(number v) {
                if (this->switchobj_01_onoff == 2) {
                    this->switchobj_01_out_number_set(v);
                }
            }
            
            void p_01_out1_number_set(number v) {
                this->switchobj_01_in2_number_set(v);
            }
            
            void p_01_in2_list_set(const list& v) {
                this->p_01->updateTime(this->_currentTime);
                this->p_01->eventinlet_02_out1_list_set(v);
            }
            
            void switchobj_01_out_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_10_in2_set(converted);
                }
            }
            
            void switchobj_01_in1_list_set(const list& v) {
                if (this->switchobj_01_onoff == 1) {
                    this->switchobj_01_out_list_set(v);
                }
            }
            
            void scale_01_out_set(const list& v) {
                this->scale_01_out = jsCreateListCopy(v);
                this->p_01_in2_list_set(v);
                this->switchobj_01_in1_list_set(v);
            }
            
            void scale_01_input_set(const list& v) {
                this->scale_01_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_01_inlow,
                        this->scale_01_inhigh,
                        this->scale_01_outlow,
                        this->scale_01_outhigh,
                        this->scale_01_power
                    ));
                }
            
                this->scale_01_out_set(tmp);
            }
            
            void random_01_result_set(number v) {
                {
                    list converted = {v};
                    this->scale_01_input_set(converted);
                }
            }
            
            void random_01_trigger_bang() {
                this->random_01_result_set(rnbo_abs(this->random_01_nz_next()) * this->random_01_limit);
            }
            
            void trigger_01_out4_bang() {
                this->random_01_trigger_bang();
            }
            
            void groove_01_end_set(number v) {
                this->groove_01_end = v;
            }
            
            void eventoutlet_04_in1_list_set(const list& v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_05_out4_list_set((list)v);
            }
            
            void message_04_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->groove_01_end_set(converted);
                }
            
                this->eventoutlet_04_in1_list_set(v);
            }
            
            void message_04_trigger_bang() {
                this->message_04_out_set(this->message_04_set);
            }
            
            void trigger_01_out3_bang() {
                this->message_04_trigger_bang();
            }
            
            void groove_01_begin_set(number v) {
                this->groove_01_begin = v;
            }
            
            void eventoutlet_03_in1_list_set(const list& v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_05_out3_list_set((list)v);
            }
            
            void message_03_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->groove_01_begin_set(converted);
                }
            
                this->eventoutlet_03_in1_list_set(v);
            }
            
            void message_03_trigger_bang() {
                this->message_03_out_set(this->message_03_set);
            }
            
            void trigger_01_out2_bang() {
                this->message_03_trigger_bang();
            }
            
            void groove_01_rate_bang_bang() {
                this->groove_01_changeIncomingInSamples = this->sampleOffsetIntoNextAudioBuffer + 1;
                this->groove_01_incomingChange = 1;
            }
            
            void trigger_01_out1_bang() {
                this->groove_01_rate_bang_bang();
            }
            
            void trigger_01_input_bang_bang() {
                this->trigger_01_out4_bang();
                this->trigger_01_out3_bang();
                this->trigger_01_out2_bang();
                this->trigger_01_out1_bang();
            }
            
            void eventoutlet_02_in1_bang_bang() {
                ;
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_05_out1_bang_bang();
            }
            
            void button_01_output_bang() {
                this->trigger_01_input_bang_bang();
                this->eventoutlet_02_in1_bang_bang();
            }
            
            void button_01_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("STUTTER/circ1l/button_obj-13"), this->_currentTime);;
                this->button_01_output_bang();
            }
            
            void eventinlet_03_out1_bang_bang() {
                this->button_01_bangval_bang();
            }
            
            void switchobj_01_onoff_set(number v) {
                this->switchobj_01_onoff = v;
            }
            
            void switchobj_01_in1_number_set(number v) {
                if (this->switchobj_01_onoff == 1) {
                    this->switchobj_01_out_number_set(v);
                }
            }
            
            void eventinlet_07_out1_list_set(const list& v) {
                {
                    if (v->length > 2)
                        this->switchobj_01_in2_number_set(v[2]);
            
                    if (v->length > 1)
                        this->switchobj_01_in1_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->switchobj_01_onoff_set(converted);
                }
            }
            
            void p_01_in1_list_set(const list& v) {
                this->p_01->updateTime(this->_currentTime);
                this->p_01->eventinlet_01_out1_list_set(v);
            }
            
            void eventinlet_06_out1_list_set(const list& v) {
                this->p_01_in1_list_set(v);
            }
            
            void scale_01_outlow_set(number v) {
                this->scale_01_outlow = v;
            }
            
            void eventinlet_04_out1_number_set(number v) {
                this->scale_01_outlow_set(v);
            }
            
            void scale_01_outhigh_set(number v) {
                this->scale_01_outhigh = v;
            }
            
            void eventinlet_05_out1_number_set(number v) {
                this->scale_01_outhigh_set(v);
            }
            
            void message_03_set_set(const list& v) {
                this->message_03_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/circ1l/message_obj-22"),
                    v,
                    this->_currentTime
                );
            }
            
            void wrap_01_out1_set(number v) {
                this->expr_10_in1_set(v);
            
                {
                    list converted = {v};
                    this->message_03_set_set(converted);
                }
            }
            
            void wrap_01_x_set(number x) {
                this->wrap_01_x = x;
                auto high = this->wrap_01_high;
                auto low = this->wrap_01_low;
                number lo;
                number hi;
            
                if (low == high) {
                    this->wrap_01_out1_set(low);
                    return;
                }
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi) {
                    this->wrap_01_out1_set(x);
                    return;
                }
            
                if (range <= 0.000000001) {
                    this->wrap_01_out1_set(lo);
                    return;
                }
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi) {
                    this->wrap_01_out1_set(result - range);
                    return;
                } else {
                    this->wrap_01_out1_set(result);
                    return;
                }
            }
            
            void expr_09_out1_set(number v) {
                this->expr_09_out1 = v;
                this->wrap_01_x_set(this->expr_09_out1);
            }
            
            void expr_09_in1_set(number in1) {
                this->expr_09_in1 = in1;
                this->expr_09_out1_set(this->expr_09_in1 - this->expr_09_in2);//#map:STUTTER/circ1l/-_obj-79:1
            }
            
            void receive_01_output_number_set(number v) {
                this->receive_01_output_number = v;
                this->expr_09_in1_set(v);
            }
            
            void scale_01_outlow_bang() {}
            
            void scale_01_outhigh_bang() {}
            
            void groove_01_crossfade_set(number v) {
                this->groove_01_crossfade = v;
                this->groove_01_crossfadeInSamples = this->mstosamps(v);
            }
            
            void numberobj_12_output_set(number v) {
                this->groove_01_crossfade_set(v);
            }
            
            void numberobj_12_value_set(number v) {
                this->numberobj_12_value_setter(v);
                v = this->numberobj_12_value;
                number localvalue = v;
            
                if (this->numberobj_12_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/circ1l/number_obj-57"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_12_output_set(localvalue);
            }
            
            void loadmess_01_message_bang() {
                list v = this->loadmess_01_message;
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_12_value_set(converted);
                }
            }
            
            void p_01_in1_bang_bang() {
                this->p_01->updateTime(this->_currentTime);
                this->p_01->eventinlet_01_out1_bang_bang();
            }
            
            void p_01_in1_number_set(number v) {
                this->p_01->updateTime(this->_currentTime);
                this->p_01->eventinlet_01_out1_number_set(v);
            }
            
            void switchobj_01_onoff_bang() {
                this->switchobj_01_out_number_set(this->switchobj_01_onoff);
            }
            
            void groove_01_perform(
                number rate_auto,
                number begin,
                number end,
                SampleValue * out1,
                SampleValue * sync,
                Index n
            ) {
                RNBO_UNUSED(out1);
                RNBO_UNUSED(rate_auto);
                auto __groove_01_crossfade = this->groove_01_crossfade;
                auto __groove_01_loop = this->groove_01_loop;
                auto __groove_01_playStatus = this->groove_01_playStatus;
                auto __groove_01_readIndex = this->groove_01_readIndex;
                auto __groove_01_incomingChange = this->groove_01_incomingChange;
                auto __groove_01_changeIncomingInSamples = this->groove_01_changeIncomingInSamples;
                auto __groove_01_buffer = this->groove_01_buffer;
                SampleArray<1> out = {out1};
                SampleIndex bufferLength = (SampleIndex)(__groove_01_buffer->getSize());
                Index i = 0;
            
                if (bufferLength > 1) {
                    auto effectiveChannels = this->minimum(__groove_01_buffer->getChannels(), 1);
                    number srMult = 0.001 * __groove_01_buffer->getSampleRate();
                    number srInv = (number)1 / this->samplerate();
                    number rateMult = __groove_01_buffer->getSampleRate() * srInv;
            
                    for (; i < n; i++) {
                        Index channel = 0;
                        number offset = 0;
                        number loopMin = begin * srMult;
                        loopMin = (loopMin > bufferLength - 1 ? bufferLength - 1 : (loopMin < 0 ? 0 : loopMin));
                        number loopMax = (end < 0 ? bufferLength : end * srMult);
                        loopMax = (loopMax > bufferLength ? bufferLength : (loopMax < 0 ? 0 : loopMax));
            
                        if (loopMin >= loopMax) {
                            offset = loopMax;
                            loopMax = bufferLength;
                            loopMin -= offset;
                        }
            
                        number loopLength = loopMax - loopMin;
                        number currentRate = 1 * rateMult;
                        number currentSync = 0;
            
                        if (__groove_01_changeIncomingInSamples > 0) {
                            __groove_01_changeIncomingInSamples--;
            
                            if (__groove_01_changeIncomingInSamples <= 0) {
                                if (__groove_01_incomingChange == 1) {
                                    if (currentRate < 0) {
                                        __groove_01_readIndex = loopMax - 1;
                                    } else {
                                        __groove_01_readIndex = loopMin;
                                    }
            
                                    __groove_01_playStatus = 1;
                                } else if (__groove_01_incomingChange == 0) {
                                    __groove_01_playStatus = 0;
                                }
            
                                __groove_01_incomingChange = 2;
                            }
                        }
            
                        if (loopLength > 0) {
                            if (currentRate != 0) {
                                if (__groove_01_playStatus == 1) {
                                    if ((bool)(__groove_01_loop)) {
                                        while (__groove_01_readIndex < loopMin) {
                                            __groove_01_readIndex += loopLength;
                                        }
            
                                        while (__groove_01_readIndex >= loopMax) {
                                            __groove_01_readIndex -= loopLength;
                                        }
                                    } else if (__groove_01_readIndex >= loopMax || __groove_01_readIndex < loopMin) {
                                        __groove_01_playStatus = 0;
                                        break;
                                    }
            
                                    for (; channel < effectiveChannels; channel++) {
                                        number outSample = (currentRate == 1 ? this->groove_01_getSample((Index)(channel), trunc(__groove_01_readIndex), offset, bufferLength) : this->groove_01_interpolatedSample(
                                            (Index)(channel),
                                            __groove_01_readIndex,
                                            loopMax,
                                            loopLength,
                                            offset,
                                            bufferLength
                                        ));
            
                                        if (__groove_01_crossfade > 0) {
                                            out[(Index)channel][(Index)i] = this->groove_01_crossfadedSample(
                                                outSample,
                                                __groove_01_readIndex,
                                                (Index)(channel),
                                                currentRate,
                                                loopMin,
                                                loopMax,
                                                loopLength,
                                                offset,
                                                bufferLength
                                            );
                                        } else {
                                            out[(Index)channel][(Index)i] = outSample;
                                        }
                                    }
            
                                    __groove_01_readIndex += currentRate;
                                }
                            }
                        }
            
                        for (; channel < 1; channel++) {
                            if (__groove_01_playStatus <= 0)
                                sync[(Index)i] = 0;
            
                            out[(Index)channel][(Index)i] = 0;
                        }
                    }
                }
            
                for (; i < n; i++) {
                    if (__groove_01_playStatus <= 0)
                        sync[(Index)i] = 0;
            
                    for (number channel = 0; channel < 1; channel++) {
                        out[(Index)channel][(Index)i] = 0;
                    }
                }
            
                this->groove_01_changeIncomingInSamples = __groove_01_changeIncomingInSamples;
                this->groove_01_incomingChange = __groove_01_incomingChange;
                this->groove_01_readIndex = __groove_01_readIndex;
                this->groove_01_playStatus = __groove_01_playStatus;
            }
            
            void p_01_perform(Index n) {
                // subpatcher: quantize
                this->p_01->process(nullptr, 0, nullptr, 0, n);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void random_01_limit_setter(number v) {
                if (v >= 0)
                    this->random_01_limit = v;
            }
            
            void numberobj_12_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_12_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_12_value = localvalue;
            }
            
            number groove_01_getSample(
                Index channel,
                SampleIndex index,
                SampleIndex offset,
                SampleIndex bufferLength
            ) {
                if (offset > 0) {
                    index += offset;
            
                    if (index >= bufferLength)
                        index -= bufferLength;
                }
            
                return this->groove_01_buffer->getSample(channel, index);
            }
            
            number groove_01_interpolatedSample(
                Index channel,
                number index,
                SampleIndex end,
                SampleIndex length,
                SampleIndex offset,
                SampleIndex bufferLength
            ) {
                SampleIndex index1 = (SampleIndex)(trunc(index));
                number i_x = index - index1;
                number i_1px = 1. + i_x;
                number i_1mx = 1. - i_x;
                number i_2mx = 2. - i_x;
                number i_a = i_1mx * i_2mx;
                number i_b = i_1px * i_x;
                number i_p1 = -.1666667 * i_a * i_x;
                number i_p2 = .5 * i_1px * i_a;
                number i_p3 = .5 * i_b * i_2mx;
                number i_p4 = -.1666667 * i_b * i_1mx;
                SampleIndex index2 = (SampleIndex)(index1 + 1);
            
                if (index2 >= end)
                    index2 -= length;
            
                SampleIndex index3 = (SampleIndex)(index1 + 2);
            
                if (index3 >= end)
                    index3 -= length;
            
                SampleIndex index4 = (SampleIndex)(index1 + 3);
            
                if (index4 >= end)
                    index4 -= length;
            
                return this->groove_01_getSample(channel, index1, offset, bufferLength) * i_p1 + this->groove_01_getSample(channel, index2, offset, bufferLength) * i_p2 + this->groove_01_getSample(channel, index3, offset, bufferLength) * i_p3 + this->groove_01_getSample(channel, index4, offset, bufferLength) * i_p4;
            }
            
            number groove_01_crossfadedSample(
                SampleValue out,
                number readIndex,
                Index channel,
                number rate,
                number loopMin,
                number loopMax,
                number loopLength,
                number offset,
                number bufferLength
            ) {
                auto crossFadeStart1 = this->maximum(loopMin - this->groove_01_crossfadeInSamples, 0);
                auto crossFadeEnd1 = this->minimum(crossFadeStart1 + this->groove_01_crossfadeInSamples, bufferLength);
                number crossFadeStart2 = crossFadeStart1 + loopLength;
                auto crossFadeEnd2 = this->minimum(crossFadeEnd1 + loopLength, bufferLength);
                number crossFadeLength = crossFadeEnd2 - crossFadeStart2;
            
                if (crossFadeLength > 0) {
                    crossFadeEnd1 = crossFadeStart1 + crossFadeLength;
                    number diff = -1;
                    number addFactor = 0;
            
                    if (readIndex >= crossFadeStart2) {
                        diff = readIndex - crossFadeStart2;
                        addFactor = -1;
                    } else if (readIndex < crossFadeEnd1) {
                        diff = crossFadeEnd1 - readIndex + loopMax - crossFadeStart2;
                        addFactor = 1;
                    }
            
                    if (diff >= 0) {
                        number out2ReadIndex = readIndex + loopLength * addFactor;
                        number out2 = (rate == 1 ? this->groove_01_getSample(channel, trunc(out2ReadIndex), offset, bufferLength) : this->groove_01_interpolatedSample(channel, out2ReadIndex, loopMax, loopLength, offset, bufferLength));
                        number out2Factor = diff / crossFadeLength;
                        number out1Factor = 1 - out2Factor;
                        return out * out1Factor + out2 * out2Factor;
                    }
                }
            
                return out;
            }
            
            void groove_01_dspsetup(bool force) {
                if ((bool)(this->groove_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->groove_01_crossfadeInSamples = this->mstosamps(this->groove_01_crossfade);
                this->groove_01_setupDone = true;
            }
            
            void message_03_init() {
                this->message_03_set_set({6032.6875});
            }
            
            void message_04_init() {
                this->message_04_set_set({6216.55});
            }
            
            void random_01_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_01_nz_state
                );
            }
            
            void random_01_nz_init() {
                this->random_01_nz_reset();
            }
            
            void random_01_nz_seed(number v) {
                xoshiro_reset(v, this->random_01_nz_state);
            }
            
            number random_01_nz_next() {
                return xoshiro_next(this->random_01_nz_state);
            }
            
            void numberobj_12_init() {
                this->numberobj_12_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/circ1l/number_obj-57"), 1, this->_currentTime);
            }
            
            void numberobj_12_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_12_value;
            }
            
            void numberobj_12_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_12_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                groove_01_rate_auto = 1;
                groove_01_begin = 0;
                groove_01_end = -1;
                groove_01_loop = 1;
                groove_01_crossfade = 0;
                wrap_01_x = 0;
                wrap_01_low = 0;
                wrap_01_high = 30000;
                expr_09_in1 = 0;
                expr_09_in2 = 10;
                expr_09_out1 = 0;
                receive_01_output_number = 0;
                scale_01_inlow = 0;
                scale_01_inhigh = 4999;
                scale_01_outlow = 0;
                scale_01_outhigh = 1;
                scale_01_power = 1;
                random_01_limit = 5000;
                random_01_limit_setter(random_01_limit);
                random_01_seed = 0;
                expr_10_in1 = 0;
                expr_10_in2 = 0;
                expr_10_out1 = 0;
                loadmess_01_message = { 3 };
                numberobj_12_value = 0;
                numberobj_12_value_setter(numberobj_12_value);
                switchobj_01_onoff = 0;
                p_01_target = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                groove_01_readIndex = 0;
                groove_01_playStatus = 0;
                groove_01_changeIncomingInSamples = 0;
                groove_01_incomingChange = 2;
                groove_01_crossfadeInSamples = 0;
                groove_01_setupDone = false;
                numberobj_12_currentFormat = 6;
                numberobj_12_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number groove_01_rate_auto;
                number groove_01_begin;
                number groove_01_end;
                number groove_01_loop;
                number groove_01_crossfade;
                list message_03_set;
                number wrap_01_x;
                number wrap_01_low;
                number wrap_01_high;
                number expr_09_in1;
                number expr_09_in2;
                number expr_09_out1;
                number receive_01_output_number;
                list receive_01_output_list;
                list message_04_set;
                list scale_01_input;
                number scale_01_inlow;
                number scale_01_inhigh;
                number scale_01_outlow;
                number scale_01_outhigh;
                number scale_01_power;
                list scale_01_out;
                number random_01_limit;
                number random_01_seed;
                number expr_10_in1;
                number expr_10_in2;
                number expr_10_out1;
                list loadmess_01_message;
                number numberobj_12_value;
                number switchobj_01_onoff;
                number p_01_target;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float32BufferRef groove_01_buffer;
                number groove_01_readIndex;
                Index groove_01_playStatus;
                SampleIndex groove_01_changeIncomingInSamples;
                Int groove_01_incomingChange;
                SampleIndex groove_01_crossfadeInSamples;
                bool groove_01_setupDone;
                UInt random_01_nz_state[4] = { };
                Int numberobj_12_currentFormat;
                number numberobj_12_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_16* p_01;
            
    };
    
    class RNBOSubpatcher_21 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_29;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_21()
            {
            }
            
            ~RNBOSubpatcher_21()
            {
            }
            
            virtual RNBOSubpatcher_29* getPatcher() const {
                return static_cast<RNBOSubpatcher_29 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, 1329140575, false);
                getEngine()->flushClockEvents(this, -62043057, false);
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return globalrandom() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                this->linetilde_01_perform(out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case 1329140575:
                    {
                    this->pipe_01_out1_set(value);
                    break;
                    }
                case -62043057:
                    {
                    this->linetilde_01_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/likelihood[1]/message_obj-10") == objectId)
                        this->message_05_listin_number_set(payload);
            
                    if (TAG("STUTTER/likelihood[1]/message_obj-12") == objectId)
                        this->message_06_listin_number_set(payload);
            
                    if (TAG("STUTTER/likelihood[1]/message_obj-18") == objectId)
                        this->message_07_listin_number_set(payload);
            
                    if (TAG("STUTTER/likelihood[1]/message_obj-20") == objectId)
                        this->message_08_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("STUTTER/likelihood[1]/number_obj-6") == objectId)
                        this->numberobj_13_valin_set(payload);
            
                    if (TAG("STUTTER/likelihood[1]/number_obj-2") == objectId)
                        this->numberobj_14_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("STUTTER/likelihood[1]/number_obj-6") == objectId)
                        this->numberobj_13_format_set(payload);
            
                    if (TAG("STUTTER/likelihood[1]/number_obj-2") == objectId)
                        this->numberobj_14_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/likelihood[1]/message_obj-10") == objectId)
                        this->message_05_listin_list_set(payload);
            
                    if (TAG("STUTTER/likelihood[1]/message_obj-12") == objectId)
                        this->message_06_listin_list_set(payload);
            
                    if (TAG("STUTTER/likelihood[1]/message_obj-18") == objectId)
                        this->message_07_listin_list_set(payload);
            
                    if (TAG("STUTTER/likelihood[1]/message_obj-20") == objectId)
                        this->message_08_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/likelihood[1]/message_obj-10") == objectId)
                        this->message_05_listin_bang_bang();
            
                    if (TAG("STUTTER/likelihood[1]/message_obj-12") == objectId)
                        this->message_06_listin_bang_bang();
            
                    if (TAG("STUTTER/likelihood[1]/message_obj-18") == objectId)
                        this->message_07_listin_bang_bang();
            
                    if (TAG("STUTTER/likelihood[1]/message_obj-20") == objectId)
                        this->message_08_listin_bang_bang();
            
                    break;
                    }
                case TAG("bangin"):
                    {
                    if (TAG("STUTTER/likelihood[1]/button_obj-56") == objectId)
                        this->button_02_bangin_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("STUTTER/likelihood[1]/message_obj-10"):
                    {
                    return "STUTTER/likelihood[1]/message_obj-10";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("STUTTER/likelihood[1]/number_obj-6"):
                    {
                    return "STUTTER/likelihood[1]/number_obj-6";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("STUTTER/likelihood[1]/button_obj-56"):
                    {
                    return "STUTTER/likelihood[1]/button_obj-56";
                    }
                case TAG("STUTTER/likelihood[1]/message_obj-12"):
                    {
                    return "STUTTER/likelihood[1]/message_obj-12";
                    }
                case TAG("STUTTER/likelihood[1]/number_obj-2"):
                    {
                    return "STUTTER/likelihood[1]/number_obj-2";
                    }
                case TAG("STUTTER/likelihood[1]/message_obj-18"):
                    {
                    return "STUTTER/likelihood[1]/message_obj-18";
                    }
                case TAG("STUTTER/likelihood[1]/message_obj-20"):
                    {
                    return "STUTTER/likelihood[1]/message_obj-20";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void pipe_01_out1_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_01_segments_set(converted);
                }
            }
            
            void message_05_listin_list_set(const list& v) {
                this->message_05_set_set(v);
            }
            
            void message_05_listin_number_set(number v) {
                this->message_05_set_set(v);
            }
            
            void message_05_listin_bang_bang() {
                this->message_05_trigger_bang();
            }
            
            void numberobj_13_valin_set(number v) {
                this->numberobj_13_value_set(v);
            }
            
            void numberobj_13_format_set(number v) {
                this->numberobj_13_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_08_out1_number_set(number v) {
                this->gate_01_input_number_set(v);
            }
            
            void eventinlet_08_out1_list_set(const list& v) {
                this->gate_01_input_list_set(v);
            }
            
            void button_02_bangin_bang() {
                this->button_02_bangval_bang();
            }
            
            void message_06_listin_list_set(const list& v) {
                this->message_06_set_set(v);
            }
            
            void message_06_listin_number_set(number v) {
                this->message_06_set_set(v);
            }
            
            void message_06_listin_bang_bang() {
                this->message_06_trigger_bang();
            }
            
            void numberobj_14_valin_set(number v) {
                this->numberobj_14_value_set(v);
            }
            
            void numberobj_14_format_set(number v) {
                this->numberobj_14_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_07_listin_list_set(const list& v) {
                this->message_07_set_set(v);
            }
            
            void message_07_listin_number_set(number v) {
                this->message_07_set_set(v);
            }
            
            void message_07_listin_bang_bang() {
                this->message_07_trigger_bang();
            }
            
            void message_08_listin_list_set(const list& v) {
                this->message_08_set_set(v);
            }
            
            void message_08_listin_number_set(number v) {
                this->message_08_set_set(v);
            }
            
            void message_08_listin_bang_bang() {
                this->message_08_trigger_bang();
            }
            
            void linetilde_01_target_bang() {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->message_05_init();
                this->numberobj_13_init();
                this->random_02_nz_init();
                this->message_06_init();
                this->numberobj_14_init();
                this->message_07_init();
                this->message_08_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void gate_02_onoff_set(number v) {
                this->gate_02_onoff = v;
            }
            
            void gate_01_onoff_set(number v) {
                this->gate_01_onoff = v;
            }
            
            void pipe_01_in1_set(number v) {
                this->pipe_01_in1 = v;
            
                this->getEngine()->scheduleClockEventWithValue(
                    this,
                    1329140575,
                    this->pipe_01_time + this->_currentTime,
                    this->pipe_01_in1
                );;
            }
            
            void pipe_01_time_set(number v) {
                this->pipe_01_time = v;
            }
            
            void message_06_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->pipe_01_time_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pipe_01_in1_set(converted);
                }
            }
            
            void message_06_trigger_bang() {
                this->message_06_out_set(this->message_06_set);
            }
            
            void select_03_match1_bang() {
                this->message_06_trigger_bang();
            }
            
            void message_05_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->pipe_01_time_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pipe_01_in1_set(converted);
                }
            }
            
            void message_05_trigger_bang() {
                this->message_05_out_set(this->message_05_set);
            }
            
            void select_03_match2_bang() {
                this->message_05_trigger_bang();
            }
            
            void select_03_nomatch_number_set(number ) {}
            
            void select_03_input_number_set(number v) {
                if (v == this->select_03_test1)
                    this->select_03_match1_bang();
                else if (v == this->select_03_test2)
                    this->select_03_match2_bang();
                else
                    this->select_03_nomatch_number_set(v);
            }
            
            void gate_02_out1_number_set(number v) {
                this->gate_02_out1_number = v;
                this->select_03_input_number_set(v);
            }
            
            void gate_02_out2_number_set(number v) {
                this->gate_02_out2_number = v;
            }
            
            void gate_02_input_number_set(number v) {
                if (this->gate_02_onoff == 1)
                    this->gate_02_out1_number_set(v);
                else if (this->gate_02_onoff == 2)
                    this->gate_02_out2_number_set(v);
            }
            
            void gate_01_out1_number_set(number v) {
                this->gate_01_out1_number = v;
            }
            
            void select_01_match1_bang() {
                this->message_05_trigger_bang();
            }
            
            void select_01_match2_bang() {
                this->message_06_trigger_bang();
            }
            
            void select_01_nomatch_number_set(number ) {}
            
            void select_01_input_number_set(number v) {
                if (v == this->select_01_test1)
                    this->select_01_match1_bang();
                else if (v == this->select_01_test2)
                    this->select_01_match2_bang();
                else
                    this->select_01_nomatch_number_set(v);
            }
            
            void expr_11_out1_set(number v) {
                this->expr_11_out1 = v;
                this->select_01_input_number_set(this->expr_11_out1);
            }
            
            void expr_11_in1_set(number in1) {
                this->expr_11_in1 = in1;
                this->expr_11_out1_set(this->expr_11_in1 >= this->expr_11_in2);//#map:STUTTER/likelihood[1]/>=_obj-4:1
            }
            
            void numberobj_13_output_set(number v) {
                this->expr_11_in1_set(v);
            }
            
            void numberobj_13_value_set(number v) {
                this->numberobj_13_value_setter(v);
                v = this->numberobj_13_value;
                number localvalue = v;
            
                if (this->numberobj_13_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/likelihood[1]/number_obj-6"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_13_output_set(localvalue);
            }
            
            void random_02_result_set(number v) {
                this->numberobj_13_value_set(v);
            }
            
            void random_02_trigger_bang() {
                this->random_02_result_set(rnbo_abs(this->random_02_nz_next()) * this->random_02_limit);
            }
            
            void button_02_output_bang() {
                this->random_02_trigger_bang();
            }
            
            void button_02_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("STUTTER/likelihood[1]/button_obj-56"),
                    this->_currentTime
                );;
            
                this->button_02_output_bang();
            }
            
            void gate_01_out2_number_set(number v) {
                this->gate_01_out2_number = v;
                this->button_02_bangval_bang();
            }
            
            void gate_01_input_number_set(number v) {
                if (this->gate_01_onoff == 1)
                    this->gate_01_out1_number_set(v);
                else if (this->gate_01_onoff == 2)
                    this->gate_01_out2_number_set(v);
            }
            
            void message_07_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_02_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_02_onoff_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->gate_01_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_01_onoff_set(converted);
                }
            }
            
            void message_07_trigger_bang() {
                this->message_07_out_set(this->message_07_set);
            }
            
            void select_02_match1_bang() {
                this->message_07_trigger_bang();
                this->message_06_trigger_bang();
            }
            
            void message_08_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_02_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_02_onoff_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->gate_01_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_01_onoff_set(converted);
                }
            }
            
            void message_08_trigger_bang() {
                this->message_08_out_set(this->message_08_set);
            }
            
            void select_02_match2_bang() {
                this->message_08_trigger_bang();
            }
            
            void select_02_nomatch_number_set(number ) {}
            
            void select_02_input_number_set(number v) {
                if (v == this->select_02_test1)
                    this->select_02_match1_bang();
                else if (v == this->select_02_test2)
                    this->select_02_match2_bang();
                else
                    this->select_02_nomatch_number_set(v);
            }
            
            void receive_03_output_number_set(number v) {
                this->receive_03_output_number = v;
                this->select_02_input_number_set(v);
            }
            
            void gate_01_out1_bang_bang() {}
            
            void gate_01_out2_bang_bang() {
                this->button_02_bangval_bang();
            }
            
            void gate_01_input_bang_bang() {
                if (this->gate_01_onoff == 1)
                    this->gate_01_out1_bang_bang();
                else if (this->gate_01_onoff == 2)
                    this->gate_01_out2_bang_bang();
            }
            
            void eventinlet_08_out1_bang_bang() {
                this->gate_01_input_bang_bang();
            }
            
            void receive_04_output_number_set(number v) {
                this->receive_04_output_number = v;
                this->gate_02_input_number_set(v);
            }
            
            void expr_11_in2_set(number v) {
                this->expr_11_in2 = v;
            }
            
            void numberobj_14_output_set(number v) {
                this->expr_11_in2_set(v);
            }
            
            void numberobj_14_value_set(number v) {
                this->numberobj_14_value_setter(v);
                v = this->numberobj_14_value;
                number localvalue = v;
            
                if (this->numberobj_14_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/likelihood[1]/number_obj-2"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_14_output_set(localvalue);
            }
            
            void receive_02_output_number_set(number v) {
                this->receive_02_output_number = v;
                this->numberobj_14_value_set(v);
            }
            
            void select_04_match1_bang() {
                this->message_06_trigger_bang();
            }
            
            void select_04_nomatch_number_set(number ) {}
            
            void select_04_input_number_set(number v) {
                if (v == this->select_04_test1)
                    this->select_04_match1_bang();
                else
                    this->select_04_nomatch_number_set(v);
            }
            
            void receive_05_output_number_set(number v) {
                this->receive_05_output_number = v;
                this->select_04_input_number_set(v);
            }
            
            void linetilde_01_time_set(number v) {
                this->linetilde_01_time = v;
            }
            
            void linetilde_01_segments_set(const list& v) {
                this->linetilde_01_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_01_time == 0) {
                        this->linetilde_01_activeRamps->length = 0;
                        this->linetilde_01_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_01_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_01_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_01_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_01_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_01_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_01_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_01_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_01_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_01_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_01_activeRamps->push(lastRampValue);
                            this->linetilde_01_activeRamps->push(0);
                            this->linetilde_01_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_01_keepramp)) {
                                    this->linetilde_01_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_01_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_01_activeRamps->push(destinationValue);
                            this->linetilde_01_activeRamps->push(inc);
                            this->linetilde_01_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void message_05_set_set(const list& v) {
                this->message_05_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/likelihood[1]/message_obj-10"),
                    v,
                    this->_currentTime
                );
            }
            
            void gate_01_out1_list_set(const list& v) {
                this->gate_01_out1_list = jsCreateListCopy(v);
            }
            
            void gate_01_out2_list_set(const list& v) {
                this->gate_01_out2_list = jsCreateListCopy(v);
                this->button_02_bangval_bang();
            }
            
            void gate_01_input_list_set(const list& v) {
                if (this->gate_01_onoff == 1)
                    this->gate_01_out1_list_set(v);
                else if (this->gate_01_onoff == 2)
                    this->gate_01_out2_list_set(v);
            }
            
            void message_06_set_set(const list& v) {
                this->message_06_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/likelihood[1]/message_obj-12"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_07_set_set(const list& v) {
                this->message_07_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/likelihood[1]/message_obj-18"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_08_set_set(const list& v) {
                this->message_08_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/likelihood[1]/message_obj-20"),
                    v,
                    this->_currentTime
                );
            }
            
            void linetilde_01_perform(SampleValue * out, Index n) {
                auto __linetilde_01_time = this->linetilde_01_time;
                auto __linetilde_01_keepramp = this->linetilde_01_keepramp;
                auto __linetilde_01_currentValue = this->linetilde_01_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_01_activeRamps->length)) {
                    while ((bool)(this->linetilde_01_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_01_activeRamps[0];
                        number inc = this->linetilde_01_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_01_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_01_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_01_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_01_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -62043057,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_01_keepramp))) {
                                    __linetilde_01_time = 0;
                                }
                            }
                        }
            
                        __linetilde_01_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_01_currentValue;
                    i++;
                }
            
                this->linetilde_01_currentValue = __linetilde_01_currentValue;
                this->linetilde_01_time = __linetilde_01_time;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_13_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_13_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_13_value = localvalue;
            }
            
            void random_02_limit_setter(number v) {
                if (v >= 0)
                    this->random_02_limit = v;
            }
            
            void numberobj_14_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_14_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_14_value = localvalue;
            }
            
            void message_05_init() {
                this->message_05_set_set({1});
            }
            
            void numberobj_13_init() {
                this->numberobj_13_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/likelihood[1]/number_obj-6"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_13_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_13_value;
            }
            
            void numberobj_13_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_13_value_set(preset["value"]);
            }
            
            void random_02_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_02_nz_state
                );
            }
            
            void random_02_nz_init() {
                this->random_02_nz_reset();
            }
            
            void random_02_nz_seed(number v) {
                xoshiro_reset(v, this->random_02_nz_state);
            }
            
            number random_02_nz_next() {
                return xoshiro_next(this->random_02_nz_state);
            }
            
            void message_06_init() {
                this->message_06_set_set({0});
            }
            
            void numberobj_14_init() {
                this->numberobj_14_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/likelihood[1]/number_obj-2"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_14_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_14_value;
            }
            
            void numberobj_14_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_14_value_set(preset["value"]);
            }
            
            void message_07_init() {
                this->message_07_set_set({1});
            }
            
            void message_08_init() {
                this->message_08_set_set({2});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gate_01_onoff = 0;
                gate_01_out1_number = 0;
                gate_01_out2_number = 0;
                pipe_01_in1 = 0;
                pipe_01_time = 15;
                linetilde_01_time = 15;
                linetilde_01_keepramp = 1;
                select_01_test1 = 0;
                select_01_test2 = 1;
                numberobj_13_value = 0;
                numberobj_13_value_setter(numberobj_13_value);
                expr_11_in1 = 0;
                expr_11_in2 = 0;
                expr_11_out1 = 0;
                random_02_limit = 101;
                random_02_limit_setter(random_02_limit);
                random_02_seed = 0;
                numberobj_14_value = 0;
                numberobj_14_value_setter(numberobj_14_value);
                receive_02_output_number = 0;
                select_02_test1 = 0;
                select_02_test2 = 1;
                receive_03_output_number = 0;
                gate_02_onoff = 0;
                gate_02_out1_number = 0;
                gate_02_out2_number = 0;
                select_03_test1 = 0;
                select_03_test2 = 1;
                receive_04_output_number = 0;
                select_04_test1 = 0;
                receive_05_output_number = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                linetilde_01_currentValue = 0;
                numberobj_13_currentFormat = 6;
                numberobj_13_lastValue = 0;
                numberobj_14_currentFormat = 6;
                numberobj_14_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gate_01_onoff;
                number gate_01_out1_number;
                list gate_01_out1_list;
                number gate_01_out2_number;
                list gate_01_out2_list;
                number pipe_01_in1;
                number pipe_01_time;
                list linetilde_01_segments;
                number linetilde_01_time;
                number linetilde_01_keepramp;
                list message_05_set;
                number select_01_test1;
                number select_01_test2;
                number numberobj_13_value;
                number expr_11_in1;
                number expr_11_in2;
                number expr_11_out1;
                number random_02_limit;
                number random_02_seed;
                list message_06_set;
                number numberobj_14_value;
                number receive_02_output_number;
                list receive_02_output_list;
                list message_07_set;
                number select_02_test1;
                number select_02_test2;
                number receive_03_output_number;
                list receive_03_output_list;
                list message_08_set;
                number gate_02_onoff;
                number gate_02_out1_number;
                list gate_02_out1_list;
                number gate_02_out2_number;
                list gate_02_out2_list;
                number select_03_test1;
                number select_03_test2;
                number receive_04_output_number;
                list receive_04_output_list;
                number select_04_test1;
                number receive_05_output_number;
                list receive_05_output_list;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                list linetilde_01_activeRamps;
                number linetilde_01_currentValue;
                Int numberobj_13_currentFormat;
                number numberobj_13_lastValue;
                UInt random_02_nz_state[4] = { };
                Int numberobj_14_currentFormat;
                number numberobj_14_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_22 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_29;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_17 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_22;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_17()
                        {
                        }
                        
                        ~RNBOSubpatcher_17()
                        {
                        }
                        
                        virtual RNBOSubpatcher_22* getPatcher() const {
                            return static_cast<RNBOSubpatcher_22 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("STUTTER/circ2l/quantize/message_obj-30") == objectId)
                                    this->message_09_listin_number_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/message_obj-138") == objectId)
                                    this->message_10_listin_number_set(payload);
                        
                                break;
                                }
                            case TAG("valin"):
                                {
                                if (TAG("STUTTER/circ2l/quantize/number_obj-13") == objectId)
                                    this->numberobj_15_valin_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-39") == objectId)
                                    this->numberobj_16_valin_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-37") == objectId)
                                    this->numberobj_17_valin_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-15") == objectId)
                                    this->numberobj_18_valin_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-17") == objectId)
                                    this->numberobj_19_valin_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-19") == objectId)
                                    this->numberobj_20_valin_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-21") == objectId)
                                    this->numberobj_21_valin_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-23") == objectId)
                                    this->numberobj_22_valin_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-25") == objectId)
                                    this->numberobj_23_valin_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-27") == objectId)
                                    this->numberobj_24_valin_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-11") == objectId)
                                    this->numberobj_25_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("STUTTER/circ2l/quantize/number_obj-13") == objectId)
                                    this->numberobj_15_format_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-39") == objectId)
                                    this->numberobj_16_format_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-37") == objectId)
                                    this->numberobj_17_format_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-15") == objectId)
                                    this->numberobj_18_format_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-17") == objectId)
                                    this->numberobj_19_format_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-19") == objectId)
                                    this->numberobj_20_format_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-21") == objectId)
                                    this->numberobj_21_format_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-23") == objectId)
                                    this->numberobj_22_format_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-25") == objectId)
                                    this->numberobj_23_format_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-27") == objectId)
                                    this->numberobj_24_format_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/number_obj-11") == objectId)
                                    this->numberobj_25_format_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("STUTTER/circ2l/quantize/message_obj-30") == objectId)
                                    this->message_09_listin_list_set(payload);
                        
                                if (TAG("STUTTER/circ2l/quantize/message_obj-138") == objectId)
                                    this->message_10_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("STUTTER/circ2l/quantize/message_obj-30") == objectId)
                                    this->message_09_listin_bang_bang();
                        
                                if (TAG("STUTTER/circ2l/quantize/message_obj-138") == objectId)
                                    this->message_10_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("STUTTER/circ2l/quantize/message_obj-30"):
                                {
                                return "STUTTER/circ2l/quantize/message_obj-30";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("STUTTER/circ2l/quantize/number_obj-13"):
                                {
                                return "STUTTER/circ2l/quantize/number_obj-13";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("STUTTER/circ2l/quantize/message_obj-138"):
                                {
                                return "STUTTER/circ2l/quantize/message_obj-138";
                                }
                            case TAG("STUTTER/circ2l/quantize/number_obj-39"):
                                {
                                return "STUTTER/circ2l/quantize/number_obj-39";
                                }
                            case TAG("STUTTER/circ2l/quantize/number_obj-37"):
                                {
                                return "STUTTER/circ2l/quantize/number_obj-37";
                                }
                            case TAG("STUTTER/circ2l/quantize/number_obj-15"):
                                {
                                return "STUTTER/circ2l/quantize/number_obj-15";
                                }
                            case TAG("STUTTER/circ2l/quantize/number_obj-17"):
                                {
                                return "STUTTER/circ2l/quantize/number_obj-17";
                                }
                            case TAG("STUTTER/circ2l/quantize/number_obj-19"):
                                {
                                return "STUTTER/circ2l/quantize/number_obj-19";
                                }
                            case TAG("STUTTER/circ2l/quantize/number_obj-21"):
                                {
                                return "STUTTER/circ2l/quantize/number_obj-21";
                                }
                            case TAG("STUTTER/circ2l/quantize/number_obj-23"):
                                {
                                return "STUTTER/circ2l/quantize/number_obj-23";
                                }
                            case TAG("STUTTER/circ2l/quantize/number_obj-25"):
                                {
                                return "STUTTER/circ2l/quantize/number_obj-25";
                                }
                            case TAG("STUTTER/circ2l/quantize/number_obj-27"):
                                {
                                return "STUTTER/circ2l/quantize/number_obj-27";
                                }
                            case TAG("STUTTER/circ2l/quantize/number_obj-11"):
                                {
                                return "STUTTER/circ2l/quantize/number_obj-11";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void message_09_listin_list_set(const list& v) {
                            this->message_09_set_set(v);
                        }
                        
                        void message_09_listin_number_set(number v) {
                            this->message_09_set_set(v);
                        }
                        
                        void message_09_listin_bang_bang() {
                            this->message_09_trigger_bang();
                        }
                        
                        void numberobj_15_valin_set(number v) {
                            this->numberobj_15_value_set(v);
                        }
                        
                        void numberobj_15_format_set(number v) {
                            this->numberobj_15_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_10_listin_list_set(const list& v) {
                            this->message_10_set_set(v);
                        }
                        
                        void message_10_listin_number_set(number v) {
                            this->message_10_set_set(v);
                        }
                        
                        void message_10_listin_bang_bang() {
                            this->message_10_trigger_bang();
                        }
                        
                        void numberobj_16_valin_set(number v) {
                            this->numberobj_16_value_set(v);
                        }
                        
                        void numberobj_16_format_set(number v) {
                            this->numberobj_16_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_17_valin_set(number v) {
                            this->numberobj_17_value_set(v);
                        }
                        
                        void numberobj_17_format_set(number v) {
                            this->numberobj_17_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_18_valin_set(number v) {
                            this->numberobj_18_value_set(v);
                        }
                        
                        void numberobj_18_format_set(number v) {
                            this->numberobj_18_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_19_valin_set(number v) {
                            this->numberobj_19_value_set(v);
                        }
                        
                        void numberobj_19_format_set(number v) {
                            this->numberobj_19_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_20_valin_set(number v) {
                            this->numberobj_20_value_set(v);
                        }
                        
                        void numberobj_20_format_set(number v) {
                            this->numberobj_20_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_21_valin_set(number v) {
                            this->numberobj_21_value_set(v);
                        }
                        
                        void numberobj_21_format_set(number v) {
                            this->numberobj_21_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_22_valin_set(number v) {
                            this->numberobj_22_value_set(v);
                        }
                        
                        void numberobj_22_format_set(number v) {
                            this->numberobj_22_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_23_valin_set(number v) {
                            this->numberobj_23_value_set(v);
                        }
                        
                        void numberobj_23_format_set(number v) {
                            this->numberobj_23_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_24_valin_set(number v) {
                            this->numberobj_24_value_set(v);
                        }
                        
                        void numberobj_24_format_set(number v) {
                            this->numberobj_24_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_25_valin_set(number v) {
                            this->numberobj_25_value_set(v);
                        }
                        
                        void numberobj_25_format_set(number v) {
                            this->numberobj_25_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void eventinlet_10_out1_bang_bang() {
                            this->numberobj_25_value_bang();
                        }
                        
                        void eventinlet_10_out1_number_set(number v) {
                            this->numberobj_25_value_set(v);
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->message_09_init();
                            this->numberobj_15_init();
                            this->message_10_init();
                            this->numberobj_16_init();
                            this->numberobj_17_init();
                            this->numberobj_18_init();
                            this->numberobj_19_init();
                            this->numberobj_20_init();
                            this->numberobj_21_init();
                            this->numberobj_22_init();
                            this->numberobj_23_init();
                            this->numberobj_24_init();
                            this->numberobj_25_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void message_09_set_set(const list& v) {
                            this->message_09_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("STUTTER/circ2l/quantize/message_obj-30"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void eventoutlet_05_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_02_out1_number_set(v);
                        }
                        
                        void numberobj_16_output_set(number v) {
                            this->eventoutlet_05_in1_number_set(v);
                        }
                        
                        void numberobj_16_value_set(number v) {
                            this->numberobj_16_value_setter(v);
                            v = this->numberobj_16_value;
                            number localvalue = v;
                        
                            if (this->numberobj_16_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ2l/quantize/number_obj-39"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_16_output_set(localvalue);
                        }
                        
                        void listlookup_02_out_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_16_value_set(converted);
                            }
                        }
                        
                        void listlookup_02_input_set(const list& v) {
                            this->listlookup_02_input = jsCreateListCopy(v);
                            list tmp = list();
                        
                            for (Index i = 0; i < v->length; i++) {
                                long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
                        
                                if (j >= 0 && (Index)(j) < this->listlookup_02_lookup->length)
                                    tmp->push(this->listlookup_02_lookup[(Index)j]);
                            }
                        
                            if ((bool)(tmp->length))
                                this->listlookup_02_out_set(tmp);
                        }
                        
                        void numberobj_17_output_set(number v) {
                            {
                                list converted = {v};
                                this->listlookup_02_input_set(converted);
                            }
                        }
                        
                        void numberobj_17_value_set(number v) {
                            this->numberobj_17_value_setter(v);
                            v = this->numberobj_17_value;
                            number localvalue = v;
                        
                            if (this->numberobj_17_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ2l/quantize/number_obj-37"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_17_output_set(localvalue);
                        }
                        
                        void minimum_02_index_set(number v) {
                            this->minimum_02_index = v;
                            this->numberobj_17_value_set(v);
                        }
                        
                        void minimum_02_out_set(number v) {
                            this->minimum_02_out = v;
                        }
                        
                        void minimum_02_input_set(const list& v) {
                            this->minimum_02_input = jsCreateListCopy(v);
                        
                            if (v->length == 1) {
                                if (v[0] < this->minimum_02_right) {
                                    this->minimum_02_index_set(0);
                                    this->minimum_02_out_set(v[0]);
                                } else {
                                    this->minimum_02_index_set(1);
                                    this->minimum_02_out_set(this->minimum_02_right);
                                }
                            } else if (v->length > 0) {
                                int idx = 0;
                                number minimum = v[0];
                        
                                for (Index i = 1; i < v->length; i++) {
                                    if (v[(Index)i] < minimum) {
                                        minimum = v[(Index)i];
                                        idx = i;
                                    }
                                }
                        
                                this->minimum_02_index_set(idx);
                                this->minimum_02_out_set(minimum);
                            }
                        }
                        
                        void message_09_out_set(const list& v) {
                            this->minimum_02_input_set(v);
                        }
                        
                        void message_09_trigger_bang() {
                            this->message_09_out_set(this->message_09_set);
                        }
                        
                        void pak_02_out_set(const list& v) {
                            this->message_09_set_set(v);
                            this->message_09_trigger_bang();
                        }
                        
                        void pak_02_in8_set(number v) {
                            this->pak_02_in8 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_02_in1;
                            array[1] = this->pak_02_in2;
                            array[2] = this->pak_02_in3;
                            array[3] = this->pak_02_in4;
                            array[4] = this->pak_02_in5;
                            array[5] = this->pak_02_in6;
                            array[6] = this->pak_02_in7;
                            array[7] = this->pak_02_in8;
                            this->pak_02_out_set(array);
                        }
                        
                        void numberobj_24_output_set(number v) {
                            this->pak_02_in8_set(v);
                        }
                        
                        void numberobj_24_value_set(number v) {
                            this->numberobj_24_value_setter(v);
                            v = this->numberobj_24_value;
                            number localvalue = v;
                        
                            if (this->numberobj_24_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ2l/quantize/number_obj-27"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_24_output_set(localvalue);
                        }
                        
                        void expr_19_out1_set(number v) {
                            this->expr_19_out1 = v;
                            this->numberobj_24_value_set(this->expr_19_out1);
                        }
                        
                        void expr_19_in1_set(number in1) {
                            this->expr_19_in1 = in1;
                            this->expr_19_out1_set(rnbo_abs(this->expr_19_in1 - this->expr_19_in2));//#map:STUTTER/circ2l/quantize/absdiff_obj-7:1
                        }
                        
                        void expr_19_in2_set(number v) {
                            this->expr_19_in2 = v;
                            this->expr_19_in1_set(this->expr_19_in1);
                        }
                        
                        void pak_02_in7_set(number v) {
                            this->pak_02_in7 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_02_in1;
                            array[1] = this->pak_02_in2;
                            array[2] = this->pak_02_in3;
                            array[3] = this->pak_02_in4;
                            array[4] = this->pak_02_in5;
                            array[5] = this->pak_02_in6;
                            array[6] = this->pak_02_in7;
                            array[7] = this->pak_02_in8;
                            this->pak_02_out_set(array);
                        }
                        
                        void numberobj_23_output_set(number v) {
                            this->pak_02_in7_set(v);
                        }
                        
                        void numberobj_23_value_set(number v) {
                            this->numberobj_23_value_setter(v);
                            v = this->numberobj_23_value;
                            number localvalue = v;
                        
                            if (this->numberobj_23_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ2l/quantize/number_obj-25"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_23_output_set(localvalue);
                        }
                        
                        void expr_18_out1_set(number v) {
                            this->expr_18_out1 = v;
                            this->numberobj_23_value_set(this->expr_18_out1);
                        }
                        
                        void expr_18_in1_set(number in1) {
                            this->expr_18_in1 = in1;
                            this->expr_18_out1_set(rnbo_abs(this->expr_18_in1 - this->expr_18_in2));//#map:STUTTER/circ2l/quantize/absdiff_obj-6:1
                        }
                        
                        void expr_18_in2_set(number v) {
                            this->expr_18_in2 = v;
                            this->expr_18_in1_set(this->expr_18_in1);
                        }
                        
                        void pak_02_in6_set(number v) {
                            this->pak_02_in6 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_02_in1;
                            array[1] = this->pak_02_in2;
                            array[2] = this->pak_02_in3;
                            array[3] = this->pak_02_in4;
                            array[4] = this->pak_02_in5;
                            array[5] = this->pak_02_in6;
                            array[6] = this->pak_02_in7;
                            array[7] = this->pak_02_in8;
                            this->pak_02_out_set(array);
                        }
                        
                        void numberobj_22_output_set(number v) {
                            this->pak_02_in6_set(v);
                        }
                        
                        void numberobj_22_value_set(number v) {
                            this->numberobj_22_value_setter(v);
                            v = this->numberobj_22_value;
                            number localvalue = v;
                        
                            if (this->numberobj_22_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ2l/quantize/number_obj-23"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_22_output_set(localvalue);
                        }
                        
                        void expr_17_out1_set(number v) {
                            this->expr_17_out1 = v;
                            this->numberobj_22_value_set(this->expr_17_out1);
                        }
                        
                        void expr_17_in1_set(number in1) {
                            this->expr_17_in1 = in1;
                            this->expr_17_out1_set(rnbo_abs(this->expr_17_in1 - this->expr_17_in2));//#map:STUTTER/circ2l/quantize/absdiff_obj-5:1
                        }
                        
                        void expr_17_in2_set(number v) {
                            this->expr_17_in2 = v;
                            this->expr_17_in1_set(this->expr_17_in1);
                        }
                        
                        void pak_02_in5_set(number v) {
                            this->pak_02_in5 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_02_in1;
                            array[1] = this->pak_02_in2;
                            array[2] = this->pak_02_in3;
                            array[3] = this->pak_02_in4;
                            array[4] = this->pak_02_in5;
                            array[5] = this->pak_02_in6;
                            array[6] = this->pak_02_in7;
                            array[7] = this->pak_02_in8;
                            this->pak_02_out_set(array);
                        }
                        
                        void numberobj_21_output_set(number v) {
                            this->pak_02_in5_set(v);
                        }
                        
                        void numberobj_21_value_set(number v) {
                            this->numberobj_21_value_setter(v);
                            v = this->numberobj_21_value;
                            number localvalue = v;
                        
                            if (this->numberobj_21_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ2l/quantize/number_obj-21"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_21_output_set(localvalue);
                        }
                        
                        void expr_16_out1_set(number v) {
                            this->expr_16_out1 = v;
                            this->numberobj_21_value_set(this->expr_16_out1);
                        }
                        
                        void expr_16_in1_set(number in1) {
                            this->expr_16_in1 = in1;
                            this->expr_16_out1_set(rnbo_abs(this->expr_16_in1 - this->expr_16_in2));//#map:STUTTER/circ2l/quantize/absdiff_obj-4:1
                        }
                        
                        void expr_16_in2_set(number v) {
                            this->expr_16_in2 = v;
                            this->expr_16_in1_set(this->expr_16_in1);
                        }
                        
                        void pak_02_in4_set(number v) {
                            this->pak_02_in4 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_02_in1;
                            array[1] = this->pak_02_in2;
                            array[2] = this->pak_02_in3;
                            array[3] = this->pak_02_in4;
                            array[4] = this->pak_02_in5;
                            array[5] = this->pak_02_in6;
                            array[6] = this->pak_02_in7;
                            array[7] = this->pak_02_in8;
                            this->pak_02_out_set(array);
                        }
                        
                        void numberobj_20_output_set(number v) {
                            this->pak_02_in4_set(v);
                        }
                        
                        void numberobj_20_value_set(number v) {
                            this->numberobj_20_value_setter(v);
                            v = this->numberobj_20_value;
                            number localvalue = v;
                        
                            if (this->numberobj_20_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ2l/quantize/number_obj-19"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_20_output_set(localvalue);
                        }
                        
                        void expr_15_out1_set(number v) {
                            this->expr_15_out1 = v;
                            this->numberobj_20_value_set(this->expr_15_out1);
                        }
                        
                        void expr_15_in1_set(number in1) {
                            this->expr_15_in1 = in1;
                            this->expr_15_out1_set(rnbo_abs(this->expr_15_in1 - this->expr_15_in2));//#map:STUTTER/circ2l/quantize/absdiff_obj-3:1
                        }
                        
                        void expr_15_in2_set(number v) {
                            this->expr_15_in2 = v;
                            this->expr_15_in1_set(this->expr_15_in1);
                        }
                        
                        void pak_02_in3_set(number v) {
                            this->pak_02_in3 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_02_in1;
                            array[1] = this->pak_02_in2;
                            array[2] = this->pak_02_in3;
                            array[3] = this->pak_02_in4;
                            array[4] = this->pak_02_in5;
                            array[5] = this->pak_02_in6;
                            array[6] = this->pak_02_in7;
                            array[7] = this->pak_02_in8;
                            this->pak_02_out_set(array);
                        }
                        
                        void numberobj_19_output_set(number v) {
                            this->pak_02_in3_set(v);
                        }
                        
                        void numberobj_19_value_set(number v) {
                            this->numberobj_19_value_setter(v);
                            v = this->numberobj_19_value;
                            number localvalue = v;
                        
                            if (this->numberobj_19_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ2l/quantize/number_obj-17"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_19_output_set(localvalue);
                        }
                        
                        void expr_14_out1_set(number v) {
                            this->expr_14_out1 = v;
                            this->numberobj_19_value_set(this->expr_14_out1);
                        }
                        
                        void expr_14_in1_set(number in1) {
                            this->expr_14_in1 = in1;
                            this->expr_14_out1_set(rnbo_abs(this->expr_14_in1 - this->expr_14_in2));//#map:STUTTER/circ2l/quantize/absdiff_obj-2:1
                        }
                        
                        void expr_14_in2_set(number v) {
                            this->expr_14_in2 = v;
                            this->expr_14_in1_set(this->expr_14_in1);
                        }
                        
                        void pak_02_in2_set(number v) {
                            this->pak_02_in2 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_02_in1;
                            array[1] = this->pak_02_in2;
                            array[2] = this->pak_02_in3;
                            array[3] = this->pak_02_in4;
                            array[4] = this->pak_02_in5;
                            array[5] = this->pak_02_in6;
                            array[6] = this->pak_02_in7;
                            array[7] = this->pak_02_in8;
                            this->pak_02_out_set(array);
                        }
                        
                        void numberobj_18_output_set(number v) {
                            this->pak_02_in2_set(v);
                        }
                        
                        void numberobj_18_value_set(number v) {
                            this->numberobj_18_value_setter(v);
                            v = this->numberobj_18_value;
                            number localvalue = v;
                        
                            if (this->numberobj_18_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ2l/quantize/number_obj-15"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_18_output_set(localvalue);
                        }
                        
                        void expr_13_out1_set(number v) {
                            this->expr_13_out1 = v;
                            this->numberobj_18_value_set(this->expr_13_out1);
                        }
                        
                        void expr_13_in1_set(number in1) {
                            this->expr_13_in1 = in1;
                            this->expr_13_out1_set(rnbo_abs(this->expr_13_in1 - this->expr_13_in2));//#map:STUTTER/circ2l/quantize/absdiff_obj-1:1
                        }
                        
                        void expr_13_in2_set(number v) {
                            this->expr_13_in2 = v;
                            this->expr_13_in1_set(this->expr_13_in1);
                        }
                        
                        void pak_02_in1_set(number v) {
                            this->pak_02_in1 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_02_in1;
                            array[1] = this->pak_02_in2;
                            array[2] = this->pak_02_in3;
                            array[3] = this->pak_02_in4;
                            array[4] = this->pak_02_in5;
                            array[5] = this->pak_02_in6;
                            array[6] = this->pak_02_in7;
                            array[7] = this->pak_02_in8;
                            this->pak_02_out_set(array);
                        }
                        
                        void numberobj_15_output_set(number v) {
                            this->pak_02_in1_set(v);
                        }
                        
                        void numberobj_15_value_set(number v) {
                            this->numberobj_15_value_setter(v);
                            v = this->numberobj_15_value;
                            number localvalue = v;
                        
                            if (this->numberobj_15_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ2l/quantize/number_obj-13"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_15_output_set(localvalue);
                        }
                        
                        void expr_12_out1_set(number v) {
                            this->expr_12_out1 = v;
                            this->numberobj_15_value_set(this->expr_12_out1);
                        }
                        
                        void expr_12_in1_set(number in1) {
                            this->expr_12_in1 = in1;
                            this->expr_12_out1_set(rnbo_abs(this->expr_12_in1 - this->expr_12_in2));//#map:STUTTER/circ2l/quantize/absdiff_obj-143:1
                        }
                        
                        void expr_12_in2_set(number v) {
                            this->expr_12_in2 = v;
                            this->expr_12_in1_set(this->expr_12_in1);
                        }
                        
                        void numberobj_25_output_set(number v) {
                            this->expr_19_in2_set(v);
                            this->expr_18_in2_set(v);
                            this->expr_17_in2_set(v);
                            this->expr_16_in2_set(v);
                            this->expr_15_in2_set(v);
                            this->expr_14_in2_set(v);
                            this->expr_13_in2_set(v);
                            this->expr_12_in2_set(v);
                        }
                        
                        void numberobj_25_value_set(number v) {
                            this->numberobj_25_value_setter(v);
                            v = this->numberobj_25_value;
                            number localvalue = v;
                        
                            if (this->numberobj_25_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ2l/quantize/number_obj-11"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_25_output_set(localvalue);
                        }
                        
                        void eventinlet_10_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_25_value_set(converted);
                            }
                        }
                        
                        void message_10_set_set(const list& v) {
                            this->message_10_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("STUTTER/circ2l/quantize/message_obj-138"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void listlookup_02_lookup_set(const list& v) {
                            this->listlookup_02_lookup = jsCreateListCopy(v);
                        }
                        
                        void unpack_02_out8_set(number v) {
                            this->unpack_02_out8 = v;
                            this->expr_19_in1_set(v);
                        }
                        
                        void unpack_02_out7_set(number v) {
                            this->unpack_02_out7 = v;
                            this->expr_18_in1_set(v);
                        }
                        
                        void unpack_02_out6_set(number v) {
                            this->unpack_02_out6 = v;
                            this->expr_17_in1_set(v);
                        }
                        
                        void unpack_02_out5_set(number v) {
                            this->unpack_02_out5 = v;
                            this->expr_16_in1_set(v);
                        }
                        
                        void unpack_02_out4_set(number v) {
                            this->unpack_02_out4 = v;
                            this->expr_15_in1_set(v);
                        }
                        
                        void unpack_02_out3_set(number v) {
                            this->unpack_02_out3 = v;
                            this->expr_14_in1_set(v);
                        }
                        
                        void unpack_02_out2_set(number v) {
                            this->unpack_02_out2 = v;
                            this->expr_13_in1_set(v);
                        }
                        
                        void unpack_02_out1_set(number v) {
                            this->unpack_02_out1 = v;
                            this->expr_12_in1_set(v);
                        }
                        
                        void unpack_02_input_list_set(const list& v) {
                            if (v->length > 7)
                                this->unpack_02_out8_set(v[7]);
                        
                            if (v->length > 6)
                                this->unpack_02_out7_set(v[6]);
                        
                            if (v->length > 5)
                                this->unpack_02_out6_set(v[5]);
                        
                            if (v->length > 4)
                                this->unpack_02_out5_set(v[4]);
                        
                            if (v->length > 3)
                                this->unpack_02_out4_set(v[3]);
                        
                            if (v->length > 2)
                                this->unpack_02_out3_set(v[2]);
                        
                            if (v->length > 1)
                                this->unpack_02_out2_set(v[1]);
                        
                            if (v->length > 0)
                                this->unpack_02_out1_set(v[0]);
                        }
                        
                        void message_10_out_set(const list& v) {
                            this->listlookup_02_lookup_set(v);
                            this->unpack_02_input_list_set(v);
                        }
                        
                        void message_10_trigger_bang() {
                            this->message_10_out_set(this->message_10_set);
                        }
                        
                        void eventinlet_09_out1_list_set(const list& v) {
                            this->message_10_set_set(v);
                            this->message_10_trigger_bang();
                        }
                        
                        void message_10_set_bang() {
                            list v = this->message_10_set;
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("STUTTER/circ2l/quantize/message_obj-138"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void eventinlet_09_out1_bang_bang() {
                            this->message_10_set_bang();
                            this->message_10_trigger_bang();
                        }
                        
                        void eventinlet_09_out1_number_set(number v) {
                            {
                                list converted = {v};
                                this->message_10_set_set(converted);
                            }
                        
                            this->message_10_trigger_bang();
                        }
                        
                        void numberobj_25_value_bang() {
                            number v = this->numberobj_25_value;
                            number localvalue = v;
                        
                            if (this->numberobj_25_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/circ2l/quantize/number_obj-11"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_25_output_set(localvalue);
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_15_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_15_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_15_value = localvalue;
                        }
                        
                        void numberobj_16_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_16_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_16_value = localvalue;
                        }
                        
                        void numberobj_17_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_17_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_17_value = localvalue;
                        }
                        
                        void numberobj_18_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_18_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_18_value = localvalue;
                        }
                        
                        void numberobj_19_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_19_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_19_value = localvalue;
                        }
                        
                        void numberobj_20_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_20_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_20_value = localvalue;
                        }
                        
                        void numberobj_21_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_21_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_21_value = localvalue;
                        }
                        
                        void numberobj_22_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_22_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_22_value = localvalue;
                        }
                        
                        void numberobj_23_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_23_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_23_value = localvalue;
                        }
                        
                        void numberobj_24_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_24_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_24_value = localvalue;
                        }
                        
                        void numberobj_25_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_25_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_25_value = localvalue;
                        }
                        
                        void message_09_init() {
                            this->message_09_set_set({
                                1863.53101,
                                863.53101,
                                363.53101,
                                113.53101,
                                11.46899,
                                73.96899,
                                105.21899,
                                120.84399
                            });
                        }
                        
                        void numberobj_15_init() {
                            this->numberobj_15_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ2l/quantize/number_obj-13"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_15_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_15_value;
                        }
                        
                        void numberobj_15_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_15_value_set(preset["value"]);
                        }
                        
                        void message_10_init() {
                            this->message_10_set_set({2000, 1000, 500, 250, 125, 62.5, 31.25, 15.625});
                        }
                        
                        void numberobj_16_init() {
                            this->numberobj_16_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ2l/quantize/number_obj-39"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_16_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_16_value;
                        }
                        
                        void numberobj_16_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_16_value_set(preset["value"]);
                        }
                        
                        void numberobj_17_init() {
                            this->numberobj_17_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ2l/quantize/number_obj-37"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_17_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_17_value;
                        }
                        
                        void numberobj_17_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_17_value_set(preset["value"]);
                        }
                        
                        void numberobj_18_init() {
                            this->numberobj_18_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ2l/quantize/number_obj-15"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_18_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_18_value;
                        }
                        
                        void numberobj_18_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_18_value_set(preset["value"]);
                        }
                        
                        void numberobj_19_init() {
                            this->numberobj_19_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ2l/quantize/number_obj-17"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_19_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_19_value;
                        }
                        
                        void numberobj_19_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_19_value_set(preset["value"]);
                        }
                        
                        void numberobj_20_init() {
                            this->numberobj_20_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ2l/quantize/number_obj-19"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_20_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_20_value;
                        }
                        
                        void numberobj_20_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_20_value_set(preset["value"]);
                        }
                        
                        void numberobj_21_init() {
                            this->numberobj_21_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ2l/quantize/number_obj-21"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_21_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_21_value;
                        }
                        
                        void numberobj_21_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_21_value_set(preset["value"]);
                        }
                        
                        void numberobj_22_init() {
                            this->numberobj_22_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ2l/quantize/number_obj-23"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_22_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_22_value;
                        }
                        
                        void numberobj_22_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_22_value_set(preset["value"]);
                        }
                        
                        void numberobj_23_init() {
                            this->numberobj_23_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ2l/quantize/number_obj-25"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_23_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_23_value;
                        }
                        
                        void numberobj_23_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_23_value_set(preset["value"]);
                        }
                        
                        void numberobj_24_init() {
                            this->numberobj_24_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ2l/quantize/number_obj-27"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_24_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_24_value;
                        }
                        
                        void numberobj_24_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_24_value_set(preset["value"]);
                        }
                        
                        void numberobj_25_init() {
                            this->numberobj_25_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/circ2l/quantize/number_obj-11"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_25_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_25_value;
                        }
                        
                        void numberobj_25_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_25_value_set(preset["value"]);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            minimum_02_right = 0;
                            minimum_02_out = 0;
                            minimum_02_index = 0;
                            pak_02_in1 = 0;
                            pak_02_in2 = 0;
                            pak_02_in3 = 0;
                            pak_02_in4 = 0;
                            pak_02_in5 = 0;
                            pak_02_in6 = 0;
                            pak_02_in7 = 0;
                            pak_02_in8 = 0;
                            numberobj_15_value = 0;
                            numberobj_15_value_setter(numberobj_15_value);
                            expr_12_in1 = 0;
                            expr_12_in2 = 0;
                            expr_12_out1 = 0;
                            unpack_02_out1 = 0;
                            unpack_02_out2 = 0;
                            unpack_02_out3 = 0;
                            unpack_02_out4 = 0;
                            unpack_02_out5 = 0;
                            unpack_02_out6 = 0;
                            unpack_02_out7 = 0;
                            unpack_02_out8 = 0;
                            numberobj_16_value = 0;
                            numberobj_16_value_setter(numberobj_16_value);
                            numberobj_17_value = 0;
                            numberobj_17_value_setter(numberobj_17_value);
                            numberobj_18_value = 0;
                            numberobj_18_value_setter(numberobj_18_value);
                            expr_13_in1 = 0;
                            expr_13_in2 = 0;
                            expr_13_out1 = 0;
                            numberobj_19_value = 0;
                            numberobj_19_value_setter(numberobj_19_value);
                            expr_14_in1 = 0;
                            expr_14_in2 = 0;
                            expr_14_out1 = 0;
                            numberobj_20_value = 0;
                            numberobj_20_value_setter(numberobj_20_value);
                            expr_15_in1 = 0;
                            expr_15_in2 = 0;
                            expr_15_out1 = 0;
                            numberobj_21_value = 0;
                            numberobj_21_value_setter(numberobj_21_value);
                            expr_16_in1 = 0;
                            expr_16_in2 = 0;
                            expr_16_out1 = 0;
                            numberobj_22_value = 0;
                            numberobj_22_value_setter(numberobj_22_value);
                            expr_17_in1 = 0;
                            expr_17_in2 = 0;
                            expr_17_out1 = 0;
                            numberobj_23_value = 0;
                            numberobj_23_value_setter(numberobj_23_value);
                            expr_18_in1 = 0;
                            expr_18_in2 = 0;
                            expr_18_out1 = 0;
                            numberobj_24_value = 0;
                            numberobj_24_value_setter(numberobj_24_value);
                            expr_19_in1 = 0;
                            expr_19_in2 = 0;
                            expr_19_out1 = 0;
                            numberobj_25_value = 0;
                            numberobj_25_value_setter(numberobj_25_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_15_currentFormat = 6;
                            numberobj_15_lastValue = 0;
                            numberobj_16_currentFormat = 6;
                            numberobj_16_lastValue = 0;
                            numberobj_17_currentFormat = 6;
                            numberobj_17_lastValue = 0;
                            numberobj_18_currentFormat = 6;
                            numberobj_18_lastValue = 0;
                            numberobj_19_currentFormat = 6;
                            numberobj_19_lastValue = 0;
                            numberobj_20_currentFormat = 6;
                            numberobj_20_lastValue = 0;
                            numberobj_21_currentFormat = 6;
                            numberobj_21_lastValue = 0;
                            numberobj_22_currentFormat = 6;
                            numberobj_22_lastValue = 0;
                            numberobj_23_currentFormat = 6;
                            numberobj_23_lastValue = 0;
                            numberobj_24_currentFormat = 6;
                            numberobj_24_lastValue = 0;
                            numberobj_25_currentFormat = 6;
                            numberobj_25_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            list minimum_02_input;
                            number minimum_02_right;
                            number minimum_02_out;
                            number minimum_02_index;
                            list message_09_set;
                            number pak_02_in1;
                            number pak_02_in2;
                            number pak_02_in3;
                            number pak_02_in4;
                            number pak_02_in5;
                            number pak_02_in6;
                            number pak_02_in7;
                            number pak_02_in8;
                            number numberobj_15_value;
                            number expr_12_in1;
                            number expr_12_in2;
                            number expr_12_out1;
                            number unpack_02_out1;
                            number unpack_02_out2;
                            number unpack_02_out3;
                            number unpack_02_out4;
                            number unpack_02_out5;
                            number unpack_02_out6;
                            number unpack_02_out7;
                            number unpack_02_out8;
                            list message_10_set;
                            number numberobj_16_value;
                            number numberobj_17_value;
                            list listlookup_02_input;
                            list listlookup_02_lookup;
                            number numberobj_18_value;
                            number expr_13_in1;
                            number expr_13_in2;
                            number expr_13_out1;
                            number numberobj_19_value;
                            number expr_14_in1;
                            number expr_14_in2;
                            number expr_14_out1;
                            number numberobj_20_value;
                            number expr_15_in1;
                            number expr_15_in2;
                            number expr_15_out1;
                            number numberobj_21_value;
                            number expr_16_in1;
                            number expr_16_in2;
                            number expr_16_out1;
                            number numberobj_22_value;
                            number expr_17_in1;
                            number expr_17_in2;
                            number expr_17_out1;
                            number numberobj_23_value;
                            number expr_18_in1;
                            number expr_18_in2;
                            number expr_18_out1;
                            number numberobj_24_value;
                            number expr_19_in1;
                            number expr_19_in2;
                            number expr_19_out1;
                            number numberobj_25_value;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Int numberobj_15_currentFormat;
                            number numberobj_15_lastValue;
                            Int numberobj_16_currentFormat;
                            number numberobj_16_lastValue;
                            Int numberobj_17_currentFormat;
                            number numberobj_17_lastValue;
                            Int numberobj_18_currentFormat;
                            number numberobj_18_lastValue;
                            Int numberobj_19_currentFormat;
                            number numberobj_19_lastValue;
                            Int numberobj_20_currentFormat;
                            number numberobj_20_lastValue;
                            Int numberobj_21_currentFormat;
                            number numberobj_21_lastValue;
                            Int numberobj_22_currentFormat;
                            number numberobj_22_lastValue;
                            Int numberobj_23_currentFormat;
                            number numberobj_23_lastValue;
                            Int numberobj_24_currentFormat;
                            number numberobj_24_lastValue;
                            Int numberobj_25_currentFormat;
                            number numberobj_25_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_22()
            {
            }
            
            ~RNBOSubpatcher_22()
            {
                delete this->p_02;
            }
            
            virtual RNBOSubpatcher_29* getPatcher() const {
                return static_cast<RNBOSubpatcher_29 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, 892732297, false);
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number minimum(number x, number y) {
                return (y < x ? y : x);
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return globalrandom() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out2 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
            
                this->groove_02_perform(
                    this->groove_02_rate_auto,
                    this->groove_02_begin,
                    this->groove_02_end,
                    out2,
                    this->dummyBuffer,
                    n
                );
            
                this->p_02_perform(n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->groove_02_dspsetup(forceDSPSetup);
                this->p_02->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_02 = new RNBOSubpatcher_17();
                this->p_02->setEngineAndPatcher(this->getEngine(), this);
                this->p_02->initialize();
                this->p_02->setParameterOffset(this->getParameterOffset(this->p_02));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_02->getPreset(getSubState(getSubState(preset, "__sps"), "quantize"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_02->getNumParameters())
                        this->p_02->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_02->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_02->getNumParameters())
                            this->p_02->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_02)
                    return 0;
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case 892732297:
                    {
                    this->loadmess_02_startupbang_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/circ2l/message_obj-22") == objectId)
                        this->message_11_listin_number_set(payload);
            
                    if (TAG("STUTTER/circ2l/message_obj-20") == objectId)
                        this->message_12_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("STUTTER/circ2l/number_obj-57") == objectId)
                        this->numberobj_26_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("STUTTER/circ2l/number_obj-57") == objectId)
                        this->numberobj_26_format_set(payload);
            
                    break;
                    }
                }
            
                this->p_02->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/circ2l/message_obj-22") == objectId)
                        this->message_11_listin_list_set(payload);
            
                    if (TAG("STUTTER/circ2l/message_obj-20") == objectId)
                        this->message_12_listin_list_set(payload);
            
                    break;
                    }
                }
            
                this->p_02->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("bangin"):
                    {
                    if (TAG("STUTTER/circ2l/button_obj-13") == objectId)
                        this->button_03_bangin_bang();
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/circ2l/message_obj-22") == objectId)
                        this->message_11_listin_bang_bang();
            
                    if (TAG("STUTTER/circ2l/message_obj-20") == objectId)
                        this->message_12_listin_bang_bang();
            
                    break;
                    }
                case TAG("startupbang"):
                    {
                    if (TAG("STUTTER/circ2l/loadmess_obj-7") == objectId)
                        this->loadmess_02_startupbang_bang();
            
                    break;
                    }
                }
            
                this->p_02->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("STUTTER/circ2l/button_obj-13"):
                    {
                    return "STUTTER/circ2l/button_obj-13";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("STUTTER/circ2l/message_obj-22"):
                    {
                    return "STUTTER/circ2l/message_obj-22";
                    }
                case TAG("STUTTER/circ2l/message_obj-20"):
                    {
                    return "STUTTER/circ2l/message_obj-20";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("STUTTER/circ2l/number_obj-57"):
                    {
                    return "STUTTER/circ2l/number_obj-57";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("startupbang"):
                    {
                    return "startupbang";
                    }
                case TAG("STUTTER/circ2l/loadmess_obj-7"):
                    {
                    return "STUTTER/circ2l/loadmess_obj-7";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                auto subpatchResult_0 = this->p_02->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->groove_02_buffer = new Float32Buffer(this->getPatcher()->getPatcher()->buff1);
                }
            
                this->p_02->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->groove_02_buffer = new Float32Buffer(this->getPatcher()->getPatcher()->buff1);
            }
            
            protected:
            
            void button_03_bangin_bang() {
                this->button_03_bangval_bang();
            }
            
            void eventinlet_11_out1_number_set(number v) {
                RNBO_UNUSED(v);
                this->button_03_bangval_bang();
            }
            
            void eventinlet_11_out1_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->button_03_bangval_bang();
            }
            
            void message_11_listin_list_set(const list& v) {
                this->message_11_set_set(v);
            }
            
            void message_11_listin_number_set(number v) {
                this->message_11_set_set(v);
            }
            
            void message_11_listin_bang_bang() {
                this->message_11_trigger_bang();
            }
            
            void message_12_listin_list_set(const list& v) {
                this->message_12_set_set(v);
            }
            
            void message_12_listin_number_set(number v) {
                this->message_12_set_set(v);
            }
            
            void message_12_listin_bang_bang() {
                this->message_12_trigger_bang();
            }
            
            void eventinlet_12_out1_bang_bang() {
                this->scale_02_outlow_bang();
            }
            
            void eventinlet_12_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_02_outlow_set(converted);
                }
            }
            
            void eventinlet_13_out1_bang_bang() {
                this->scale_02_outhigh_bang();
            }
            
            void eventinlet_13_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_02_outhigh_set(converted);
                }
            }
            
            void loadmess_02_startupbang_bang() {
                this->loadmess_02_message_bang();
            }
            
            void numberobj_26_valin_set(number v) {
                this->numberobj_26_value_set(v);
            }
            
            void numberobj_26_format_set(number v) {
                this->numberobj_26_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_14_out1_bang_bang() {
                this->p_02_in1_bang_bang();
            }
            
            void eventinlet_14_out1_number_set(number v) {
                this->p_02_in1_number_set(v);
            }
            
            void eventinlet_15_out1_bang_bang() {
                this->switchobj_02_onoff_bang();
            }
            
            void eventinlet_15_out1_number_set(number v) {
                this->switchobj_02_onoff_set(v);
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->message_11_init();
                this->message_12_init();
                this->random_03_nz_init();
                this->numberobj_26_init();
                this->p_02->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_02->startup();
                this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
            }
            
            void allocateDataRefs() {
                this->p_02->allocateDataRefs();
                this->groove_02_buffer = this->groove_02_buffer->allocateIfNeeded();
            }
            
            void message_12_set_set(const list& v) {
                this->message_12_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/circ2l/message_obj-20"),
                    v,
                    this->_currentTime
                );
            }
            
            void expr_21_out1_set(number v) {
                this->expr_21_out1 = v;
            
                {
                    list converted = {this->expr_21_out1};
                    this->message_12_set_set(converted);
                }
            }
            
            void expr_21_in1_set(number in1) {
                this->expr_21_in1 = in1;
                this->expr_21_out1_set(this->expr_21_in1 + this->expr_21_in2);//#map:STUTTER/circ2l/+_obj-18:1
            }
            
            void expr_21_in2_set(number v) {
                this->expr_21_in2 = v;
                this->expr_21_in1_set(this->expr_21_in1);
            }
            
            void switchobj_02_out_number_set(number v) {
                this->expr_21_in2_set(v);
            }
            
            void switchobj_02_in2_number_set(number v) {
                if (this->switchobj_02_onoff == 2) {
                    this->switchobj_02_out_number_set(v);
                }
            }
            
            void p_02_out1_number_set(number v) {
                this->switchobj_02_in2_number_set(v);
            }
            
            void p_02_in2_list_set(const list& v) {
                this->p_02->updateTime(this->_currentTime);
                this->p_02->eventinlet_10_out1_list_set(v);
            }
            
            void switchobj_02_out_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_21_in2_set(converted);
                }
            }
            
            void switchobj_02_in1_list_set(const list& v) {
                if (this->switchobj_02_onoff == 1) {
                    this->switchobj_02_out_list_set(v);
                }
            }
            
            void scale_02_out_set(const list& v) {
                this->scale_02_out = jsCreateListCopy(v);
                this->p_02_in2_list_set(v);
                this->switchobj_02_in1_list_set(v);
            }
            
            void scale_02_input_set(const list& v) {
                this->scale_02_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_02_inlow,
                        this->scale_02_inhigh,
                        this->scale_02_outlow,
                        this->scale_02_outhigh,
                        this->scale_02_power
                    ));
                }
            
                this->scale_02_out_set(tmp);
            }
            
            void random_03_result_set(number v) {
                {
                    list converted = {v};
                    this->scale_02_input_set(converted);
                }
            }
            
            void random_03_trigger_bang() {
                this->random_03_result_set(rnbo_abs(this->random_03_nz_next()) * this->random_03_limit);
            }
            
            void trigger_02_out4_bang() {
                this->random_03_trigger_bang();
            }
            
            void groove_02_end_set(number v) {
                this->groove_02_end = v;
            }
            
            void eventoutlet_08_in1_list_set(const list& v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out4_list_set((list)v);
            }
            
            void message_12_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->groove_02_end_set(converted);
                }
            
                this->eventoutlet_08_in1_list_set(v);
            }
            
            void message_12_trigger_bang() {
                this->message_12_out_set(this->message_12_set);
            }
            
            void trigger_02_out3_bang() {
                this->message_12_trigger_bang();
            }
            
            void groove_02_begin_set(number v) {
                this->groove_02_begin = v;
            }
            
            void eventoutlet_07_in1_list_set(const list& v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out3_list_set((list)v);
            }
            
            void message_11_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->groove_02_begin_set(converted);
                }
            
                this->eventoutlet_07_in1_list_set(v);
            }
            
            void message_11_trigger_bang() {
                this->message_11_out_set(this->message_11_set);
            }
            
            void trigger_02_out2_bang() {
                this->message_11_trigger_bang();
            }
            
            void groove_02_rate_bang_bang() {
                this->groove_02_changeIncomingInSamples = this->sampleOffsetIntoNextAudioBuffer + 1;
                this->groove_02_incomingChange = 1;
            }
            
            void trigger_02_out1_bang() {
                this->groove_02_rate_bang_bang();
            }
            
            void trigger_02_input_bang_bang() {
                this->trigger_02_out4_bang();
                this->trigger_02_out3_bang();
                this->trigger_02_out2_bang();
                this->trigger_02_out1_bang();
            }
            
            void eventoutlet_06_in1_bang_bang() {
                ;
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out1_bang_bang();
            }
            
            void button_03_output_bang() {
                this->trigger_02_input_bang_bang();
                this->eventoutlet_06_in1_bang_bang();
            }
            
            void button_03_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("STUTTER/circ2l/button_obj-13"), this->_currentTime);;
                this->button_03_output_bang();
            }
            
            void eventinlet_11_out1_bang_bang() {
                this->button_03_bangval_bang();
            }
            
            void switchobj_02_onoff_set(number v) {
                this->switchobj_02_onoff = v;
            }
            
            void switchobj_02_in1_number_set(number v) {
                if (this->switchobj_02_onoff == 1) {
                    this->switchobj_02_out_number_set(v);
                }
            }
            
            void eventinlet_15_out1_list_set(const list& v) {
                {
                    if (v->length > 2)
                        this->switchobj_02_in2_number_set(v[2]);
            
                    if (v->length > 1)
                        this->switchobj_02_in1_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->switchobj_02_onoff_set(converted);
                }
            }
            
            void p_02_in1_list_set(const list& v) {
                this->p_02->updateTime(this->_currentTime);
                this->p_02->eventinlet_09_out1_list_set(v);
            }
            
            void eventinlet_14_out1_list_set(const list& v) {
                this->p_02_in1_list_set(v);
            }
            
            void scale_02_outlow_set(number v) {
                this->scale_02_outlow = v;
            }
            
            void eventinlet_12_out1_number_set(number v) {
                this->scale_02_outlow_set(v);
            }
            
            void scale_02_outhigh_set(number v) {
                this->scale_02_outhigh = v;
            }
            
            void eventinlet_13_out1_number_set(number v) {
                this->scale_02_outhigh_set(v);
            }
            
            void message_11_set_set(const list& v) {
                this->message_11_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/circ2l/message_obj-22"),
                    v,
                    this->_currentTime
                );
            }
            
            void wrap_02_out1_set(number v) {
                this->expr_21_in1_set(v);
            
                {
                    list converted = {v};
                    this->message_11_set_set(converted);
                }
            }
            
            void wrap_02_x_set(number x) {
                this->wrap_02_x = x;
                auto high = this->wrap_02_high;
                auto low = this->wrap_02_low;
                number lo;
                number hi;
            
                if (low == high) {
                    this->wrap_02_out1_set(low);
                    return;
                }
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi) {
                    this->wrap_02_out1_set(x);
                    return;
                }
            
                if (range <= 0.000000001) {
                    this->wrap_02_out1_set(lo);
                    return;
                }
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi) {
                    this->wrap_02_out1_set(result - range);
                    return;
                } else {
                    this->wrap_02_out1_set(result);
                    return;
                }
            }
            
            void expr_20_out1_set(number v) {
                this->expr_20_out1 = v;
                this->wrap_02_x_set(this->expr_20_out1);
            }
            
            void expr_20_in1_set(number in1) {
                this->expr_20_in1 = in1;
                this->expr_20_out1_set(this->expr_20_in1 - this->expr_20_in2);//#map:STUTTER/circ2l/-_obj-79:1
            }
            
            void receive_06_output_number_set(number v) {
                this->receive_06_output_number = v;
                this->expr_20_in1_set(v);
            }
            
            void scale_02_outlow_bang() {}
            
            void scale_02_outhigh_bang() {}
            
            void groove_02_crossfade_set(number v) {
                this->groove_02_crossfade = v;
                this->groove_02_crossfadeInSamples = this->mstosamps(v);
            }
            
            void numberobj_26_output_set(number v) {
                this->groove_02_crossfade_set(v);
            }
            
            void numberobj_26_value_set(number v) {
                this->numberobj_26_value_setter(v);
                v = this->numberobj_26_value;
                number localvalue = v;
            
                if (this->numberobj_26_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/circ2l/number_obj-57"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_26_output_set(localvalue);
            }
            
            void loadmess_02_message_bang() {
                list v = this->loadmess_02_message;
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_26_value_set(converted);
                }
            }
            
            void p_02_in1_bang_bang() {
                this->p_02->updateTime(this->_currentTime);
                this->p_02->eventinlet_09_out1_bang_bang();
            }
            
            void p_02_in1_number_set(number v) {
                this->p_02->updateTime(this->_currentTime);
                this->p_02->eventinlet_09_out1_number_set(v);
            }
            
            void switchobj_02_onoff_bang() {
                this->switchobj_02_out_number_set(this->switchobj_02_onoff);
            }
            
            void groove_02_perform(
                number rate_auto,
                number begin,
                number end,
                SampleValue * out1,
                SampleValue * sync,
                Index n
            ) {
                RNBO_UNUSED(out1);
                RNBO_UNUSED(rate_auto);
                auto __groove_02_crossfade = this->groove_02_crossfade;
                auto __groove_02_loop = this->groove_02_loop;
                auto __groove_02_playStatus = this->groove_02_playStatus;
                auto __groove_02_readIndex = this->groove_02_readIndex;
                auto __groove_02_incomingChange = this->groove_02_incomingChange;
                auto __groove_02_changeIncomingInSamples = this->groove_02_changeIncomingInSamples;
                auto __groove_02_buffer = this->groove_02_buffer;
                SampleArray<1> out = {out1};
                SampleIndex bufferLength = (SampleIndex)(__groove_02_buffer->getSize());
                Index i = 0;
            
                if (bufferLength > 1) {
                    auto effectiveChannels = this->minimum(__groove_02_buffer->getChannels(), 1);
                    number srMult = 0.001 * __groove_02_buffer->getSampleRate();
                    number srInv = (number)1 / this->samplerate();
                    number rateMult = __groove_02_buffer->getSampleRate() * srInv;
            
                    for (; i < n; i++) {
                        Index channel = 0;
                        number offset = 0;
                        number loopMin = begin * srMult;
                        loopMin = (loopMin > bufferLength - 1 ? bufferLength - 1 : (loopMin < 0 ? 0 : loopMin));
                        number loopMax = (end < 0 ? bufferLength : end * srMult);
                        loopMax = (loopMax > bufferLength ? bufferLength : (loopMax < 0 ? 0 : loopMax));
            
                        if (loopMin >= loopMax) {
                            offset = loopMax;
                            loopMax = bufferLength;
                            loopMin -= offset;
                        }
            
                        number loopLength = loopMax - loopMin;
                        number currentRate = 1 * rateMult;
                        number currentSync = 0;
            
                        if (__groove_02_changeIncomingInSamples > 0) {
                            __groove_02_changeIncomingInSamples--;
            
                            if (__groove_02_changeIncomingInSamples <= 0) {
                                if (__groove_02_incomingChange == 1) {
                                    if (currentRate < 0) {
                                        __groove_02_readIndex = loopMax - 1;
                                    } else {
                                        __groove_02_readIndex = loopMin;
                                    }
            
                                    __groove_02_playStatus = 1;
                                } else if (__groove_02_incomingChange == 0) {
                                    __groove_02_playStatus = 0;
                                }
            
                                __groove_02_incomingChange = 2;
                            }
                        }
            
                        if (loopLength > 0) {
                            if (currentRate != 0) {
                                if (__groove_02_playStatus == 1) {
                                    if ((bool)(__groove_02_loop)) {
                                        while (__groove_02_readIndex < loopMin) {
                                            __groove_02_readIndex += loopLength;
                                        }
            
                                        while (__groove_02_readIndex >= loopMax) {
                                            __groove_02_readIndex -= loopLength;
                                        }
                                    } else if (__groove_02_readIndex >= loopMax || __groove_02_readIndex < loopMin) {
                                        __groove_02_playStatus = 0;
                                        break;
                                    }
            
                                    for (; channel < effectiveChannels; channel++) {
                                        number outSample = (currentRate == 1 ? this->groove_02_getSample((Index)(channel), trunc(__groove_02_readIndex), offset, bufferLength) : this->groove_02_interpolatedSample(
                                            (Index)(channel),
                                            __groove_02_readIndex,
                                            loopMax,
                                            loopLength,
                                            offset,
                                            bufferLength
                                        ));
            
                                        if (__groove_02_crossfade > 0) {
                                            out[(Index)channel][(Index)i] = this->groove_02_crossfadedSample(
                                                outSample,
                                                __groove_02_readIndex,
                                                (Index)(channel),
                                                currentRate,
                                                loopMin,
                                                loopMax,
                                                loopLength,
                                                offset,
                                                bufferLength
                                            );
                                        } else {
                                            out[(Index)channel][(Index)i] = outSample;
                                        }
                                    }
            
                                    __groove_02_readIndex += currentRate;
                                }
                            }
                        }
            
                        for (; channel < 1; channel++) {
                            if (__groove_02_playStatus <= 0)
                                sync[(Index)i] = 0;
            
                            out[(Index)channel][(Index)i] = 0;
                        }
                    }
                }
            
                for (; i < n; i++) {
                    if (__groove_02_playStatus <= 0)
                        sync[(Index)i] = 0;
            
                    for (number channel = 0; channel < 1; channel++) {
                        out[(Index)channel][(Index)i] = 0;
                    }
                }
            
                this->groove_02_changeIncomingInSamples = __groove_02_changeIncomingInSamples;
                this->groove_02_incomingChange = __groove_02_incomingChange;
                this->groove_02_readIndex = __groove_02_readIndex;
                this->groove_02_playStatus = __groove_02_playStatus;
            }
            
            void p_02_perform(Index n) {
                // subpatcher: quantize
                this->p_02->process(nullptr, 0, nullptr, 0, n);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void random_03_limit_setter(number v) {
                if (v >= 0)
                    this->random_03_limit = v;
            }
            
            void numberobj_26_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_26_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_26_value = localvalue;
            }
            
            number groove_02_getSample(
                Index channel,
                SampleIndex index,
                SampleIndex offset,
                SampleIndex bufferLength
            ) {
                if (offset > 0) {
                    index += offset;
            
                    if (index >= bufferLength)
                        index -= bufferLength;
                }
            
                return this->groove_02_buffer->getSample(channel, index);
            }
            
            number groove_02_interpolatedSample(
                Index channel,
                number index,
                SampleIndex end,
                SampleIndex length,
                SampleIndex offset,
                SampleIndex bufferLength
            ) {
                SampleIndex index1 = (SampleIndex)(trunc(index));
                number i_x = index - index1;
                number i_1px = 1. + i_x;
                number i_1mx = 1. - i_x;
                number i_2mx = 2. - i_x;
                number i_a = i_1mx * i_2mx;
                number i_b = i_1px * i_x;
                number i_p1 = -.1666667 * i_a * i_x;
                number i_p2 = .5 * i_1px * i_a;
                number i_p3 = .5 * i_b * i_2mx;
                number i_p4 = -.1666667 * i_b * i_1mx;
                SampleIndex index2 = (SampleIndex)(index1 + 1);
            
                if (index2 >= end)
                    index2 -= length;
            
                SampleIndex index3 = (SampleIndex)(index1 + 2);
            
                if (index3 >= end)
                    index3 -= length;
            
                SampleIndex index4 = (SampleIndex)(index1 + 3);
            
                if (index4 >= end)
                    index4 -= length;
            
                return this->groove_02_getSample(channel, index1, offset, bufferLength) * i_p1 + this->groove_02_getSample(channel, index2, offset, bufferLength) * i_p2 + this->groove_02_getSample(channel, index3, offset, bufferLength) * i_p3 + this->groove_02_getSample(channel, index4, offset, bufferLength) * i_p4;
            }
            
            number groove_02_crossfadedSample(
                SampleValue out,
                number readIndex,
                Index channel,
                number rate,
                number loopMin,
                number loopMax,
                number loopLength,
                number offset,
                number bufferLength
            ) {
                auto crossFadeStart1 = this->maximum(loopMin - this->groove_02_crossfadeInSamples, 0);
                auto crossFadeEnd1 = this->minimum(crossFadeStart1 + this->groove_02_crossfadeInSamples, bufferLength);
                number crossFadeStart2 = crossFadeStart1 + loopLength;
                auto crossFadeEnd2 = this->minimum(crossFadeEnd1 + loopLength, bufferLength);
                number crossFadeLength = crossFadeEnd2 - crossFadeStart2;
            
                if (crossFadeLength > 0) {
                    crossFadeEnd1 = crossFadeStart1 + crossFadeLength;
                    number diff = -1;
                    number addFactor = 0;
            
                    if (readIndex >= crossFadeStart2) {
                        diff = readIndex - crossFadeStart2;
                        addFactor = -1;
                    } else if (readIndex < crossFadeEnd1) {
                        diff = crossFadeEnd1 - readIndex + loopMax - crossFadeStart2;
                        addFactor = 1;
                    }
            
                    if (diff >= 0) {
                        number out2ReadIndex = readIndex + loopLength * addFactor;
                        number out2 = (rate == 1 ? this->groove_02_getSample(channel, trunc(out2ReadIndex), offset, bufferLength) : this->groove_02_interpolatedSample(channel, out2ReadIndex, loopMax, loopLength, offset, bufferLength));
                        number out2Factor = diff / crossFadeLength;
                        number out1Factor = 1 - out2Factor;
                        return out * out1Factor + out2 * out2Factor;
                    }
                }
            
                return out;
            }
            
            void groove_02_dspsetup(bool force) {
                if ((bool)(this->groove_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->groove_02_crossfadeInSamples = this->mstosamps(this->groove_02_crossfade);
                this->groove_02_setupDone = true;
            }
            
            void message_11_init() {
                this->message_11_set_set({6032.6875});
            }
            
            void message_12_init() {
                this->message_12_set_set({6169.15649});
            }
            
            void random_03_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_03_nz_state
                );
            }
            
            void random_03_nz_init() {
                this->random_03_nz_reset();
            }
            
            void random_03_nz_seed(number v) {
                xoshiro_reset(v, this->random_03_nz_state);
            }
            
            number random_03_nz_next() {
                return xoshiro_next(this->random_03_nz_state);
            }
            
            void numberobj_26_init() {
                this->numberobj_26_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/circ2l/number_obj-57"), 1, this->_currentTime);
            }
            
            void numberobj_26_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_26_value;
            }
            
            void numberobj_26_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_26_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                groove_02_rate_auto = 1;
                groove_02_begin = 0;
                groove_02_end = -1;
                groove_02_loop = 1;
                groove_02_crossfade = 0;
                wrap_02_x = 0;
                wrap_02_low = 0;
                wrap_02_high = 30000;
                expr_20_in1 = 0;
                expr_20_in2 = 10;
                expr_20_out1 = 0;
                receive_06_output_number = 0;
                scale_02_inlow = 0;
                scale_02_inhigh = 4999;
                scale_02_outlow = 0;
                scale_02_outhigh = 1;
                scale_02_power = 1;
                random_03_limit = 5000;
                random_03_limit_setter(random_03_limit);
                random_03_seed = 0;
                expr_21_in1 = 0;
                expr_21_in2 = 0;
                expr_21_out1 = 0;
                loadmess_02_message = { 3 };
                numberobj_26_value = 0;
                numberobj_26_value_setter(numberobj_26_value);
                switchobj_02_onoff = 0;
                p_02_target = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                groove_02_readIndex = 0;
                groove_02_playStatus = 0;
                groove_02_changeIncomingInSamples = 0;
                groove_02_incomingChange = 2;
                groove_02_crossfadeInSamples = 0;
                groove_02_setupDone = false;
                numberobj_26_currentFormat = 6;
                numberobj_26_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number groove_02_rate_auto;
                number groove_02_begin;
                number groove_02_end;
                number groove_02_loop;
                number groove_02_crossfade;
                list message_11_set;
                number wrap_02_x;
                number wrap_02_low;
                number wrap_02_high;
                number expr_20_in1;
                number expr_20_in2;
                number expr_20_out1;
                number receive_06_output_number;
                list receive_06_output_list;
                list message_12_set;
                list scale_02_input;
                number scale_02_inlow;
                number scale_02_inhigh;
                number scale_02_outlow;
                number scale_02_outhigh;
                number scale_02_power;
                list scale_02_out;
                number random_03_limit;
                number random_03_seed;
                number expr_21_in1;
                number expr_21_in2;
                number expr_21_out1;
                list loadmess_02_message;
                number numberobj_26_value;
                number switchobj_02_onoff;
                number p_02_target;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float32BufferRef groove_02_buffer;
                number groove_02_readIndex;
                Index groove_02_playStatus;
                SampleIndex groove_02_changeIncomingInSamples;
                Int groove_02_incomingChange;
                SampleIndex groove_02_crossfadeInSamples;
                bool groove_02_setupDone;
                UInt random_03_nz_state[4] = { };
                Int numberobj_26_currentFormat;
                number numberobj_26_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_17* p_02;
            
    };
    
    class RNBOSubpatcher_23 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_29;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_23()
            {
            }
            
            ~RNBOSubpatcher_23()
            {
            }
            
            virtual RNBOSubpatcher_29* getPatcher() const {
                return static_cast<RNBOSubpatcher_29 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, 1329140575, false);
                getEngine()->flushClockEvents(this, -62043057, false);
            }
            
            SampleIndex currentsampletime() {
                return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return globalrandom() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                this->linetilde_02_perform(out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case 1329140575:
                    {
                    this->pipe_02_out1_set(value);
                    break;
                    }
                case -62043057:
                    {
                    this->linetilde_02_target_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/likelihood/message_obj-10") == objectId)
                        this->message_13_listin_number_set(payload);
            
                    if (TAG("STUTTER/likelihood/message_obj-12") == objectId)
                        this->message_14_listin_number_set(payload);
            
                    if (TAG("STUTTER/likelihood/message_obj-18") == objectId)
                        this->message_15_listin_number_set(payload);
            
                    if (TAG("STUTTER/likelihood/message_obj-20") == objectId)
                        this->message_16_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("STUTTER/likelihood/number_obj-6") == objectId)
                        this->numberobj_27_valin_set(payload);
            
                    if (TAG("STUTTER/likelihood/number_obj-2") == objectId)
                        this->numberobj_28_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("STUTTER/likelihood/number_obj-6") == objectId)
                        this->numberobj_27_format_set(payload);
            
                    if (TAG("STUTTER/likelihood/number_obj-2") == objectId)
                        this->numberobj_28_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/likelihood/message_obj-10") == objectId)
                        this->message_13_listin_list_set(payload);
            
                    if (TAG("STUTTER/likelihood/message_obj-12") == objectId)
                        this->message_14_listin_list_set(payload);
            
                    if (TAG("STUTTER/likelihood/message_obj-18") == objectId)
                        this->message_15_listin_list_set(payload);
            
                    if (TAG("STUTTER/likelihood/message_obj-20") == objectId)
                        this->message_16_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/likelihood/message_obj-10") == objectId)
                        this->message_13_listin_bang_bang();
            
                    if (TAG("STUTTER/likelihood/message_obj-12") == objectId)
                        this->message_14_listin_bang_bang();
            
                    if (TAG("STUTTER/likelihood/message_obj-18") == objectId)
                        this->message_15_listin_bang_bang();
            
                    if (TAG("STUTTER/likelihood/message_obj-20") == objectId)
                        this->message_16_listin_bang_bang();
            
                    break;
                    }
                case TAG("bangin"):
                    {
                    if (TAG("STUTTER/likelihood/button_obj-56") == objectId)
                        this->button_04_bangin_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("STUTTER/likelihood/message_obj-10"):
                    {
                    return "STUTTER/likelihood/message_obj-10";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("STUTTER/likelihood/number_obj-6"):
                    {
                    return "STUTTER/likelihood/number_obj-6";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("STUTTER/likelihood/button_obj-56"):
                    {
                    return "STUTTER/likelihood/button_obj-56";
                    }
                case TAG("STUTTER/likelihood/message_obj-12"):
                    {
                    return "STUTTER/likelihood/message_obj-12";
                    }
                case TAG("STUTTER/likelihood/number_obj-2"):
                    {
                    return "STUTTER/likelihood/number_obj-2";
                    }
                case TAG("STUTTER/likelihood/message_obj-18"):
                    {
                    return "STUTTER/likelihood/message_obj-18";
                    }
                case TAG("STUTTER/likelihood/message_obj-20"):
                    {
                    return "STUTTER/likelihood/message_obj-20";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void pipe_02_out1_set(number v) {
                {
                    list converted = {v};
                    this->linetilde_02_segments_set(converted);
                }
            }
            
            void message_13_listin_list_set(const list& v) {
                this->message_13_set_set(v);
            }
            
            void message_13_listin_number_set(number v) {
                this->message_13_set_set(v);
            }
            
            void message_13_listin_bang_bang() {
                this->message_13_trigger_bang();
            }
            
            void numberobj_27_valin_set(number v) {
                this->numberobj_27_value_set(v);
            }
            
            void numberobj_27_format_set(number v) {
                this->numberobj_27_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void button_04_bangin_bang() {
                this->button_04_bangval_bang();
            }
            
            void eventinlet_16_out1_number_set(number v) {
                this->gate_03_input_number_set(v);
            }
            
            void eventinlet_16_out1_list_set(const list& v) {
                this->gate_03_input_list_set(v);
            }
            
            void message_14_listin_list_set(const list& v) {
                this->message_14_set_set(v);
            }
            
            void message_14_listin_number_set(number v) {
                this->message_14_set_set(v);
            }
            
            void message_14_listin_bang_bang() {
                this->message_14_trigger_bang();
            }
            
            void numberobj_28_valin_set(number v) {
                this->numberobj_28_value_set(v);
            }
            
            void numberobj_28_format_set(number v) {
                this->numberobj_28_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_15_listin_list_set(const list& v) {
                this->message_15_set_set(v);
            }
            
            void message_15_listin_number_set(number v) {
                this->message_15_set_set(v);
            }
            
            void message_15_listin_bang_bang() {
                this->message_15_trigger_bang();
            }
            
            void message_16_listin_list_set(const list& v) {
                this->message_16_set_set(v);
            }
            
            void message_16_listin_number_set(number v) {
                this->message_16_set_set(v);
            }
            
            void message_16_listin_bang_bang() {
                this->message_16_trigger_bang();
            }
            
            void linetilde_02_target_bang() {}
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->message_13_init();
                this->numberobj_27_init();
                this->random_04_nz_init();
                this->message_14_init();
                this->numberobj_28_init();
                this->message_15_init();
                this->message_16_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void gate_04_onoff_set(number v) {
                this->gate_04_onoff = v;
            }
            
            void gate_03_onoff_set(number v) {
                this->gate_03_onoff = v;
            }
            
            void pipe_02_in1_set(number v) {
                this->pipe_02_in1 = v;
            
                this->getEngine()->scheduleClockEventWithValue(
                    this,
                    1329140575,
                    this->pipe_02_time + this->_currentTime,
                    this->pipe_02_in1
                );;
            }
            
            void pipe_02_time_set(number v) {
                this->pipe_02_time = v;
            }
            
            void message_14_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->pipe_02_time_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pipe_02_in1_set(converted);
                }
            }
            
            void message_14_trigger_bang() {
                this->message_14_out_set(this->message_14_set);
            }
            
            void select_07_match1_bang() {
                this->message_14_trigger_bang();
            }
            
            void message_13_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->pipe_02_time_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pipe_02_in1_set(converted);
                }
            }
            
            void message_13_trigger_bang() {
                this->message_13_out_set(this->message_13_set);
            }
            
            void select_07_match2_bang() {
                this->message_13_trigger_bang();
            }
            
            void select_07_nomatch_number_set(number ) {}
            
            void select_07_input_number_set(number v) {
                if (v == this->select_07_test1)
                    this->select_07_match1_bang();
                else if (v == this->select_07_test2)
                    this->select_07_match2_bang();
                else
                    this->select_07_nomatch_number_set(v);
            }
            
            void gate_04_out1_number_set(number v) {
                this->gate_04_out1_number = v;
                this->select_07_input_number_set(v);
            }
            
            void gate_04_out2_number_set(number v) {
                this->gate_04_out2_number = v;
            }
            
            void gate_04_input_number_set(number v) {
                if (this->gate_04_onoff == 1)
                    this->gate_04_out1_number_set(v);
                else if (this->gate_04_onoff == 2)
                    this->gate_04_out2_number_set(v);
            }
            
            void gate_03_out1_number_set(number v) {
                this->gate_03_out1_number = v;
            }
            
            void select_05_match1_bang() {
                this->message_13_trigger_bang();
            }
            
            void select_05_match2_bang() {
                this->message_14_trigger_bang();
            }
            
            void select_05_nomatch_number_set(number ) {}
            
            void select_05_input_number_set(number v) {
                if (v == this->select_05_test1)
                    this->select_05_match1_bang();
                else if (v == this->select_05_test2)
                    this->select_05_match2_bang();
                else
                    this->select_05_nomatch_number_set(v);
            }
            
            void expr_22_out1_set(number v) {
                this->expr_22_out1 = v;
                this->select_05_input_number_set(this->expr_22_out1);
            }
            
            void expr_22_in1_set(number in1) {
                this->expr_22_in1 = in1;
                this->expr_22_out1_set(this->expr_22_in1 >= this->expr_22_in2);//#map:STUTTER/likelihood/>=_obj-4:1
            }
            
            void numberobj_27_output_set(number v) {
                this->expr_22_in1_set(v);
            }
            
            void numberobj_27_value_set(number v) {
                this->numberobj_27_value_setter(v);
                v = this->numberobj_27_value;
                number localvalue = v;
            
                if (this->numberobj_27_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/likelihood/number_obj-6"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_27_output_set(localvalue);
            }
            
            void random_04_result_set(number v) {
                this->numberobj_27_value_set(v);
            }
            
            void random_04_trigger_bang() {
                this->random_04_result_set(rnbo_abs(this->random_04_nz_next()) * this->random_04_limit);
            }
            
            void button_04_output_bang() {
                this->random_04_trigger_bang();
            }
            
            void button_04_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("STUTTER/likelihood/button_obj-56"),
                    this->_currentTime
                );;
            
                this->button_04_output_bang();
            }
            
            void gate_03_out2_number_set(number v) {
                this->gate_03_out2_number = v;
                this->button_04_bangval_bang();
            }
            
            void gate_03_input_number_set(number v) {
                if (this->gate_03_onoff == 1)
                    this->gate_03_out1_number_set(v);
                else if (this->gate_03_onoff == 2)
                    this->gate_03_out2_number_set(v);
            }
            
            void message_15_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_04_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_04_onoff_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->gate_03_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_03_onoff_set(converted);
                }
            }
            
            void message_15_trigger_bang() {
                this->message_15_out_set(this->message_15_set);
            }
            
            void select_06_match1_bang() {
                this->message_15_trigger_bang();
                this->message_14_trigger_bang();
            }
            
            void message_16_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_04_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_04_onoff_set(converted);
                }
            
                {
                    if (v->length > 1)
                        this->gate_03_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_03_onoff_set(converted);
                }
            }
            
            void message_16_trigger_bang() {
                this->message_16_out_set(this->message_16_set);
            }
            
            void select_06_match2_bang() {
                this->message_16_trigger_bang();
            }
            
            void select_06_nomatch_number_set(number ) {}
            
            void select_06_input_number_set(number v) {
                if (v == this->select_06_test1)
                    this->select_06_match1_bang();
                else if (v == this->select_06_test2)
                    this->select_06_match2_bang();
                else
                    this->select_06_nomatch_number_set(v);
            }
            
            void receive_08_output_number_set(number v) {
                this->receive_08_output_number = v;
                this->select_06_input_number_set(v);
            }
            
            void gate_03_out1_bang_bang() {}
            
            void gate_03_out2_bang_bang() {
                this->button_04_bangval_bang();
            }
            
            void gate_03_input_bang_bang() {
                if (this->gate_03_onoff == 1)
                    this->gate_03_out1_bang_bang();
                else if (this->gate_03_onoff == 2)
                    this->gate_03_out2_bang_bang();
            }
            
            void eventinlet_16_out1_bang_bang() {
                this->gate_03_input_bang_bang();
            }
            
            void receive_09_output_number_set(number v) {
                this->receive_09_output_number = v;
                this->gate_04_input_number_set(v);
            }
            
            void expr_22_in2_set(number v) {
                this->expr_22_in2 = v;
            }
            
            void numberobj_28_output_set(number v) {
                this->expr_22_in2_set(v);
            }
            
            void numberobj_28_value_set(number v) {
                this->numberobj_28_value_setter(v);
                v = this->numberobj_28_value;
                number localvalue = v;
            
                if (this->numberobj_28_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/likelihood/number_obj-2"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_28_output_set(localvalue);
            }
            
            void receive_07_output_number_set(number v) {
                this->receive_07_output_number = v;
                this->numberobj_28_value_set(v);
            }
            
            void select_08_match1_bang() {
                this->message_14_trigger_bang();
            }
            
            void select_08_nomatch_number_set(number ) {}
            
            void select_08_input_number_set(number v) {
                if (v == this->select_08_test1)
                    this->select_08_match1_bang();
                else
                    this->select_08_nomatch_number_set(v);
            }
            
            void receive_10_output_number_set(number v) {
                this->receive_10_output_number = v;
                this->select_08_input_number_set(v);
            }
            
            void linetilde_02_time_set(number v) {
                this->linetilde_02_time = v;
            }
            
            void linetilde_02_segments_set(const list& v) {
                this->linetilde_02_segments = jsCreateListCopy(v);
            
                if ((bool)(v->length)) {
                    if (v->length == 1 && this->linetilde_02_time == 0) {
                        this->linetilde_02_activeRamps->length = 0;
                        this->linetilde_02_currentValue = v[0];
                    } else {
                        auto currentTime = this->currentsampletime();
                        number lastRampValue = this->linetilde_02_currentValue;
                        number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
            
                        for (Index i = 0; i < this->linetilde_02_activeRamps->length; i += 3) {
                            rampEnd = this->linetilde_02_activeRamps[(Index)(i + 2)];
            
                            if (rampEnd > currentTime) {
                                this->linetilde_02_activeRamps[(Index)(i + 2)] = currentTime;
                                number diff = rampEnd - currentTime;
                                number valueDiff = diff * this->linetilde_02_activeRamps[(Index)(i + 1)];
                                lastRampValue = this->linetilde_02_activeRamps[(Index)i] - valueDiff;
                                this->linetilde_02_activeRamps[(Index)i] = lastRampValue;
                                this->linetilde_02_activeRamps->length = i + 3;
                                rampEnd = currentTime;
                            } else {
                                lastRampValue = this->linetilde_02_activeRamps[(Index)i];
                            }
                        }
            
                        if (rampEnd < currentTime) {
                            this->linetilde_02_activeRamps->push(lastRampValue);
                            this->linetilde_02_activeRamps->push(0);
                            this->linetilde_02_activeRamps->push(currentTime);
                        }
            
                        number lastRampEnd = currentTime;
            
                        for (Index i = 0; i < v->length; i += 2) {
                            number destinationValue = v[(Index)i];
                            number inc = 0;
                            number rampTimeInSamples;
            
                            if (v->length > i + 1) {
                                rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
            
                                if ((bool)(this->linetilde_02_keepramp)) {
                                    this->linetilde_02_time_set(v[(Index)(i + 1)]);
                                }
                            } else {
                                rampTimeInSamples = this->mstosamps(this->linetilde_02_time);
                            }
            
                            if (rampTimeInSamples <= 0) {
                                rampTimeInSamples = 1;
                            }
            
                            inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                            lastRampEnd += rampTimeInSamples;
                            this->linetilde_02_activeRamps->push(destinationValue);
                            this->linetilde_02_activeRamps->push(inc);
                            this->linetilde_02_activeRamps->push(lastRampEnd);
                            lastRampValue = destinationValue;
                        }
                    }
                }
            }
            
            void message_13_set_set(const list& v) {
                this->message_13_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/likelihood/message_obj-10"),
                    v,
                    this->_currentTime
                );
            }
            
            void gate_03_out1_list_set(const list& v) {
                this->gate_03_out1_list = jsCreateListCopy(v);
            }
            
            void gate_03_out2_list_set(const list& v) {
                this->gate_03_out2_list = jsCreateListCopy(v);
                this->button_04_bangval_bang();
            }
            
            void gate_03_input_list_set(const list& v) {
                if (this->gate_03_onoff == 1)
                    this->gate_03_out1_list_set(v);
                else if (this->gate_03_onoff == 2)
                    this->gate_03_out2_list_set(v);
            }
            
            void message_14_set_set(const list& v) {
                this->message_14_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/likelihood/message_obj-12"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_15_set_set(const list& v) {
                this->message_15_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/likelihood/message_obj-18"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_16_set_set(const list& v) {
                this->message_16_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/likelihood/message_obj-20"),
                    v,
                    this->_currentTime
                );
            }
            
            void linetilde_02_perform(SampleValue * out, Index n) {
                auto __linetilde_02_time = this->linetilde_02_time;
                auto __linetilde_02_keepramp = this->linetilde_02_keepramp;
                auto __linetilde_02_currentValue = this->linetilde_02_currentValue;
                Index i = 0;
            
                if ((bool)(this->linetilde_02_activeRamps->length)) {
                    while ((bool)(this->linetilde_02_activeRamps->length) && i < n) {
                        number destinationValue = this->linetilde_02_activeRamps[0];
                        number inc = this->linetilde_02_activeRamps[1];
                        number rampTimeInSamples = this->linetilde_02_activeRamps[2] - this->audioProcessSampleCount - i;
                        number val = __linetilde_02_currentValue;
            
                        while (rampTimeInSamples > 0 && i < n) {
                            out[(Index)i] = val;
                            val += inc;
                            i++;
                            rampTimeInSamples--;
                        }
            
                        if (rampTimeInSamples <= 0) {
                            val = destinationValue;
                            this->linetilde_02_activeRamps->splice(0, 3);
            
                            if ((bool)(!(bool)(this->linetilde_02_activeRamps->length))) {
                                this->getEngine()->scheduleClockEventWithValue(
                                    this,
                                    -62043057,
                                    this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                                    0
                                );;
            
                                if ((bool)(!(bool)(__linetilde_02_keepramp))) {
                                    __linetilde_02_time = 0;
                                }
                            }
                        }
            
                        __linetilde_02_currentValue = val;
                    }
                }
            
                while (i < n) {
                    out[(Index)i] = __linetilde_02_currentValue;
                    i++;
                }
            
                this->linetilde_02_currentValue = __linetilde_02_currentValue;
                this->linetilde_02_time = __linetilde_02_time;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_27_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_27_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_27_value = localvalue;
            }
            
            void random_04_limit_setter(number v) {
                if (v >= 0)
                    this->random_04_limit = v;
            }
            
            void numberobj_28_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_28_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_28_value = localvalue;
            }
            
            void message_13_init() {
                this->message_13_set_set({1});
            }
            
            void numberobj_27_init() {
                this->numberobj_27_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/likelihood/number_obj-6"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_27_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_27_value;
            }
            
            void numberobj_27_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_27_value_set(preset["value"]);
            }
            
            void random_04_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_04_nz_state
                );
            }
            
            void random_04_nz_init() {
                this->random_04_nz_reset();
            }
            
            void random_04_nz_seed(number v) {
                xoshiro_reset(v, this->random_04_nz_state);
            }
            
            number random_04_nz_next() {
                return xoshiro_next(this->random_04_nz_state);
            }
            
            void message_14_init() {
                this->message_14_set_set({0});
            }
            
            void numberobj_28_init() {
                this->numberobj_28_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/likelihood/number_obj-2"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_28_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_28_value;
            }
            
            void numberobj_28_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_28_value_set(preset["value"]);
            }
            
            void message_15_init() {
                this->message_15_set_set({1});
            }
            
            void message_16_init() {
                this->message_16_set_set({2});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gate_03_onoff = 0;
                gate_03_out1_number = 0;
                gate_03_out2_number = 0;
                pipe_02_in1 = 0;
                pipe_02_time = 15;
                linetilde_02_time = 15;
                linetilde_02_keepramp = 1;
                select_05_test1 = 0;
                select_05_test2 = 1;
                numberobj_27_value = 0;
                numberobj_27_value_setter(numberobj_27_value);
                expr_22_in1 = 0;
                expr_22_in2 = 0;
                expr_22_out1 = 0;
                random_04_limit = 101;
                random_04_limit_setter(random_04_limit);
                random_04_seed = 0;
                numberobj_28_value = 0;
                numberobj_28_value_setter(numberobj_28_value);
                receive_07_output_number = 0;
                select_06_test1 = 0;
                select_06_test2 = 1;
                receive_08_output_number = 0;
                gate_04_onoff = 0;
                gate_04_out1_number = 0;
                gate_04_out2_number = 0;
                select_07_test1 = 0;
                select_07_test2 = 1;
                receive_09_output_number = 0;
                select_08_test1 = 0;
                receive_10_output_number = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                linetilde_02_currentValue = 0;
                numberobj_27_currentFormat = 6;
                numberobj_27_lastValue = 0;
                numberobj_28_currentFormat = 6;
                numberobj_28_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gate_03_onoff;
                number gate_03_out1_number;
                list gate_03_out1_list;
                number gate_03_out2_number;
                list gate_03_out2_list;
                number pipe_02_in1;
                number pipe_02_time;
                list linetilde_02_segments;
                number linetilde_02_time;
                number linetilde_02_keepramp;
                list message_13_set;
                number select_05_test1;
                number select_05_test2;
                number numberobj_27_value;
                number expr_22_in1;
                number expr_22_in2;
                number expr_22_out1;
                number random_04_limit;
                number random_04_seed;
                list message_14_set;
                number numberobj_28_value;
                number receive_07_output_number;
                list receive_07_output_list;
                list message_15_set;
                number select_06_test1;
                number select_06_test2;
                number receive_08_output_number;
                list receive_08_output_list;
                list message_16_set;
                number gate_04_onoff;
                number gate_04_out1_number;
                list gate_04_out1_list;
                number gate_04_out2_number;
                list gate_04_out2_list;
                number select_07_test1;
                number select_07_test2;
                number receive_09_output_number;
                list receive_09_output_list;
                number select_08_test1;
                number receive_10_output_number;
                list receive_10_output_list;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                list linetilde_02_activeRamps;
                number linetilde_02_currentValue;
                Int numberobj_27_currentFormat;
                number numberobj_27_lastValue;
                UInt random_04_nz_state[4] = { };
                Int numberobj_28_currentFormat;
                number numberobj_28_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_24 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_29;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_18 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_24;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_18()
                        {
                        }
                        
                        ~RNBOSubpatcher_18()
                        {
                        }
                        
                        virtual RNBOSubpatcher_24* getPatcher() const {
                            return static_cast<RNBOSubpatcher_24 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("STUTTER/cric1r/quantize/message_obj-30") == objectId)
                                    this->message_17_listin_number_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/message_obj-138") == objectId)
                                    this->message_18_listin_number_set(payload);
                        
                                break;
                                }
                            case TAG("valin"):
                                {
                                if (TAG("STUTTER/cric1r/quantize/number_obj-13") == objectId)
                                    this->numberobj_29_valin_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-39") == objectId)
                                    this->numberobj_30_valin_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-37") == objectId)
                                    this->numberobj_31_valin_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-15") == objectId)
                                    this->numberobj_32_valin_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-17") == objectId)
                                    this->numberobj_33_valin_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-19") == objectId)
                                    this->numberobj_34_valin_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-21") == objectId)
                                    this->numberobj_35_valin_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-23") == objectId)
                                    this->numberobj_36_valin_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-25") == objectId)
                                    this->numberobj_37_valin_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-27") == objectId)
                                    this->numberobj_38_valin_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-11") == objectId)
                                    this->numberobj_39_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("STUTTER/cric1r/quantize/number_obj-13") == objectId)
                                    this->numberobj_29_format_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-39") == objectId)
                                    this->numberobj_30_format_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-37") == objectId)
                                    this->numberobj_31_format_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-15") == objectId)
                                    this->numberobj_32_format_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-17") == objectId)
                                    this->numberobj_33_format_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-19") == objectId)
                                    this->numberobj_34_format_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-21") == objectId)
                                    this->numberobj_35_format_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-23") == objectId)
                                    this->numberobj_36_format_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-25") == objectId)
                                    this->numberobj_37_format_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-27") == objectId)
                                    this->numberobj_38_format_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/number_obj-11") == objectId)
                                    this->numberobj_39_format_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("STUTTER/cric1r/quantize/message_obj-30") == objectId)
                                    this->message_17_listin_list_set(payload);
                        
                                if (TAG("STUTTER/cric1r/quantize/message_obj-138") == objectId)
                                    this->message_18_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("STUTTER/cric1r/quantize/message_obj-30") == objectId)
                                    this->message_17_listin_bang_bang();
                        
                                if (TAG("STUTTER/cric1r/quantize/message_obj-138") == objectId)
                                    this->message_18_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("STUTTER/cric1r/quantize/message_obj-30"):
                                {
                                return "STUTTER/cric1r/quantize/message_obj-30";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("STUTTER/cric1r/quantize/number_obj-13"):
                                {
                                return "STUTTER/cric1r/quantize/number_obj-13";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("STUTTER/cric1r/quantize/message_obj-138"):
                                {
                                return "STUTTER/cric1r/quantize/message_obj-138";
                                }
                            case TAG("STUTTER/cric1r/quantize/number_obj-39"):
                                {
                                return "STUTTER/cric1r/quantize/number_obj-39";
                                }
                            case TAG("STUTTER/cric1r/quantize/number_obj-37"):
                                {
                                return "STUTTER/cric1r/quantize/number_obj-37";
                                }
                            case TAG("STUTTER/cric1r/quantize/number_obj-15"):
                                {
                                return "STUTTER/cric1r/quantize/number_obj-15";
                                }
                            case TAG("STUTTER/cric1r/quantize/number_obj-17"):
                                {
                                return "STUTTER/cric1r/quantize/number_obj-17";
                                }
                            case TAG("STUTTER/cric1r/quantize/number_obj-19"):
                                {
                                return "STUTTER/cric1r/quantize/number_obj-19";
                                }
                            case TAG("STUTTER/cric1r/quantize/number_obj-21"):
                                {
                                return "STUTTER/cric1r/quantize/number_obj-21";
                                }
                            case TAG("STUTTER/cric1r/quantize/number_obj-23"):
                                {
                                return "STUTTER/cric1r/quantize/number_obj-23";
                                }
                            case TAG("STUTTER/cric1r/quantize/number_obj-25"):
                                {
                                return "STUTTER/cric1r/quantize/number_obj-25";
                                }
                            case TAG("STUTTER/cric1r/quantize/number_obj-27"):
                                {
                                return "STUTTER/cric1r/quantize/number_obj-27";
                                }
                            case TAG("STUTTER/cric1r/quantize/number_obj-11"):
                                {
                                return "STUTTER/cric1r/quantize/number_obj-11";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void message_17_listin_list_set(const list& v) {
                            this->message_17_set_set(v);
                        }
                        
                        void message_17_listin_number_set(number v) {
                            this->message_17_set_set(v);
                        }
                        
                        void message_17_listin_bang_bang() {
                            this->message_17_trigger_bang();
                        }
                        
                        void numberobj_29_valin_set(number v) {
                            this->numberobj_29_value_set(v);
                        }
                        
                        void numberobj_29_format_set(number v) {
                            this->numberobj_29_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_18_listin_list_set(const list& v) {
                            this->message_18_set_set(v);
                        }
                        
                        void message_18_listin_number_set(number v) {
                            this->message_18_set_set(v);
                        }
                        
                        void message_18_listin_bang_bang() {
                            this->message_18_trigger_bang();
                        }
                        
                        void numberobj_30_valin_set(number v) {
                            this->numberobj_30_value_set(v);
                        }
                        
                        void numberobj_30_format_set(number v) {
                            this->numberobj_30_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_31_valin_set(number v) {
                            this->numberobj_31_value_set(v);
                        }
                        
                        void numberobj_31_format_set(number v) {
                            this->numberobj_31_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_32_valin_set(number v) {
                            this->numberobj_32_value_set(v);
                        }
                        
                        void numberobj_32_format_set(number v) {
                            this->numberobj_32_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_33_valin_set(number v) {
                            this->numberobj_33_value_set(v);
                        }
                        
                        void numberobj_33_format_set(number v) {
                            this->numberobj_33_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_34_valin_set(number v) {
                            this->numberobj_34_value_set(v);
                        }
                        
                        void numberobj_34_format_set(number v) {
                            this->numberobj_34_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_35_valin_set(number v) {
                            this->numberobj_35_value_set(v);
                        }
                        
                        void numberobj_35_format_set(number v) {
                            this->numberobj_35_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_36_valin_set(number v) {
                            this->numberobj_36_value_set(v);
                        }
                        
                        void numberobj_36_format_set(number v) {
                            this->numberobj_36_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_37_valin_set(number v) {
                            this->numberobj_37_value_set(v);
                        }
                        
                        void numberobj_37_format_set(number v) {
                            this->numberobj_37_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_38_valin_set(number v) {
                            this->numberobj_38_value_set(v);
                        }
                        
                        void numberobj_38_format_set(number v) {
                            this->numberobj_38_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_39_valin_set(number v) {
                            this->numberobj_39_value_set(v);
                        }
                        
                        void numberobj_39_format_set(number v) {
                            this->numberobj_39_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void eventinlet_18_out1_bang_bang() {
                            this->numberobj_39_value_bang();
                        }
                        
                        void eventinlet_18_out1_number_set(number v) {
                            this->numberobj_39_value_set(v);
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->message_17_init();
                            this->numberobj_29_init();
                            this->message_18_init();
                            this->numberobj_30_init();
                            this->numberobj_31_init();
                            this->numberobj_32_init();
                            this->numberobj_33_init();
                            this->numberobj_34_init();
                            this->numberobj_35_init();
                            this->numberobj_36_init();
                            this->numberobj_37_init();
                            this->numberobj_38_init();
                            this->numberobj_39_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void message_17_set_set(const list& v) {
                            this->message_17_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("STUTTER/cric1r/quantize/message_obj-30"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void eventoutlet_09_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_03_out1_number_set(v);
                        }
                        
                        void numberobj_30_output_set(number v) {
                            this->eventoutlet_09_in1_number_set(v);
                        }
                        
                        void numberobj_30_value_set(number v) {
                            this->numberobj_30_value_setter(v);
                            v = this->numberobj_30_value;
                            number localvalue = v;
                        
                            if (this->numberobj_30_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric1r/quantize/number_obj-39"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_30_output_set(localvalue);
                        }
                        
                        void listlookup_03_out_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_30_value_set(converted);
                            }
                        }
                        
                        void listlookup_03_input_set(const list& v) {
                            this->listlookup_03_input = jsCreateListCopy(v);
                            list tmp = list();
                        
                            for (Index i = 0; i < v->length; i++) {
                                long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
                        
                                if (j >= 0 && (Index)(j) < this->listlookup_03_lookup->length)
                                    tmp->push(this->listlookup_03_lookup[(Index)j]);
                            }
                        
                            if ((bool)(tmp->length))
                                this->listlookup_03_out_set(tmp);
                        }
                        
                        void numberobj_31_output_set(number v) {
                            {
                                list converted = {v};
                                this->listlookup_03_input_set(converted);
                            }
                        }
                        
                        void numberobj_31_value_set(number v) {
                            this->numberobj_31_value_setter(v);
                            v = this->numberobj_31_value;
                            number localvalue = v;
                        
                            if (this->numberobj_31_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric1r/quantize/number_obj-37"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_31_output_set(localvalue);
                        }
                        
                        void minimum_03_index_set(number v) {
                            this->minimum_03_index = v;
                            this->numberobj_31_value_set(v);
                        }
                        
                        void minimum_03_out_set(number v) {
                            this->minimum_03_out = v;
                        }
                        
                        void minimum_03_input_set(const list& v) {
                            this->minimum_03_input = jsCreateListCopy(v);
                        
                            if (v->length == 1) {
                                if (v[0] < this->minimum_03_right) {
                                    this->minimum_03_index_set(0);
                                    this->minimum_03_out_set(v[0]);
                                } else {
                                    this->minimum_03_index_set(1);
                                    this->minimum_03_out_set(this->minimum_03_right);
                                }
                            } else if (v->length > 0) {
                                int idx = 0;
                                number minimum = v[0];
                        
                                for (Index i = 1; i < v->length; i++) {
                                    if (v[(Index)i] < minimum) {
                                        minimum = v[(Index)i];
                                        idx = i;
                                    }
                                }
                        
                                this->minimum_03_index_set(idx);
                                this->minimum_03_out_set(minimum);
                            }
                        }
                        
                        void message_17_out_set(const list& v) {
                            this->minimum_03_input_set(v);
                        }
                        
                        void message_17_trigger_bang() {
                            this->message_17_out_set(this->message_17_set);
                        }
                        
                        void pak_03_out_set(const list& v) {
                            this->message_17_set_set(v);
                            this->message_17_trigger_bang();
                        }
                        
                        void pak_03_in8_set(number v) {
                            this->pak_03_in8 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_03_in1;
                            array[1] = this->pak_03_in2;
                            array[2] = this->pak_03_in3;
                            array[3] = this->pak_03_in4;
                            array[4] = this->pak_03_in5;
                            array[5] = this->pak_03_in6;
                            array[6] = this->pak_03_in7;
                            array[7] = this->pak_03_in8;
                            this->pak_03_out_set(array);
                        }
                        
                        void numberobj_38_output_set(number v) {
                            this->pak_03_in8_set(v);
                        }
                        
                        void numberobj_38_value_set(number v) {
                            this->numberobj_38_value_setter(v);
                            v = this->numberobj_38_value;
                            number localvalue = v;
                        
                            if (this->numberobj_38_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric1r/quantize/number_obj-27"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_38_output_set(localvalue);
                        }
                        
                        void expr_30_out1_set(number v) {
                            this->expr_30_out1 = v;
                            this->numberobj_38_value_set(this->expr_30_out1);
                        }
                        
                        void expr_30_in1_set(number in1) {
                            this->expr_30_in1 = in1;
                            this->expr_30_out1_set(rnbo_abs(this->expr_30_in1 - this->expr_30_in2));//#map:STUTTER/cric1r/quantize/absdiff_obj-7:1
                        }
                        
                        void expr_30_in2_set(number v) {
                            this->expr_30_in2 = v;
                            this->expr_30_in1_set(this->expr_30_in1);
                        }
                        
                        void pak_03_in7_set(number v) {
                            this->pak_03_in7 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_03_in1;
                            array[1] = this->pak_03_in2;
                            array[2] = this->pak_03_in3;
                            array[3] = this->pak_03_in4;
                            array[4] = this->pak_03_in5;
                            array[5] = this->pak_03_in6;
                            array[6] = this->pak_03_in7;
                            array[7] = this->pak_03_in8;
                            this->pak_03_out_set(array);
                        }
                        
                        void numberobj_37_output_set(number v) {
                            this->pak_03_in7_set(v);
                        }
                        
                        void numberobj_37_value_set(number v) {
                            this->numberobj_37_value_setter(v);
                            v = this->numberobj_37_value;
                            number localvalue = v;
                        
                            if (this->numberobj_37_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric1r/quantize/number_obj-25"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_37_output_set(localvalue);
                        }
                        
                        void expr_29_out1_set(number v) {
                            this->expr_29_out1 = v;
                            this->numberobj_37_value_set(this->expr_29_out1);
                        }
                        
                        void expr_29_in1_set(number in1) {
                            this->expr_29_in1 = in1;
                            this->expr_29_out1_set(rnbo_abs(this->expr_29_in1 - this->expr_29_in2));//#map:STUTTER/cric1r/quantize/absdiff_obj-6:1
                        }
                        
                        void expr_29_in2_set(number v) {
                            this->expr_29_in2 = v;
                            this->expr_29_in1_set(this->expr_29_in1);
                        }
                        
                        void pak_03_in6_set(number v) {
                            this->pak_03_in6 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_03_in1;
                            array[1] = this->pak_03_in2;
                            array[2] = this->pak_03_in3;
                            array[3] = this->pak_03_in4;
                            array[4] = this->pak_03_in5;
                            array[5] = this->pak_03_in6;
                            array[6] = this->pak_03_in7;
                            array[7] = this->pak_03_in8;
                            this->pak_03_out_set(array);
                        }
                        
                        void numberobj_36_output_set(number v) {
                            this->pak_03_in6_set(v);
                        }
                        
                        void numberobj_36_value_set(number v) {
                            this->numberobj_36_value_setter(v);
                            v = this->numberobj_36_value;
                            number localvalue = v;
                        
                            if (this->numberobj_36_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric1r/quantize/number_obj-23"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_36_output_set(localvalue);
                        }
                        
                        void expr_28_out1_set(number v) {
                            this->expr_28_out1 = v;
                            this->numberobj_36_value_set(this->expr_28_out1);
                        }
                        
                        void expr_28_in1_set(number in1) {
                            this->expr_28_in1 = in1;
                            this->expr_28_out1_set(rnbo_abs(this->expr_28_in1 - this->expr_28_in2));//#map:STUTTER/cric1r/quantize/absdiff_obj-5:1
                        }
                        
                        void expr_28_in2_set(number v) {
                            this->expr_28_in2 = v;
                            this->expr_28_in1_set(this->expr_28_in1);
                        }
                        
                        void pak_03_in5_set(number v) {
                            this->pak_03_in5 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_03_in1;
                            array[1] = this->pak_03_in2;
                            array[2] = this->pak_03_in3;
                            array[3] = this->pak_03_in4;
                            array[4] = this->pak_03_in5;
                            array[5] = this->pak_03_in6;
                            array[6] = this->pak_03_in7;
                            array[7] = this->pak_03_in8;
                            this->pak_03_out_set(array);
                        }
                        
                        void numberobj_35_output_set(number v) {
                            this->pak_03_in5_set(v);
                        }
                        
                        void numberobj_35_value_set(number v) {
                            this->numberobj_35_value_setter(v);
                            v = this->numberobj_35_value;
                            number localvalue = v;
                        
                            if (this->numberobj_35_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric1r/quantize/number_obj-21"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_35_output_set(localvalue);
                        }
                        
                        void expr_27_out1_set(number v) {
                            this->expr_27_out1 = v;
                            this->numberobj_35_value_set(this->expr_27_out1);
                        }
                        
                        void expr_27_in1_set(number in1) {
                            this->expr_27_in1 = in1;
                            this->expr_27_out1_set(rnbo_abs(this->expr_27_in1 - this->expr_27_in2));//#map:STUTTER/cric1r/quantize/absdiff_obj-4:1
                        }
                        
                        void expr_27_in2_set(number v) {
                            this->expr_27_in2 = v;
                            this->expr_27_in1_set(this->expr_27_in1);
                        }
                        
                        void pak_03_in4_set(number v) {
                            this->pak_03_in4 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_03_in1;
                            array[1] = this->pak_03_in2;
                            array[2] = this->pak_03_in3;
                            array[3] = this->pak_03_in4;
                            array[4] = this->pak_03_in5;
                            array[5] = this->pak_03_in6;
                            array[6] = this->pak_03_in7;
                            array[7] = this->pak_03_in8;
                            this->pak_03_out_set(array);
                        }
                        
                        void numberobj_34_output_set(number v) {
                            this->pak_03_in4_set(v);
                        }
                        
                        void numberobj_34_value_set(number v) {
                            this->numberobj_34_value_setter(v);
                            v = this->numberobj_34_value;
                            number localvalue = v;
                        
                            if (this->numberobj_34_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric1r/quantize/number_obj-19"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_34_output_set(localvalue);
                        }
                        
                        void expr_26_out1_set(number v) {
                            this->expr_26_out1 = v;
                            this->numberobj_34_value_set(this->expr_26_out1);
                        }
                        
                        void expr_26_in1_set(number in1) {
                            this->expr_26_in1 = in1;
                            this->expr_26_out1_set(rnbo_abs(this->expr_26_in1 - this->expr_26_in2));//#map:STUTTER/cric1r/quantize/absdiff_obj-3:1
                        }
                        
                        void expr_26_in2_set(number v) {
                            this->expr_26_in2 = v;
                            this->expr_26_in1_set(this->expr_26_in1);
                        }
                        
                        void pak_03_in3_set(number v) {
                            this->pak_03_in3 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_03_in1;
                            array[1] = this->pak_03_in2;
                            array[2] = this->pak_03_in3;
                            array[3] = this->pak_03_in4;
                            array[4] = this->pak_03_in5;
                            array[5] = this->pak_03_in6;
                            array[6] = this->pak_03_in7;
                            array[7] = this->pak_03_in8;
                            this->pak_03_out_set(array);
                        }
                        
                        void numberobj_33_output_set(number v) {
                            this->pak_03_in3_set(v);
                        }
                        
                        void numberobj_33_value_set(number v) {
                            this->numberobj_33_value_setter(v);
                            v = this->numberobj_33_value;
                            number localvalue = v;
                        
                            if (this->numberobj_33_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric1r/quantize/number_obj-17"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_33_output_set(localvalue);
                        }
                        
                        void expr_25_out1_set(number v) {
                            this->expr_25_out1 = v;
                            this->numberobj_33_value_set(this->expr_25_out1);
                        }
                        
                        void expr_25_in1_set(number in1) {
                            this->expr_25_in1 = in1;
                            this->expr_25_out1_set(rnbo_abs(this->expr_25_in1 - this->expr_25_in2));//#map:STUTTER/cric1r/quantize/absdiff_obj-2:1
                        }
                        
                        void expr_25_in2_set(number v) {
                            this->expr_25_in2 = v;
                            this->expr_25_in1_set(this->expr_25_in1);
                        }
                        
                        void pak_03_in2_set(number v) {
                            this->pak_03_in2 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_03_in1;
                            array[1] = this->pak_03_in2;
                            array[2] = this->pak_03_in3;
                            array[3] = this->pak_03_in4;
                            array[4] = this->pak_03_in5;
                            array[5] = this->pak_03_in6;
                            array[6] = this->pak_03_in7;
                            array[7] = this->pak_03_in8;
                            this->pak_03_out_set(array);
                        }
                        
                        void numberobj_32_output_set(number v) {
                            this->pak_03_in2_set(v);
                        }
                        
                        void numberobj_32_value_set(number v) {
                            this->numberobj_32_value_setter(v);
                            v = this->numberobj_32_value;
                            number localvalue = v;
                        
                            if (this->numberobj_32_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric1r/quantize/number_obj-15"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_32_output_set(localvalue);
                        }
                        
                        void expr_24_out1_set(number v) {
                            this->expr_24_out1 = v;
                            this->numberobj_32_value_set(this->expr_24_out1);
                        }
                        
                        void expr_24_in1_set(number in1) {
                            this->expr_24_in1 = in1;
                            this->expr_24_out1_set(rnbo_abs(this->expr_24_in1 - this->expr_24_in2));//#map:STUTTER/cric1r/quantize/absdiff_obj-1:1
                        }
                        
                        void expr_24_in2_set(number v) {
                            this->expr_24_in2 = v;
                            this->expr_24_in1_set(this->expr_24_in1);
                        }
                        
                        void pak_03_in1_set(number v) {
                            this->pak_03_in1 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_03_in1;
                            array[1] = this->pak_03_in2;
                            array[2] = this->pak_03_in3;
                            array[3] = this->pak_03_in4;
                            array[4] = this->pak_03_in5;
                            array[5] = this->pak_03_in6;
                            array[6] = this->pak_03_in7;
                            array[7] = this->pak_03_in8;
                            this->pak_03_out_set(array);
                        }
                        
                        void numberobj_29_output_set(number v) {
                            this->pak_03_in1_set(v);
                        }
                        
                        void numberobj_29_value_set(number v) {
                            this->numberobj_29_value_setter(v);
                            v = this->numberobj_29_value;
                            number localvalue = v;
                        
                            if (this->numberobj_29_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric1r/quantize/number_obj-13"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_29_output_set(localvalue);
                        }
                        
                        void expr_23_out1_set(number v) {
                            this->expr_23_out1 = v;
                            this->numberobj_29_value_set(this->expr_23_out1);
                        }
                        
                        void expr_23_in1_set(number in1) {
                            this->expr_23_in1 = in1;
                            this->expr_23_out1_set(rnbo_abs(this->expr_23_in1 - this->expr_23_in2));//#map:STUTTER/cric1r/quantize/absdiff_obj-143:1
                        }
                        
                        void expr_23_in2_set(number v) {
                            this->expr_23_in2 = v;
                            this->expr_23_in1_set(this->expr_23_in1);
                        }
                        
                        void numberobj_39_output_set(number v) {
                            this->expr_30_in2_set(v);
                            this->expr_29_in2_set(v);
                            this->expr_28_in2_set(v);
                            this->expr_27_in2_set(v);
                            this->expr_26_in2_set(v);
                            this->expr_25_in2_set(v);
                            this->expr_24_in2_set(v);
                            this->expr_23_in2_set(v);
                        }
                        
                        void numberobj_39_value_set(number v) {
                            this->numberobj_39_value_setter(v);
                            v = this->numberobj_39_value;
                            number localvalue = v;
                        
                            if (this->numberobj_39_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric1r/quantize/number_obj-11"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_39_output_set(localvalue);
                        }
                        
                        void eventinlet_18_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_39_value_set(converted);
                            }
                        }
                        
                        void message_18_set_set(const list& v) {
                            this->message_18_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("STUTTER/cric1r/quantize/message_obj-138"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void listlookup_03_lookup_set(const list& v) {
                            this->listlookup_03_lookup = jsCreateListCopy(v);
                        }
                        
                        void unpack_03_out8_set(number v) {
                            this->unpack_03_out8 = v;
                            this->expr_30_in1_set(v);
                        }
                        
                        void unpack_03_out7_set(number v) {
                            this->unpack_03_out7 = v;
                            this->expr_29_in1_set(v);
                        }
                        
                        void unpack_03_out6_set(number v) {
                            this->unpack_03_out6 = v;
                            this->expr_28_in1_set(v);
                        }
                        
                        void unpack_03_out5_set(number v) {
                            this->unpack_03_out5 = v;
                            this->expr_27_in1_set(v);
                        }
                        
                        void unpack_03_out4_set(number v) {
                            this->unpack_03_out4 = v;
                            this->expr_26_in1_set(v);
                        }
                        
                        void unpack_03_out3_set(number v) {
                            this->unpack_03_out3 = v;
                            this->expr_25_in1_set(v);
                        }
                        
                        void unpack_03_out2_set(number v) {
                            this->unpack_03_out2 = v;
                            this->expr_24_in1_set(v);
                        }
                        
                        void unpack_03_out1_set(number v) {
                            this->unpack_03_out1 = v;
                            this->expr_23_in1_set(v);
                        }
                        
                        void unpack_03_input_list_set(const list& v) {
                            if (v->length > 7)
                                this->unpack_03_out8_set(v[7]);
                        
                            if (v->length > 6)
                                this->unpack_03_out7_set(v[6]);
                        
                            if (v->length > 5)
                                this->unpack_03_out6_set(v[5]);
                        
                            if (v->length > 4)
                                this->unpack_03_out5_set(v[4]);
                        
                            if (v->length > 3)
                                this->unpack_03_out4_set(v[3]);
                        
                            if (v->length > 2)
                                this->unpack_03_out3_set(v[2]);
                        
                            if (v->length > 1)
                                this->unpack_03_out2_set(v[1]);
                        
                            if (v->length > 0)
                                this->unpack_03_out1_set(v[0]);
                        }
                        
                        void message_18_out_set(const list& v) {
                            this->listlookup_03_lookup_set(v);
                            this->unpack_03_input_list_set(v);
                        }
                        
                        void message_18_trigger_bang() {
                            this->message_18_out_set(this->message_18_set);
                        }
                        
                        void eventinlet_17_out1_list_set(const list& v) {
                            this->message_18_set_set(v);
                            this->message_18_trigger_bang();
                        }
                        
                        void message_18_set_bang() {
                            list v = this->message_18_set;
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("STUTTER/cric1r/quantize/message_obj-138"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void eventinlet_17_out1_bang_bang() {
                            this->message_18_set_bang();
                            this->message_18_trigger_bang();
                        }
                        
                        void eventinlet_17_out1_number_set(number v) {
                            {
                                list converted = {v};
                                this->message_18_set_set(converted);
                            }
                        
                            this->message_18_trigger_bang();
                        }
                        
                        void numberobj_39_value_bang() {
                            number v = this->numberobj_39_value;
                            number localvalue = v;
                        
                            if (this->numberobj_39_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric1r/quantize/number_obj-11"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_39_output_set(localvalue);
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_29_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_29_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_29_value = localvalue;
                        }
                        
                        void numberobj_30_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_30_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_30_value = localvalue;
                        }
                        
                        void numberobj_31_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_31_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_31_value = localvalue;
                        }
                        
                        void numberobj_32_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_32_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_32_value = localvalue;
                        }
                        
                        void numberobj_33_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_33_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_33_value = localvalue;
                        }
                        
                        void numberobj_34_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_34_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_34_value = localvalue;
                        }
                        
                        void numberobj_35_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_35_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_35_value = localvalue;
                        }
                        
                        void numberobj_36_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_36_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_36_value = localvalue;
                        }
                        
                        void numberobj_37_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_37_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_37_value = localvalue;
                        }
                        
                        void numberobj_38_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_38_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_38_value = localvalue;
                        }
                        
                        void numberobj_39_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_39_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_39_value = localvalue;
                        }
                        
                        void message_17_init() {
                            this->message_17_set_set({2000, 1000, 500, 250, 125, 62.5, 31.25, 15.625});
                        }
                        
                        void numberobj_29_init() {
                            this->numberobj_29_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric1r/quantize/number_obj-13"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_29_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_29_value;
                        }
                        
                        void numberobj_29_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_29_value_set(preset["value"]);
                        }
                        
                        void message_18_init() {
                            this->message_18_set_set({2000, 1000, 500, 250, 125, 62.5, 31.25, 15.625});
                        }
                        
                        void numberobj_30_init() {
                            this->numberobj_30_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric1r/quantize/number_obj-39"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_30_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_30_value;
                        }
                        
                        void numberobj_30_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_30_value_set(preset["value"]);
                        }
                        
                        void numberobj_31_init() {
                            this->numberobj_31_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric1r/quantize/number_obj-37"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_31_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_31_value;
                        }
                        
                        void numberobj_31_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_31_value_set(preset["value"]);
                        }
                        
                        void numberobj_32_init() {
                            this->numberobj_32_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric1r/quantize/number_obj-15"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_32_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_32_value;
                        }
                        
                        void numberobj_32_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_32_value_set(preset["value"]);
                        }
                        
                        void numberobj_33_init() {
                            this->numberobj_33_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric1r/quantize/number_obj-17"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_33_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_33_value;
                        }
                        
                        void numberobj_33_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_33_value_set(preset["value"]);
                        }
                        
                        void numberobj_34_init() {
                            this->numberobj_34_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric1r/quantize/number_obj-19"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_34_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_34_value;
                        }
                        
                        void numberobj_34_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_34_value_set(preset["value"]);
                        }
                        
                        void numberobj_35_init() {
                            this->numberobj_35_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric1r/quantize/number_obj-21"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_35_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_35_value;
                        }
                        
                        void numberobj_35_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_35_value_set(preset["value"]);
                        }
                        
                        void numberobj_36_init() {
                            this->numberobj_36_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric1r/quantize/number_obj-23"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_36_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_36_value;
                        }
                        
                        void numberobj_36_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_36_value_set(preset["value"]);
                        }
                        
                        void numberobj_37_init() {
                            this->numberobj_37_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric1r/quantize/number_obj-25"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_37_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_37_value;
                        }
                        
                        void numberobj_37_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_37_value_set(preset["value"]);
                        }
                        
                        void numberobj_38_init() {
                            this->numberobj_38_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric1r/quantize/number_obj-27"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_38_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_38_value;
                        }
                        
                        void numberobj_38_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_38_value_set(preset["value"]);
                        }
                        
                        void numberobj_39_init() {
                            this->numberobj_39_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric1r/quantize/number_obj-11"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_39_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_39_value;
                        }
                        
                        void numberobj_39_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_39_value_set(preset["value"]);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            minimum_03_right = 0;
                            minimum_03_out = 0;
                            minimum_03_index = 0;
                            pak_03_in1 = 0;
                            pak_03_in2 = 0;
                            pak_03_in3 = 0;
                            pak_03_in4 = 0;
                            pak_03_in5 = 0;
                            pak_03_in6 = 0;
                            pak_03_in7 = 0;
                            pak_03_in8 = 0;
                            numberobj_29_value = 0;
                            numberobj_29_value_setter(numberobj_29_value);
                            expr_23_in1 = 0;
                            expr_23_in2 = 0;
                            expr_23_out1 = 0;
                            unpack_03_out1 = 0;
                            unpack_03_out2 = 0;
                            unpack_03_out3 = 0;
                            unpack_03_out4 = 0;
                            unpack_03_out5 = 0;
                            unpack_03_out6 = 0;
                            unpack_03_out7 = 0;
                            unpack_03_out8 = 0;
                            numberobj_30_value = 0;
                            numberobj_30_value_setter(numberobj_30_value);
                            numberobj_31_value = 0;
                            numberobj_31_value_setter(numberobj_31_value);
                            numberobj_32_value = 0;
                            numberobj_32_value_setter(numberobj_32_value);
                            expr_24_in1 = 0;
                            expr_24_in2 = 0;
                            expr_24_out1 = 0;
                            numberobj_33_value = 0;
                            numberobj_33_value_setter(numberobj_33_value);
                            expr_25_in1 = 0;
                            expr_25_in2 = 0;
                            expr_25_out1 = 0;
                            numberobj_34_value = 0;
                            numberobj_34_value_setter(numberobj_34_value);
                            expr_26_in1 = 0;
                            expr_26_in2 = 0;
                            expr_26_out1 = 0;
                            numberobj_35_value = 0;
                            numberobj_35_value_setter(numberobj_35_value);
                            expr_27_in1 = 0;
                            expr_27_in2 = 0;
                            expr_27_out1 = 0;
                            numberobj_36_value = 0;
                            numberobj_36_value_setter(numberobj_36_value);
                            expr_28_in1 = 0;
                            expr_28_in2 = 0;
                            expr_28_out1 = 0;
                            numberobj_37_value = 0;
                            numberobj_37_value_setter(numberobj_37_value);
                            expr_29_in1 = 0;
                            expr_29_in2 = 0;
                            expr_29_out1 = 0;
                            numberobj_38_value = 0;
                            numberobj_38_value_setter(numberobj_38_value);
                            expr_30_in1 = 0;
                            expr_30_in2 = 0;
                            expr_30_out1 = 0;
                            numberobj_39_value = 0;
                            numberobj_39_value_setter(numberobj_39_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_29_currentFormat = 6;
                            numberobj_29_lastValue = 0;
                            numberobj_30_currentFormat = 6;
                            numberobj_30_lastValue = 0;
                            numberobj_31_currentFormat = 6;
                            numberobj_31_lastValue = 0;
                            numberobj_32_currentFormat = 6;
                            numberobj_32_lastValue = 0;
                            numberobj_33_currentFormat = 6;
                            numberobj_33_lastValue = 0;
                            numberobj_34_currentFormat = 6;
                            numberobj_34_lastValue = 0;
                            numberobj_35_currentFormat = 6;
                            numberobj_35_lastValue = 0;
                            numberobj_36_currentFormat = 6;
                            numberobj_36_lastValue = 0;
                            numberobj_37_currentFormat = 6;
                            numberobj_37_lastValue = 0;
                            numberobj_38_currentFormat = 6;
                            numberobj_38_lastValue = 0;
                            numberobj_39_currentFormat = 6;
                            numberobj_39_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            list minimum_03_input;
                            number minimum_03_right;
                            number minimum_03_out;
                            number minimum_03_index;
                            list message_17_set;
                            number pak_03_in1;
                            number pak_03_in2;
                            number pak_03_in3;
                            number pak_03_in4;
                            number pak_03_in5;
                            number pak_03_in6;
                            number pak_03_in7;
                            number pak_03_in8;
                            number numberobj_29_value;
                            number expr_23_in1;
                            number expr_23_in2;
                            number expr_23_out1;
                            number unpack_03_out1;
                            number unpack_03_out2;
                            number unpack_03_out3;
                            number unpack_03_out4;
                            number unpack_03_out5;
                            number unpack_03_out6;
                            number unpack_03_out7;
                            number unpack_03_out8;
                            list message_18_set;
                            number numberobj_30_value;
                            number numberobj_31_value;
                            list listlookup_03_input;
                            list listlookup_03_lookup;
                            number numberobj_32_value;
                            number expr_24_in1;
                            number expr_24_in2;
                            number expr_24_out1;
                            number numberobj_33_value;
                            number expr_25_in1;
                            number expr_25_in2;
                            number expr_25_out1;
                            number numberobj_34_value;
                            number expr_26_in1;
                            number expr_26_in2;
                            number expr_26_out1;
                            number numberobj_35_value;
                            number expr_27_in1;
                            number expr_27_in2;
                            number expr_27_out1;
                            number numberobj_36_value;
                            number expr_28_in1;
                            number expr_28_in2;
                            number expr_28_out1;
                            number numberobj_37_value;
                            number expr_29_in1;
                            number expr_29_in2;
                            number expr_29_out1;
                            number numberobj_38_value;
                            number expr_30_in1;
                            number expr_30_in2;
                            number expr_30_out1;
                            number numberobj_39_value;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Int numberobj_29_currentFormat;
                            number numberobj_29_lastValue;
                            Int numberobj_30_currentFormat;
                            number numberobj_30_lastValue;
                            Int numberobj_31_currentFormat;
                            number numberobj_31_lastValue;
                            Int numberobj_32_currentFormat;
                            number numberobj_32_lastValue;
                            Int numberobj_33_currentFormat;
                            number numberobj_33_lastValue;
                            Int numberobj_34_currentFormat;
                            number numberobj_34_lastValue;
                            Int numberobj_35_currentFormat;
                            number numberobj_35_lastValue;
                            Int numberobj_36_currentFormat;
                            number numberobj_36_lastValue;
                            Int numberobj_37_currentFormat;
                            number numberobj_37_lastValue;
                            Int numberobj_38_currentFormat;
                            number numberobj_38_lastValue;
                            Int numberobj_39_currentFormat;
                            number numberobj_39_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_24()
            {
            }
            
            ~RNBOSubpatcher_24()
            {
                delete this->p_03;
            }
            
            virtual RNBOSubpatcher_29* getPatcher() const {
                return static_cast<RNBOSubpatcher_29 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, 892732297, false);
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number minimum(number x, number y) {
                return (y < x ? y : x);
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return globalrandom() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
            
                this->groove_03_perform(
                    this->groove_03_rate_auto,
                    this->groove_03_begin,
                    this->groove_03_end,
                    out1,
                    this->dummyBuffer,
                    n
                );
            
                this->p_03_perform(n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->groove_03_dspsetup(forceDSPSetup);
                this->p_03->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_03 = new RNBOSubpatcher_18();
                this->p_03->setEngineAndPatcher(this->getEngine(), this);
                this->p_03->initialize();
                this->p_03->setParameterOffset(this->getParameterOffset(this->p_03));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_03->getPreset(getSubState(getSubState(preset, "__sps"), "quantize"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_03->getNumParameters())
                        this->p_03->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_03->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_03->getNumParameters())
                            this->p_03->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_03)
                    return 0;
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case 892732297:
                    {
                    this->loadmess_03_startupbang_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/cric1r/message_obj-38") == objectId)
                        this->message_19_listin_number_set(payload);
            
                    if (TAG("STUTTER/cric1r/message_obj-41") == objectId)
                        this->message_20_listin_number_set(payload);
            
                    if (TAG("STUTTER/cric1r/message_obj-5") == objectId)
                        this->message_21_listin_number_set(payload);
            
                    if (TAG("STUTTER/cric1r/message_obj-7") == objectId)
                        this->message_22_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("STUTTER/cric1r/number_obj-26") == objectId)
                        this->numberobj_40_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("STUTTER/cric1r/number_obj-26") == objectId)
                        this->numberobj_40_format_set(payload);
            
                    break;
                    }
                }
            
                this->p_03->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/cric1r/message_obj-38") == objectId)
                        this->message_19_listin_list_set(payload);
            
                    if (TAG("STUTTER/cric1r/message_obj-41") == objectId)
                        this->message_20_listin_list_set(payload);
            
                    if (TAG("STUTTER/cric1r/message_obj-5") == objectId)
                        this->message_21_listin_list_set(payload);
            
                    if (TAG("STUTTER/cric1r/message_obj-7") == objectId)
                        this->message_22_listin_list_set(payload);
            
                    break;
                    }
                }
            
                this->p_03->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("bangin"):
                    {
                    if (TAG("STUTTER/cric1r/button_obj-44") == objectId)
                        this->button_05_bangin_bang();
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/cric1r/message_obj-38") == objectId)
                        this->message_19_listin_bang_bang();
            
                    if (TAG("STUTTER/cric1r/message_obj-41") == objectId)
                        this->message_20_listin_bang_bang();
            
                    if (TAG("STUTTER/cric1r/message_obj-5") == objectId)
                        this->message_21_listin_bang_bang();
            
                    if (TAG("STUTTER/cric1r/message_obj-7") == objectId)
                        this->message_22_listin_bang_bang();
            
                    break;
                    }
                case TAG("startupbang"):
                    {
                    if (TAG("STUTTER/cric1r/loadmess_obj-25") == objectId)
                        this->loadmess_03_startupbang_bang();
            
                    break;
                    }
                }
            
                this->p_03->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("STUTTER/cric1r/button_obj-44"):
                    {
                    return "STUTTER/cric1r/button_obj-44";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("STUTTER/cric1r/message_obj-38"):
                    {
                    return "STUTTER/cric1r/message_obj-38";
                    }
                case TAG("STUTTER/cric1r/message_obj-41"):
                    {
                    return "STUTTER/cric1r/message_obj-41";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("STUTTER/cric1r/number_obj-26"):
                    {
                    return "STUTTER/cric1r/number_obj-26";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("STUTTER/cric1r/message_obj-5"):
                    {
                    return "STUTTER/cric1r/message_obj-5";
                    }
                case TAG("STUTTER/cric1r/message_obj-7"):
                    {
                    return "STUTTER/cric1r/message_obj-7";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("startupbang"):
                    {
                    return "startupbang";
                    }
                case TAG("STUTTER/cric1r/loadmess_obj-25"):
                    {
                    return "STUTTER/cric1r/loadmess_obj-25";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                auto subpatchResult_0 = this->p_03->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 1) {
                    this->groove_03_buffer = new Float32Buffer(this->getPatcher()->getPatcher()->buff2);
                }
            
                this->p_03->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->groove_03_buffer = new Float32Buffer(this->getPatcher()->getPatcher()->buff2);
            }
            
            protected:
            
            void button_05_bangin_bang() {
                this->button_05_bangval_bang();
            }
            
            void message_19_listin_list_set(const list& v) {
                this->message_19_set_set(v);
            }
            
            void message_19_listin_number_set(number v) {
                this->message_19_set_set(v);
            }
            
            void message_19_listin_bang_bang() {
                this->message_19_trigger_bang();
            }
            
            void eventinlet_19_out1_bang_bang() {
                this->switchobj_04_onoff_bang();
                this->switchobj_03_onoff_bang();
            }
            
            void eventinlet_19_out1_list_set(const list& v) {
                {
                    if (v->length > 2)
                        this->switchobj_04_in2_number_set(v[2]);
            
                    if (v->length > 1)
                        this->switchobj_04_in1_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->switchobj_04_onoff_set(converted);
                }
            
                {
                    if (v->length > 2)
                        this->switchobj_03_in2_number_set(v[2]);
            
                    if (v->length > 1)
                        this->switchobj_03_in1_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->switchobj_03_onoff_set(converted);
                }
            }
            
            void eventinlet_20_out1_number_set(number ) {}
            
            void eventinlet_20_out1_list_set(const list& ) {}
            
            void message_20_listin_list_set(const list& v) {
                this->message_20_set_set(v);
            }
            
            void message_20_listin_number_set(number v) {
                this->message_20_set_set(v);
            }
            
            void message_20_listin_bang_bang() {
                this->message_20_trigger_bang();
            }
            
            void eventinlet_21_out1_bang_bang() {
                this->switchobj_03_in1_bang_bang();
            }
            
            void eventinlet_21_out1_number_set(number v) {
                this->switchobj_03_in1_number_set(v);
            }
            
            void eventinlet_22_out1_bang_bang() {
                this->switchobj_04_in1_bang_bang();
            }
            
            void eventinlet_22_out1_number_set(number v) {
                this->switchobj_04_in1_number_set(v);
            }
            
            void eventinlet_23_out1_bang_bang() {
                this->scale_03_outlow_bang();
            }
            
            void eventinlet_23_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_03_outlow_set(converted);
                }
            }
            
            void eventinlet_24_out1_bang_bang() {
                this->scale_03_outhigh_bang();
            }
            
            void eventinlet_24_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_03_outhigh_set(converted);
                }
            }
            
            void loadmess_03_startupbang_bang() {
                this->loadmess_03_message_bang();
            }
            
            void numberobj_40_valin_set(number v) {
                this->numberobj_40_value_set(v);
            }
            
            void numberobj_40_format_set(number v) {
                this->numberobj_40_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_25_out1_bang_bang() {
                this->p_03_in1_bang_bang();
            }
            
            void eventinlet_25_out1_number_set(number v) {
                this->p_03_in1_number_set(v);
            }
            
            void eventinlet_26_out1_bang_bang() {
                this->switchobj_05_onoff_bang();
            }
            
            void eventinlet_26_out1_number_set(number v) {
                this->switchobj_05_onoff_set(v);
            }
            
            void eventinlet_27_out1_number_set(number v) {
                RNBO_UNUSED(v);
                this->button_05_bangval_bang();
            }
            
            void eventinlet_27_out1_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->button_05_bangval_bang();
            }
            
            void message_21_listin_list_set(const list& v) {
                this->message_21_set_set(v);
            }
            
            void message_21_listin_number_set(number v) {
                this->message_21_set_set(v);
            }
            
            void message_21_listin_bang_bang() {
                this->message_21_trigger_bang();
            }
            
            void message_22_listin_list_set(const list& v) {
                this->message_22_set_set(v);
            }
            
            void message_22_listin_number_set(number v) {
                this->message_22_set_set(v);
            }
            
            void message_22_listin_bang_bang() {
                this->message_22_trigger_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->message_19_init();
                this->message_20_init();
                this->random_05_nz_init();
                this->numberobj_40_init();
                this->message_21_init();
                this->message_22_init();
                this->p_03->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_03->startup();
                this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
            }
            
            void allocateDataRefs() {
                this->p_03->allocateDataRefs();
                this->groove_03_buffer = this->groove_03_buffer->allocateIfNeeded();
            }
            
            void gate_05_onoff_set(number v) {
                this->gate_05_onoff = v;
            }
            
            void groove_03_rate_auto_set(number v) {
                this->groove_03_rate_auto = v;
            }
            
            void gate_05_out1_number_set(number v) {
                this->gate_05_out1_number = v;
                this->groove_03_rate_auto_set(v);
            }
            
            void message_20_set_set(const list& v) {
                this->message_20_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/cric1r/message_obj-41"),
                    v,
                    this->_currentTime
                );
            }
            
            void expr_32_out1_set(number v) {
                this->expr_32_out1 = v;
            
                {
                    list converted = {this->expr_32_out1};
                    this->message_20_set_set(converted);
                }
            }
            
            void expr_32_in1_set(number in1) {
                this->expr_32_in1 = in1;
                this->expr_32_out1_set(this->expr_32_in1 + this->expr_32_in2);//#map:STUTTER/cric1r/+_obj-35:1
            }
            
            void expr_32_in2_set(number v) {
                this->expr_32_in2 = v;
                this->expr_32_in1_set(this->expr_32_in1);
            }
            
            void switchobj_05_out_number_set(number v) {
                this->expr_32_in2_set(v);
            }
            
            void switchobj_05_in2_number_set(number v) {
                if (this->switchobj_05_onoff == 2) {
                    this->switchobj_05_out_number_set(v);
                }
            }
            
            void p_03_out1_number_set(number v) {
                this->switchobj_05_in2_number_set(v);
            }
            
            void p_03_in2_list_set(const list& v) {
                this->p_03->updateTime(this->_currentTime);
                this->p_03->eventinlet_18_out1_list_set(v);
            }
            
            void switchobj_05_out_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_32_in2_set(converted);
                }
            }
            
            void switchobj_05_in1_list_set(const list& v) {
                if (this->switchobj_05_onoff == 1) {
                    this->switchobj_05_out_list_set(v);
                }
            }
            
            void scale_03_out_set(const list& v) {
                this->scale_03_out = jsCreateListCopy(v);
                this->p_03_in2_list_set(v);
                this->switchobj_05_in1_list_set(v);
            }
            
            void scale_03_input_set(const list& v) {
                this->scale_03_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_03_inlow,
                        this->scale_03_inhigh,
                        this->scale_03_outlow,
                        this->scale_03_outhigh,
                        this->scale_03_power
                    ));
                }
            
                this->scale_03_out_set(tmp);
            }
            
            void random_05_result_set(number v) {
                {
                    list converted = {v};
                    this->scale_03_input_set(converted);
                }
            }
            
            void random_05_trigger_bang() {
                this->random_05_result_set(rnbo_abs(this->random_05_nz_next()) * this->random_05_limit);
            }
            
            void trigger_03_out4_bang() {
                this->random_05_trigger_bang();
            }
            
            void groove_03_end_set(number v) {
                this->groove_03_end = v;
            }
            
            void switchobj_04_out_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->groove_03_end_set(converted);
                }
            }
            
            void switchobj_04_in2_list_set(const list& v) {
                if (this->switchobj_04_onoff == 2) {
                    this->switchobj_04_out_list_set(v);
                }
            }
            
            void message_20_out_set(const list& v) {
                this->switchobj_04_in2_list_set(v);
            }
            
            void message_20_trigger_bang() {
                this->message_20_out_set(this->message_20_set);
            }
            
            void trigger_03_out3_bang() {
                this->message_20_trigger_bang();
            }
            
            void groove_03_begin_set(number v) {
                this->groove_03_begin = v;
            }
            
            void switchobj_03_out_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->groove_03_begin_set(converted);
                }
            }
            
            void switchobj_03_in2_list_set(const list& v) {
                if (this->switchobj_03_onoff == 2) {
                    this->switchobj_03_out_list_set(v);
                }
            }
            
            void message_19_out_set(const list& v) {
                this->switchobj_03_in2_list_set(v);
            }
            
            void message_19_trigger_bang() {
                this->message_19_out_set(this->message_19_set);
            }
            
            void trigger_03_out2_bang() {
                this->message_19_trigger_bang();
            }
            
            void groove_03_rate_bang_bang() {
                this->groove_03_changeIncomingInSamples = this->sampleOffsetIntoNextAudioBuffer + 1;
                this->groove_03_incomingChange = 1;
            }
            
            void trigger_03_out1_bang() {
                this->groove_03_rate_bang_bang();
            }
            
            void trigger_03_input_number_set(number v) {
                RNBO_UNUSED(v);
                this->trigger_03_out4_bang();
                this->trigger_03_out3_bang();
                this->trigger_03_out2_bang();
                this->trigger_03_out1_bang();
            }
            
            void gate_05_out2_number_set(number v) {
                this->gate_05_out2_number = v;
                this->trigger_03_input_number_set(v);
            }
            
            void gate_05_input_number_set(number v) {
                if (this->gate_05_onoff == 1)
                    this->gate_05_out1_number_set(v);
                else if (this->gate_05_onoff == 2)
                    this->gate_05_out2_number_set(v);
            }
            
            void message_21_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_05_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_05_onoff_set(converted);
                }
            }
            
            void message_21_trigger_bang() {
                this->message_21_out_set(this->message_21_set);
            }
            
            void select_09_match1_bang() {
                this->message_21_trigger_bang();
            }
            
            void message_22_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_05_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_05_onoff_set(converted);
                }
            }
            
            void message_22_trigger_bang() {
                this->message_22_out_set(this->message_22_set);
            }
            
            void select_09_match2_bang() {
                this->message_22_trigger_bang();
            }
            
            void select_09_nomatch_number_set(number ) {}
            
            void select_09_input_number_set(number v) {
                if (v == this->select_09_test1)
                    this->select_09_match1_bang();
                else if (v == this->select_09_test2)
                    this->select_09_match2_bang();
                else
                    this->select_09_nomatch_number_set(v);
            }
            
            void receive_12_output_number_set(number v) {
                this->receive_12_output_number = v;
                this->select_09_input_number_set(v);
            }
            
            void switchobj_04_onoff_set(number v) {
                this->switchobj_04_onoff = v;
            }
            
            void switchobj_03_onoff_set(number v) {
                this->switchobj_03_onoff = v;
            }
            
            void eventinlet_19_out1_number_set(number v) {
                this->switchobj_04_onoff_set(v);
                this->switchobj_03_onoff_set(v);
            }
            
            void gate_05_out1_bang_bang() {
                this->groove_03_rate_bang_bang();
            }
            
            void trigger_03_input_bang_bang() {
                this->trigger_03_out4_bang();
                this->trigger_03_out3_bang();
                this->trigger_03_out2_bang();
                this->trigger_03_out1_bang();
            }
            
            void gate_05_out2_bang_bang() {
                this->trigger_03_input_bang_bang();
            }
            
            void gate_05_input_bang_bang() {
                if (this->gate_05_onoff == 1)
                    this->gate_05_out1_bang_bang();
                else if (this->gate_05_onoff == 2)
                    this->gate_05_out2_bang_bang();
            }
            
            void button_05_output_bang() {
                this->gate_05_input_bang_bang();
            }
            
            void button_05_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("STUTTER/cric1r/button_obj-44"), this->_currentTime);;
                this->button_05_output_bang();
            }
            
            void eventinlet_27_out1_bang_bang() {
                this->button_05_bangval_bang();
            }
            
            void eventinlet_20_out1_bang_bang() {}
            
            void switchobj_04_in1_list_set(const list& v) {
                if (this->switchobj_04_onoff == 1) {
                    this->switchobj_04_out_list_set(v);
                }
            }
            
            void eventinlet_22_out1_list_set(const list& v) {
                this->switchobj_04_in1_list_set(v);
            }
            
            void switchobj_03_in1_list_set(const list& v) {
                if (this->switchobj_03_onoff == 1) {
                    this->switchobj_03_out_list_set(v);
                }
            }
            
            void eventinlet_21_out1_list_set(const list& v) {
                this->switchobj_03_in1_list_set(v);
            }
            
            void switchobj_05_onoff_set(number v) {
                this->switchobj_05_onoff = v;
            }
            
            void switchobj_05_in1_number_set(number v) {
                if (this->switchobj_05_onoff == 1) {
                    this->switchobj_05_out_number_set(v);
                }
            }
            
            void eventinlet_26_out1_list_set(const list& v) {
                {
                    if (v->length > 2)
                        this->switchobj_05_in2_number_set(v[2]);
            
                    if (v->length > 1)
                        this->switchobj_05_in1_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->switchobj_05_onoff_set(converted);
                }
            }
            
            void p_03_in1_list_set(const list& v) {
                this->p_03->updateTime(this->_currentTime);
                this->p_03->eventinlet_17_out1_list_set(v);
            }
            
            void eventinlet_25_out1_list_set(const list& v) {
                this->p_03_in1_list_set(v);
            }
            
            void scale_03_outlow_set(number v) {
                this->scale_03_outlow = v;
            }
            
            void eventinlet_23_out1_number_set(number v) {
                this->scale_03_outlow_set(v);
            }
            
            void scale_03_outhigh_set(number v) {
                this->scale_03_outhigh = v;
            }
            
            void eventinlet_24_out1_number_set(number v) {
                this->scale_03_outhigh_set(v);
            }
            
            void message_19_set_set(const list& v) {
                this->message_19_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/cric1r/message_obj-38"),
                    v,
                    this->_currentTime
                );
            }
            
            void wrap_03_out1_set(number v) {
                this->expr_32_in1_set(v);
            
                {
                    list converted = {v};
                    this->message_19_set_set(converted);
                }
            }
            
            void wrap_03_x_set(number x) {
                this->wrap_03_x = x;
                auto high = this->wrap_03_high;
                auto low = this->wrap_03_low;
                number lo;
                number hi;
            
                if (low == high) {
                    this->wrap_03_out1_set(low);
                    return;
                }
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi) {
                    this->wrap_03_out1_set(x);
                    return;
                }
            
                if (range <= 0.000000001) {
                    this->wrap_03_out1_set(lo);
                    return;
                }
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi) {
                    this->wrap_03_out1_set(result - range);
                    return;
                } else {
                    this->wrap_03_out1_set(result);
                    return;
                }
            }
            
            void expr_31_out1_set(number v) {
                this->expr_31_out1 = v;
                this->wrap_03_x_set(this->expr_31_out1);
            }
            
            void expr_31_in1_set(number in1) {
                this->expr_31_in1 = in1;
                this->expr_31_out1_set(this->expr_31_in1 - this->expr_31_in2);//#map:STUTTER/cric1r/-_obj-82:1
            }
            
            void receive_11_output_number_set(number v) {
                this->receive_11_output_number = v;
                this->expr_31_in1_set(v);
            }
            
            void switchobj_04_out_number_set(number v) {
                this->groove_03_end_set(v);
            }
            
            void switchobj_04_onoff_bang() {
                this->switchobj_04_out_number_set(this->switchobj_04_onoff);
            }
            
            void switchobj_03_out_number_set(number v) {
                this->groove_03_begin_set(v);
            }
            
            void switchobj_03_onoff_bang() {
                this->switchobj_03_out_number_set(this->switchobj_03_onoff);
            }
            
            void switchobj_04_in1_number_set(number v) {
                if (this->switchobj_04_onoff == 1) {
                    this->switchobj_04_out_number_set(v);
                }
            }
            
            void switchobj_04_in2_number_set(number v) {
                if (this->switchobj_04_onoff == 2) {
                    this->switchobj_04_out_number_set(v);
                }
            }
            
            void switchobj_03_in1_number_set(number v) {
                if (this->switchobj_03_onoff == 1) {
                    this->switchobj_03_out_number_set(v);
                }
            }
            
            void switchobj_03_in2_number_set(number v) {
                if (this->switchobj_03_onoff == 2) {
                    this->switchobj_03_out_number_set(v);
                }
            }
            
            void switchobj_03_out_bang_bang() {}
            
            void switchobj_03_in1_bang_bang() {
                if (this->switchobj_03_onoff == 1) {
                    this->switchobj_03_out_bang_bang();
                }
            }
            
            void switchobj_04_out_bang_bang() {}
            
            void switchobj_04_in1_bang_bang() {
                if (this->switchobj_04_onoff == 1) {
                    this->switchobj_04_out_bang_bang();
                }
            }
            
            void scale_03_outlow_bang() {}
            
            void scale_03_outhigh_bang() {}
            
            void groove_03_crossfade_set(number v) {
                this->groove_03_crossfade = v;
                this->groove_03_crossfadeInSamples = this->mstosamps(v);
            }
            
            void numberobj_40_output_set(number v) {
                this->groove_03_crossfade_set(v);
            }
            
            void numberobj_40_value_set(number v) {
                this->numberobj_40_value_setter(v);
                v = this->numberobj_40_value;
                number localvalue = v;
            
                if (this->numberobj_40_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/cric1r/number_obj-26"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_40_output_set(localvalue);
            }
            
            void loadmess_03_message_bang() {
                list v = this->loadmess_03_message;
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_40_value_set(converted);
                }
            }
            
            void p_03_in1_bang_bang() {
                this->p_03->updateTime(this->_currentTime);
                this->p_03->eventinlet_17_out1_bang_bang();
            }
            
            void p_03_in1_number_set(number v) {
                this->p_03->updateTime(this->_currentTime);
                this->p_03->eventinlet_17_out1_number_set(v);
            }
            
            void switchobj_05_onoff_bang() {
                this->switchobj_05_out_number_set(this->switchobj_05_onoff);
            }
            
            void message_21_set_set(const list& v) {
                this->message_21_set = jsCreateListCopy(v);
                this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/cric1r/message_obj-5"), v, this->_currentTime);
            }
            
            void message_22_set_set(const list& v) {
                this->message_22_set = jsCreateListCopy(v);
                this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/cric1r/message_obj-7"), v, this->_currentTime);
            }
            
            void groove_03_perform(
                number rate_auto,
                number begin,
                number end,
                SampleValue * out1,
                SampleValue * sync,
                Index n
            ) {
                RNBO_UNUSED(out1);
                auto __groove_03_crossfade = this->groove_03_crossfade;
                auto __groove_03_loop = this->groove_03_loop;
                auto __groove_03_playStatus = this->groove_03_playStatus;
                auto __groove_03_readIndex = this->groove_03_readIndex;
                auto __groove_03_incomingChange = this->groove_03_incomingChange;
                auto __groove_03_changeIncomingInSamples = this->groove_03_changeIncomingInSamples;
                auto __groove_03_buffer = this->groove_03_buffer;
                SampleArray<1> out = {out1};
                SampleIndex bufferLength = (SampleIndex)(__groove_03_buffer->getSize());
                Index i = 0;
            
                if (bufferLength > 1) {
                    auto effectiveChannels = this->minimum(__groove_03_buffer->getChannels(), 1);
                    number srMult = 0.001 * __groove_03_buffer->getSampleRate();
                    number srInv = (number)1 / this->samplerate();
                    number rateMult = __groove_03_buffer->getSampleRate() * srInv;
            
                    for (; i < n; i++) {
                        Index channel = 0;
                        number offset = 0;
                        number loopMin = begin * srMult;
                        loopMin = (loopMin > bufferLength - 1 ? bufferLength - 1 : (loopMin < 0 ? 0 : loopMin));
                        number loopMax = (end < 0 ? bufferLength : end * srMult);
                        loopMax = (loopMax > bufferLength ? bufferLength : (loopMax < 0 ? 0 : loopMax));
            
                        if (loopMin >= loopMax) {
                            offset = loopMax;
                            loopMax = bufferLength;
                            loopMin -= offset;
                        }
            
                        number loopLength = loopMax - loopMin;
                        number currentRate = rate_auto * rateMult;
                        number currentSync = 0;
            
                        if (__groove_03_changeIncomingInSamples > 0) {
                            __groove_03_changeIncomingInSamples--;
            
                            if (__groove_03_changeIncomingInSamples <= 0) {
                                if (__groove_03_incomingChange == 1) {
                                    if (currentRate < 0) {
                                        __groove_03_readIndex = loopMax - 1;
                                    } else {
                                        __groove_03_readIndex = loopMin;
                                    }
            
                                    __groove_03_playStatus = 1;
                                } else if (__groove_03_incomingChange == 0) {
                                    __groove_03_playStatus = 0;
                                }
            
                                __groove_03_incomingChange = 2;
                            }
                        }
            
                        if (loopLength > 0) {
                            if (currentRate != 0) {
                                if (__groove_03_playStatus == 1) {
                                    if ((bool)(__groove_03_loop)) {
                                        while (__groove_03_readIndex < loopMin) {
                                            __groove_03_readIndex += loopLength;
                                        }
            
                                        while (__groove_03_readIndex >= loopMax) {
                                            __groove_03_readIndex -= loopLength;
                                        }
                                    } else if (__groove_03_readIndex >= loopMax || __groove_03_readIndex < loopMin) {
                                        __groove_03_playStatus = 0;
                                        break;
                                    }
            
                                    for (; channel < effectiveChannels; channel++) {
                                        number outSample = (currentRate == 1 ? this->groove_03_getSample((Index)(channel), trunc(__groove_03_readIndex), offset, bufferLength) : this->groove_03_interpolatedSample(
                                            (Index)(channel),
                                            __groove_03_readIndex,
                                            loopMax,
                                            loopLength,
                                            offset,
                                            bufferLength
                                        ));
            
                                        if (__groove_03_crossfade > 0) {
                                            out[(Index)channel][(Index)i] = this->groove_03_crossfadedSample(
                                                outSample,
                                                __groove_03_readIndex,
                                                (Index)(channel),
                                                currentRate,
                                                loopMin,
                                                loopMax,
                                                loopLength,
                                                offset,
                                                bufferLength
                                            );
                                        } else {
                                            out[(Index)channel][(Index)i] = outSample;
                                        }
                                    }
            
                                    __groove_03_readIndex += currentRate;
                                }
                            }
                        }
            
                        for (; channel < 1; channel++) {
                            if (__groove_03_playStatus <= 0)
                                sync[(Index)i] = 0;
            
                            out[(Index)channel][(Index)i] = 0;
                        }
                    }
                }
            
                for (; i < n; i++) {
                    if (__groove_03_playStatus <= 0)
                        sync[(Index)i] = 0;
            
                    for (number channel = 0; channel < 1; channel++) {
                        out[(Index)channel][(Index)i] = 0;
                    }
                }
            
                this->groove_03_changeIncomingInSamples = __groove_03_changeIncomingInSamples;
                this->groove_03_incomingChange = __groove_03_incomingChange;
                this->groove_03_readIndex = __groove_03_readIndex;
                this->groove_03_playStatus = __groove_03_playStatus;
            }
            
            void p_03_perform(Index n) {
                // subpatcher: quantize
                this->p_03->process(nullptr, 0, nullptr, 0, n);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void random_05_limit_setter(number v) {
                if (v >= 0)
                    this->random_05_limit = v;
            }
            
            void numberobj_40_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_40_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_40_value = localvalue;
            }
            
            number groove_03_getSample(
                Index channel,
                SampleIndex index,
                SampleIndex offset,
                SampleIndex bufferLength
            ) {
                if (offset > 0) {
                    index += offset;
            
                    if (index >= bufferLength)
                        index -= bufferLength;
                }
            
                return this->groove_03_buffer->getSample(channel, index);
            }
            
            number groove_03_interpolatedSample(
                Index channel,
                number index,
                SampleIndex end,
                SampleIndex length,
                SampleIndex offset,
                SampleIndex bufferLength
            ) {
                SampleIndex index1 = (SampleIndex)(trunc(index));
                number i_x = index - index1;
                number i_1px = 1. + i_x;
                number i_1mx = 1. - i_x;
                number i_2mx = 2. - i_x;
                number i_a = i_1mx * i_2mx;
                number i_b = i_1px * i_x;
                number i_p1 = -.1666667 * i_a * i_x;
                number i_p2 = .5 * i_1px * i_a;
                number i_p3 = .5 * i_b * i_2mx;
                number i_p4 = -.1666667 * i_b * i_1mx;
                SampleIndex index2 = (SampleIndex)(index1 + 1);
            
                if (index2 >= end)
                    index2 -= length;
            
                SampleIndex index3 = (SampleIndex)(index1 + 2);
            
                if (index3 >= end)
                    index3 -= length;
            
                SampleIndex index4 = (SampleIndex)(index1 + 3);
            
                if (index4 >= end)
                    index4 -= length;
            
                return this->groove_03_getSample(channel, index1, offset, bufferLength) * i_p1 + this->groove_03_getSample(channel, index2, offset, bufferLength) * i_p2 + this->groove_03_getSample(channel, index3, offset, bufferLength) * i_p3 + this->groove_03_getSample(channel, index4, offset, bufferLength) * i_p4;
            }
            
            number groove_03_crossfadedSample(
                SampleValue out,
                number readIndex,
                Index channel,
                number rate,
                number loopMin,
                number loopMax,
                number loopLength,
                number offset,
                number bufferLength
            ) {
                auto crossFadeStart1 = this->maximum(loopMin - this->groove_03_crossfadeInSamples, 0);
                auto crossFadeEnd1 = this->minimum(crossFadeStart1 + this->groove_03_crossfadeInSamples, bufferLength);
                number crossFadeStart2 = crossFadeStart1 + loopLength;
                auto crossFadeEnd2 = this->minimum(crossFadeEnd1 + loopLength, bufferLength);
                number crossFadeLength = crossFadeEnd2 - crossFadeStart2;
            
                if (crossFadeLength > 0) {
                    crossFadeEnd1 = crossFadeStart1 + crossFadeLength;
                    number diff = -1;
                    number addFactor = 0;
            
                    if (readIndex >= crossFadeStart2) {
                        diff = readIndex - crossFadeStart2;
                        addFactor = -1;
                    } else if (readIndex < crossFadeEnd1) {
                        diff = crossFadeEnd1 - readIndex + loopMax - crossFadeStart2;
                        addFactor = 1;
                    }
            
                    if (diff >= 0) {
                        number out2ReadIndex = readIndex + loopLength * addFactor;
                        number out2 = (rate == 1 ? this->groove_03_getSample(channel, trunc(out2ReadIndex), offset, bufferLength) : this->groove_03_interpolatedSample(channel, out2ReadIndex, loopMax, loopLength, offset, bufferLength));
                        number out2Factor = diff / crossFadeLength;
                        number out1Factor = 1 - out2Factor;
                        return out * out1Factor + out2 * out2Factor;
                    }
                }
            
                return out;
            }
            
            void groove_03_dspsetup(bool force) {
                if ((bool)(this->groove_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->groove_03_crossfadeInSamples = this->mstosamps(this->groove_03_crossfade);
                this->groove_03_setupDone = true;
            }
            
            void message_19_init() {
                this->message_19_set_set({6032.6875});
            }
            
            void message_20_init() {
                this->message_20_set_set({6032.6875});
            }
            
            void random_05_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_05_nz_state
                );
            }
            
            void random_05_nz_init() {
                this->random_05_nz_reset();
            }
            
            void random_05_nz_seed(number v) {
                xoshiro_reset(v, this->random_05_nz_state);
            }
            
            number random_05_nz_next() {
                return xoshiro_next(this->random_05_nz_state);
            }
            
            void numberobj_40_init() {
                this->numberobj_40_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/cric1r/number_obj-26"), 1, this->_currentTime);
            }
            
            void numberobj_40_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_40_value;
            }
            
            void numberobj_40_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_40_value_set(preset["value"]);
            }
            
            void message_21_init() {
                this->message_21_set_set({1});
            }
            
            void message_22_init() {
                this->message_22_set_set({2});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                groove_03_rate_auto = 1;
                groove_03_begin = 0;
                groove_03_end = -1;
                groove_03_loop = 1;
                groove_03_crossfade = 0;
                gate_05_onoff = 0;
                gate_05_out1_number = 0;
                gate_05_out2_number = 0;
                switchobj_03_onoff = 0;
                wrap_03_x = 0;
                wrap_03_low = 0;
                wrap_03_high = 30000;
                expr_31_in1 = 0;
                expr_31_in2 = 10;
                expr_31_out1 = 0;
                receive_11_output_number = 0;
                switchobj_04_onoff = 0;
                scale_03_inlow = 0;
                scale_03_inhigh = 4999;
                scale_03_outlow = 0;
                scale_03_outhigh = 1;
                scale_03_power = 1;
                random_05_limit = 5000;
                random_05_limit_setter(random_05_limit);
                random_05_seed = 0;
                expr_32_in1 = 0;
                expr_32_in2 = 0;
                expr_32_out1 = 0;
                loadmess_03_message = { 3 };
                numberobj_40_value = 0;
                numberobj_40_value_setter(numberobj_40_value);
                switchobj_05_onoff = 0;
                p_03_target = 0;
                select_09_test1 = 0;
                select_09_test2 = 1;
                receive_12_output_number = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                groove_03_readIndex = 0;
                groove_03_playStatus = 0;
                groove_03_changeIncomingInSamples = 0;
                groove_03_incomingChange = 2;
                groove_03_crossfadeInSamples = 0;
                groove_03_setupDone = false;
                numberobj_40_currentFormat = 6;
                numberobj_40_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number groove_03_rate_auto;
                number groove_03_begin;
                number groove_03_end;
                number groove_03_loop;
                number groove_03_crossfade;
                number gate_05_onoff;
                number gate_05_out1_number;
                list gate_05_out1_list;
                number gate_05_out2_number;
                list gate_05_out2_list;
                list message_19_set;
                number switchobj_03_onoff;
                number wrap_03_x;
                number wrap_03_low;
                number wrap_03_high;
                number expr_31_in1;
                number expr_31_in2;
                number expr_31_out1;
                number receive_11_output_number;
                list receive_11_output_list;
                list message_20_set;
                number switchobj_04_onoff;
                list scale_03_input;
                number scale_03_inlow;
                number scale_03_inhigh;
                number scale_03_outlow;
                number scale_03_outhigh;
                number scale_03_power;
                list scale_03_out;
                number random_05_limit;
                number random_05_seed;
                number expr_32_in1;
                number expr_32_in2;
                number expr_32_out1;
                list loadmess_03_message;
                number numberobj_40_value;
                number switchobj_05_onoff;
                number p_03_target;
                list message_21_set;
                number select_09_test1;
                number select_09_test2;
                number receive_12_output_number;
                list receive_12_output_list;
                list message_22_set;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float32BufferRef groove_03_buffer;
                number groove_03_readIndex;
                Index groove_03_playStatus;
                SampleIndex groove_03_changeIncomingInSamples;
                Int groove_03_incomingChange;
                SampleIndex groove_03_crossfadeInSamples;
                bool groove_03_setupDone;
                UInt random_05_nz_state[4] = { };
                Int numberobj_40_currentFormat;
                number numberobj_40_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_18* p_03;
            
    };
    
    class RNBOSubpatcher_25 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_29;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_19 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_25;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_19()
                        {
                        }
                        
                        ~RNBOSubpatcher_19()
                        {
                        }
                        
                        virtual RNBOSubpatcher_25* getPatcher() const {
                            return static_cast<RNBOSubpatcher_25 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("STUTTER/cric2r/quantize/message_obj-30") == objectId)
                                    this->message_23_listin_number_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/message_obj-138") == objectId)
                                    this->message_24_listin_number_set(payload);
                        
                                break;
                                }
                            case TAG("valin"):
                                {
                                if (TAG("STUTTER/cric2r/quantize/number_obj-13") == objectId)
                                    this->numberobj_41_valin_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-39") == objectId)
                                    this->numberobj_42_valin_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-37") == objectId)
                                    this->numberobj_43_valin_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-15") == objectId)
                                    this->numberobj_44_valin_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-17") == objectId)
                                    this->numberobj_45_valin_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-19") == objectId)
                                    this->numberobj_46_valin_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-21") == objectId)
                                    this->numberobj_47_valin_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-23") == objectId)
                                    this->numberobj_48_valin_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-25") == objectId)
                                    this->numberobj_49_valin_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-27") == objectId)
                                    this->numberobj_50_valin_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-11") == objectId)
                                    this->numberobj_51_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("STUTTER/cric2r/quantize/number_obj-13") == objectId)
                                    this->numberobj_41_format_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-39") == objectId)
                                    this->numberobj_42_format_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-37") == objectId)
                                    this->numberobj_43_format_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-15") == objectId)
                                    this->numberobj_44_format_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-17") == objectId)
                                    this->numberobj_45_format_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-19") == objectId)
                                    this->numberobj_46_format_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-21") == objectId)
                                    this->numberobj_47_format_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-23") == objectId)
                                    this->numberobj_48_format_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-25") == objectId)
                                    this->numberobj_49_format_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-27") == objectId)
                                    this->numberobj_50_format_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/number_obj-11") == objectId)
                                    this->numberobj_51_format_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("STUTTER/cric2r/quantize/message_obj-30") == objectId)
                                    this->message_23_listin_list_set(payload);
                        
                                if (TAG("STUTTER/cric2r/quantize/message_obj-138") == objectId)
                                    this->message_24_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("STUTTER/cric2r/quantize/message_obj-30") == objectId)
                                    this->message_23_listin_bang_bang();
                        
                                if (TAG("STUTTER/cric2r/quantize/message_obj-138") == objectId)
                                    this->message_24_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("STUTTER/cric2r/quantize/message_obj-30"):
                                {
                                return "STUTTER/cric2r/quantize/message_obj-30";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("STUTTER/cric2r/quantize/number_obj-13"):
                                {
                                return "STUTTER/cric2r/quantize/number_obj-13";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("STUTTER/cric2r/quantize/message_obj-138"):
                                {
                                return "STUTTER/cric2r/quantize/message_obj-138";
                                }
                            case TAG("STUTTER/cric2r/quantize/number_obj-39"):
                                {
                                return "STUTTER/cric2r/quantize/number_obj-39";
                                }
                            case TAG("STUTTER/cric2r/quantize/number_obj-37"):
                                {
                                return "STUTTER/cric2r/quantize/number_obj-37";
                                }
                            case TAG("STUTTER/cric2r/quantize/number_obj-15"):
                                {
                                return "STUTTER/cric2r/quantize/number_obj-15";
                                }
                            case TAG("STUTTER/cric2r/quantize/number_obj-17"):
                                {
                                return "STUTTER/cric2r/quantize/number_obj-17";
                                }
                            case TAG("STUTTER/cric2r/quantize/number_obj-19"):
                                {
                                return "STUTTER/cric2r/quantize/number_obj-19";
                                }
                            case TAG("STUTTER/cric2r/quantize/number_obj-21"):
                                {
                                return "STUTTER/cric2r/quantize/number_obj-21";
                                }
                            case TAG("STUTTER/cric2r/quantize/number_obj-23"):
                                {
                                return "STUTTER/cric2r/quantize/number_obj-23";
                                }
                            case TAG("STUTTER/cric2r/quantize/number_obj-25"):
                                {
                                return "STUTTER/cric2r/quantize/number_obj-25";
                                }
                            case TAG("STUTTER/cric2r/quantize/number_obj-27"):
                                {
                                return "STUTTER/cric2r/quantize/number_obj-27";
                                }
                            case TAG("STUTTER/cric2r/quantize/number_obj-11"):
                                {
                                return "STUTTER/cric2r/quantize/number_obj-11";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void message_23_listin_list_set(const list& v) {
                            this->message_23_set_set(v);
                        }
                        
                        void message_23_listin_number_set(number v) {
                            this->message_23_set_set(v);
                        }
                        
                        void message_23_listin_bang_bang() {
                            this->message_23_trigger_bang();
                        }
                        
                        void numberobj_41_valin_set(number v) {
                            this->numberobj_41_value_set(v);
                        }
                        
                        void numberobj_41_format_set(number v) {
                            this->numberobj_41_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_24_listin_list_set(const list& v) {
                            this->message_24_set_set(v);
                        }
                        
                        void message_24_listin_number_set(number v) {
                            this->message_24_set_set(v);
                        }
                        
                        void message_24_listin_bang_bang() {
                            this->message_24_trigger_bang();
                        }
                        
                        void numberobj_42_valin_set(number v) {
                            this->numberobj_42_value_set(v);
                        }
                        
                        void numberobj_42_format_set(number v) {
                            this->numberobj_42_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_43_valin_set(number v) {
                            this->numberobj_43_value_set(v);
                        }
                        
                        void numberobj_43_format_set(number v) {
                            this->numberobj_43_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_44_valin_set(number v) {
                            this->numberobj_44_value_set(v);
                        }
                        
                        void numberobj_44_format_set(number v) {
                            this->numberobj_44_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_45_valin_set(number v) {
                            this->numberobj_45_value_set(v);
                        }
                        
                        void numberobj_45_format_set(number v) {
                            this->numberobj_45_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_46_valin_set(number v) {
                            this->numberobj_46_value_set(v);
                        }
                        
                        void numberobj_46_format_set(number v) {
                            this->numberobj_46_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_47_valin_set(number v) {
                            this->numberobj_47_value_set(v);
                        }
                        
                        void numberobj_47_format_set(number v) {
                            this->numberobj_47_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_48_valin_set(number v) {
                            this->numberobj_48_value_set(v);
                        }
                        
                        void numberobj_48_format_set(number v) {
                            this->numberobj_48_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_49_valin_set(number v) {
                            this->numberobj_49_value_set(v);
                        }
                        
                        void numberobj_49_format_set(number v) {
                            this->numberobj_49_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_50_valin_set(number v) {
                            this->numberobj_50_value_set(v);
                        }
                        
                        void numberobj_50_format_set(number v) {
                            this->numberobj_50_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void numberobj_51_valin_set(number v) {
                            this->numberobj_51_value_set(v);
                        }
                        
                        void numberobj_51_format_set(number v) {
                            this->numberobj_51_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void eventinlet_29_out1_bang_bang() {
                            this->numberobj_51_value_bang();
                        }
                        
                        void eventinlet_29_out1_number_set(number v) {
                            this->numberobj_51_value_set(v);
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->message_23_init();
                            this->numberobj_41_init();
                            this->message_24_init();
                            this->numberobj_42_init();
                            this->numberobj_43_init();
                            this->numberobj_44_init();
                            this->numberobj_45_init();
                            this->numberobj_46_init();
                            this->numberobj_47_init();
                            this->numberobj_48_init();
                            this->numberobj_49_init();
                            this->numberobj_50_init();
                            this->numberobj_51_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void message_23_set_set(const list& v) {
                            this->message_23_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("STUTTER/cric2r/quantize/message_obj-30"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void eventoutlet_10_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_04_out1_number_set(v);
                        }
                        
                        void numberobj_42_output_set(number v) {
                            this->eventoutlet_10_in1_number_set(v);
                        }
                        
                        void numberobj_42_value_set(number v) {
                            this->numberobj_42_value_setter(v);
                            v = this->numberobj_42_value;
                            number localvalue = v;
                        
                            if (this->numberobj_42_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric2r/quantize/number_obj-39"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_42_output_set(localvalue);
                        }
                        
                        void listlookup_04_out_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_42_value_set(converted);
                            }
                        }
                        
                        void listlookup_04_input_set(const list& v) {
                            this->listlookup_04_input = jsCreateListCopy(v);
                            list tmp = list();
                        
                            for (Index i = 0; i < v->length; i++) {
                                long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
                        
                                if (j >= 0 && (Index)(j) < this->listlookup_04_lookup->length)
                                    tmp->push(this->listlookup_04_lookup[(Index)j]);
                            }
                        
                            if ((bool)(tmp->length))
                                this->listlookup_04_out_set(tmp);
                        }
                        
                        void numberobj_43_output_set(number v) {
                            {
                                list converted = {v};
                                this->listlookup_04_input_set(converted);
                            }
                        }
                        
                        void numberobj_43_value_set(number v) {
                            this->numberobj_43_value_setter(v);
                            v = this->numberobj_43_value;
                            number localvalue = v;
                        
                            if (this->numberobj_43_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric2r/quantize/number_obj-37"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_43_output_set(localvalue);
                        }
                        
                        void minimum_04_index_set(number v) {
                            this->minimum_04_index = v;
                            this->numberobj_43_value_set(v);
                        }
                        
                        void minimum_04_out_set(number v) {
                            this->minimum_04_out = v;
                        }
                        
                        void minimum_04_input_set(const list& v) {
                            this->minimum_04_input = jsCreateListCopy(v);
                        
                            if (v->length == 1) {
                                if (v[0] < this->minimum_04_right) {
                                    this->minimum_04_index_set(0);
                                    this->minimum_04_out_set(v[0]);
                                } else {
                                    this->minimum_04_index_set(1);
                                    this->minimum_04_out_set(this->minimum_04_right);
                                }
                            } else if (v->length > 0) {
                                int idx = 0;
                                number minimum = v[0];
                        
                                for (Index i = 1; i < v->length; i++) {
                                    if (v[(Index)i] < minimum) {
                                        minimum = v[(Index)i];
                                        idx = i;
                                    }
                                }
                        
                                this->minimum_04_index_set(idx);
                                this->minimum_04_out_set(minimum);
                            }
                        }
                        
                        void message_23_out_set(const list& v) {
                            this->minimum_04_input_set(v);
                        }
                        
                        void message_23_trigger_bang() {
                            this->message_23_out_set(this->message_23_set);
                        }
                        
                        void pak_04_out_set(const list& v) {
                            this->message_23_set_set(v);
                            this->message_23_trigger_bang();
                        }
                        
                        void pak_04_in8_set(number v) {
                            this->pak_04_in8 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_04_in1;
                            array[1] = this->pak_04_in2;
                            array[2] = this->pak_04_in3;
                            array[3] = this->pak_04_in4;
                            array[4] = this->pak_04_in5;
                            array[5] = this->pak_04_in6;
                            array[6] = this->pak_04_in7;
                            array[7] = this->pak_04_in8;
                            this->pak_04_out_set(array);
                        }
                        
                        void numberobj_50_output_set(number v) {
                            this->pak_04_in8_set(v);
                        }
                        
                        void numberobj_50_value_set(number v) {
                            this->numberobj_50_value_setter(v);
                            v = this->numberobj_50_value;
                            number localvalue = v;
                        
                            if (this->numberobj_50_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric2r/quantize/number_obj-27"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_50_output_set(localvalue);
                        }
                        
                        void expr_40_out1_set(number v) {
                            this->expr_40_out1 = v;
                            this->numberobj_50_value_set(this->expr_40_out1);
                        }
                        
                        void expr_40_in1_set(number in1) {
                            this->expr_40_in1 = in1;
                            this->expr_40_out1_set(rnbo_abs(this->expr_40_in1 - this->expr_40_in2));//#map:STUTTER/cric2r/quantize/absdiff_obj-7:1
                        }
                        
                        void expr_40_in2_set(number v) {
                            this->expr_40_in2 = v;
                            this->expr_40_in1_set(this->expr_40_in1);
                        }
                        
                        void pak_04_in7_set(number v) {
                            this->pak_04_in7 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_04_in1;
                            array[1] = this->pak_04_in2;
                            array[2] = this->pak_04_in3;
                            array[3] = this->pak_04_in4;
                            array[4] = this->pak_04_in5;
                            array[5] = this->pak_04_in6;
                            array[6] = this->pak_04_in7;
                            array[7] = this->pak_04_in8;
                            this->pak_04_out_set(array);
                        }
                        
                        void numberobj_49_output_set(number v) {
                            this->pak_04_in7_set(v);
                        }
                        
                        void numberobj_49_value_set(number v) {
                            this->numberobj_49_value_setter(v);
                            v = this->numberobj_49_value;
                            number localvalue = v;
                        
                            if (this->numberobj_49_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric2r/quantize/number_obj-25"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_49_output_set(localvalue);
                        }
                        
                        void expr_39_out1_set(number v) {
                            this->expr_39_out1 = v;
                            this->numberobj_49_value_set(this->expr_39_out1);
                        }
                        
                        void expr_39_in1_set(number in1) {
                            this->expr_39_in1 = in1;
                            this->expr_39_out1_set(rnbo_abs(this->expr_39_in1 - this->expr_39_in2));//#map:STUTTER/cric2r/quantize/absdiff_obj-6:1
                        }
                        
                        void expr_39_in2_set(number v) {
                            this->expr_39_in2 = v;
                            this->expr_39_in1_set(this->expr_39_in1);
                        }
                        
                        void pak_04_in6_set(number v) {
                            this->pak_04_in6 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_04_in1;
                            array[1] = this->pak_04_in2;
                            array[2] = this->pak_04_in3;
                            array[3] = this->pak_04_in4;
                            array[4] = this->pak_04_in5;
                            array[5] = this->pak_04_in6;
                            array[6] = this->pak_04_in7;
                            array[7] = this->pak_04_in8;
                            this->pak_04_out_set(array);
                        }
                        
                        void numberobj_48_output_set(number v) {
                            this->pak_04_in6_set(v);
                        }
                        
                        void numberobj_48_value_set(number v) {
                            this->numberobj_48_value_setter(v);
                            v = this->numberobj_48_value;
                            number localvalue = v;
                        
                            if (this->numberobj_48_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric2r/quantize/number_obj-23"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_48_output_set(localvalue);
                        }
                        
                        void expr_38_out1_set(number v) {
                            this->expr_38_out1 = v;
                            this->numberobj_48_value_set(this->expr_38_out1);
                        }
                        
                        void expr_38_in1_set(number in1) {
                            this->expr_38_in1 = in1;
                            this->expr_38_out1_set(rnbo_abs(this->expr_38_in1 - this->expr_38_in2));//#map:STUTTER/cric2r/quantize/absdiff_obj-5:1
                        }
                        
                        void expr_38_in2_set(number v) {
                            this->expr_38_in2 = v;
                            this->expr_38_in1_set(this->expr_38_in1);
                        }
                        
                        void pak_04_in5_set(number v) {
                            this->pak_04_in5 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_04_in1;
                            array[1] = this->pak_04_in2;
                            array[2] = this->pak_04_in3;
                            array[3] = this->pak_04_in4;
                            array[4] = this->pak_04_in5;
                            array[5] = this->pak_04_in6;
                            array[6] = this->pak_04_in7;
                            array[7] = this->pak_04_in8;
                            this->pak_04_out_set(array);
                        }
                        
                        void numberobj_47_output_set(number v) {
                            this->pak_04_in5_set(v);
                        }
                        
                        void numberobj_47_value_set(number v) {
                            this->numberobj_47_value_setter(v);
                            v = this->numberobj_47_value;
                            number localvalue = v;
                        
                            if (this->numberobj_47_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric2r/quantize/number_obj-21"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_47_output_set(localvalue);
                        }
                        
                        void expr_37_out1_set(number v) {
                            this->expr_37_out1 = v;
                            this->numberobj_47_value_set(this->expr_37_out1);
                        }
                        
                        void expr_37_in1_set(number in1) {
                            this->expr_37_in1 = in1;
                            this->expr_37_out1_set(rnbo_abs(this->expr_37_in1 - this->expr_37_in2));//#map:STUTTER/cric2r/quantize/absdiff_obj-4:1
                        }
                        
                        void expr_37_in2_set(number v) {
                            this->expr_37_in2 = v;
                            this->expr_37_in1_set(this->expr_37_in1);
                        }
                        
                        void pak_04_in4_set(number v) {
                            this->pak_04_in4 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_04_in1;
                            array[1] = this->pak_04_in2;
                            array[2] = this->pak_04_in3;
                            array[3] = this->pak_04_in4;
                            array[4] = this->pak_04_in5;
                            array[5] = this->pak_04_in6;
                            array[6] = this->pak_04_in7;
                            array[7] = this->pak_04_in8;
                            this->pak_04_out_set(array);
                        }
                        
                        void numberobj_46_output_set(number v) {
                            this->pak_04_in4_set(v);
                        }
                        
                        void numberobj_46_value_set(number v) {
                            this->numberobj_46_value_setter(v);
                            v = this->numberobj_46_value;
                            number localvalue = v;
                        
                            if (this->numberobj_46_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric2r/quantize/number_obj-19"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_46_output_set(localvalue);
                        }
                        
                        void expr_36_out1_set(number v) {
                            this->expr_36_out1 = v;
                            this->numberobj_46_value_set(this->expr_36_out1);
                        }
                        
                        void expr_36_in1_set(number in1) {
                            this->expr_36_in1 = in1;
                            this->expr_36_out1_set(rnbo_abs(this->expr_36_in1 - this->expr_36_in2));//#map:STUTTER/cric2r/quantize/absdiff_obj-3:1
                        }
                        
                        void expr_36_in2_set(number v) {
                            this->expr_36_in2 = v;
                            this->expr_36_in1_set(this->expr_36_in1);
                        }
                        
                        void pak_04_in3_set(number v) {
                            this->pak_04_in3 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_04_in1;
                            array[1] = this->pak_04_in2;
                            array[2] = this->pak_04_in3;
                            array[3] = this->pak_04_in4;
                            array[4] = this->pak_04_in5;
                            array[5] = this->pak_04_in6;
                            array[6] = this->pak_04_in7;
                            array[7] = this->pak_04_in8;
                            this->pak_04_out_set(array);
                        }
                        
                        void numberobj_45_output_set(number v) {
                            this->pak_04_in3_set(v);
                        }
                        
                        void numberobj_45_value_set(number v) {
                            this->numberobj_45_value_setter(v);
                            v = this->numberobj_45_value;
                            number localvalue = v;
                        
                            if (this->numberobj_45_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric2r/quantize/number_obj-17"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_45_output_set(localvalue);
                        }
                        
                        void expr_35_out1_set(number v) {
                            this->expr_35_out1 = v;
                            this->numberobj_45_value_set(this->expr_35_out1);
                        }
                        
                        void expr_35_in1_set(number in1) {
                            this->expr_35_in1 = in1;
                            this->expr_35_out1_set(rnbo_abs(this->expr_35_in1 - this->expr_35_in2));//#map:STUTTER/cric2r/quantize/absdiff_obj-2:1
                        }
                        
                        void expr_35_in2_set(number v) {
                            this->expr_35_in2 = v;
                            this->expr_35_in1_set(this->expr_35_in1);
                        }
                        
                        void pak_04_in2_set(number v) {
                            this->pak_04_in2 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_04_in1;
                            array[1] = this->pak_04_in2;
                            array[2] = this->pak_04_in3;
                            array[3] = this->pak_04_in4;
                            array[4] = this->pak_04_in5;
                            array[5] = this->pak_04_in6;
                            array[6] = this->pak_04_in7;
                            array[7] = this->pak_04_in8;
                            this->pak_04_out_set(array);
                        }
                        
                        void numberobj_44_output_set(number v) {
                            this->pak_04_in2_set(v);
                        }
                        
                        void numberobj_44_value_set(number v) {
                            this->numberobj_44_value_setter(v);
                            v = this->numberobj_44_value;
                            number localvalue = v;
                        
                            if (this->numberobj_44_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric2r/quantize/number_obj-15"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_44_output_set(localvalue);
                        }
                        
                        void expr_34_out1_set(number v) {
                            this->expr_34_out1 = v;
                            this->numberobj_44_value_set(this->expr_34_out1);
                        }
                        
                        void expr_34_in1_set(number in1) {
                            this->expr_34_in1 = in1;
                            this->expr_34_out1_set(rnbo_abs(this->expr_34_in1 - this->expr_34_in2));//#map:STUTTER/cric2r/quantize/absdiff_obj-1:1
                        }
                        
                        void expr_34_in2_set(number v) {
                            this->expr_34_in2 = v;
                            this->expr_34_in1_set(this->expr_34_in1);
                        }
                        
                        void pak_04_in1_set(number v) {
                            this->pak_04_in1 = v;
                            list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                            array[0] = this->pak_04_in1;
                            array[1] = this->pak_04_in2;
                            array[2] = this->pak_04_in3;
                            array[3] = this->pak_04_in4;
                            array[4] = this->pak_04_in5;
                            array[5] = this->pak_04_in6;
                            array[6] = this->pak_04_in7;
                            array[7] = this->pak_04_in8;
                            this->pak_04_out_set(array);
                        }
                        
                        void numberobj_41_output_set(number v) {
                            this->pak_04_in1_set(v);
                        }
                        
                        void numberobj_41_value_set(number v) {
                            this->numberobj_41_value_setter(v);
                            v = this->numberobj_41_value;
                            number localvalue = v;
                        
                            if (this->numberobj_41_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric2r/quantize/number_obj-13"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_41_output_set(localvalue);
                        }
                        
                        void expr_33_out1_set(number v) {
                            this->expr_33_out1 = v;
                            this->numberobj_41_value_set(this->expr_33_out1);
                        }
                        
                        void expr_33_in1_set(number in1) {
                            this->expr_33_in1 = in1;
                            this->expr_33_out1_set(rnbo_abs(this->expr_33_in1 - this->expr_33_in2));//#map:STUTTER/cric2r/quantize/absdiff_obj-143:1
                        }
                        
                        void expr_33_in2_set(number v) {
                            this->expr_33_in2 = v;
                            this->expr_33_in1_set(this->expr_33_in1);
                        }
                        
                        void numberobj_51_output_set(number v) {
                            this->expr_40_in2_set(v);
                            this->expr_39_in2_set(v);
                            this->expr_38_in2_set(v);
                            this->expr_37_in2_set(v);
                            this->expr_36_in2_set(v);
                            this->expr_35_in2_set(v);
                            this->expr_34_in2_set(v);
                            this->expr_33_in2_set(v);
                        }
                        
                        void numberobj_51_value_set(number v) {
                            this->numberobj_51_value_setter(v);
                            v = this->numberobj_51_value;
                            number localvalue = v;
                        
                            if (this->numberobj_51_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric2r/quantize/number_obj-11"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_51_output_set(localvalue);
                        }
                        
                        void eventinlet_29_out1_list_set(const list& v) {
                            {
                                number converted = (v->length > 0 ? v[0] : 0);
                                this->numberobj_51_value_set(converted);
                            }
                        }
                        
                        void message_24_set_set(const list& v) {
                            this->message_24_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("STUTTER/cric2r/quantize/message_obj-138"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void listlookup_04_lookup_set(const list& v) {
                            this->listlookup_04_lookup = jsCreateListCopy(v);
                        }
                        
                        void unpack_04_out8_set(number v) {
                            this->unpack_04_out8 = v;
                            this->expr_40_in1_set(v);
                        }
                        
                        void unpack_04_out7_set(number v) {
                            this->unpack_04_out7 = v;
                            this->expr_39_in1_set(v);
                        }
                        
                        void unpack_04_out6_set(number v) {
                            this->unpack_04_out6 = v;
                            this->expr_38_in1_set(v);
                        }
                        
                        void unpack_04_out5_set(number v) {
                            this->unpack_04_out5 = v;
                            this->expr_37_in1_set(v);
                        }
                        
                        void unpack_04_out4_set(number v) {
                            this->unpack_04_out4 = v;
                            this->expr_36_in1_set(v);
                        }
                        
                        void unpack_04_out3_set(number v) {
                            this->unpack_04_out3 = v;
                            this->expr_35_in1_set(v);
                        }
                        
                        void unpack_04_out2_set(number v) {
                            this->unpack_04_out2 = v;
                            this->expr_34_in1_set(v);
                        }
                        
                        void unpack_04_out1_set(number v) {
                            this->unpack_04_out1 = v;
                            this->expr_33_in1_set(v);
                        }
                        
                        void unpack_04_input_list_set(const list& v) {
                            if (v->length > 7)
                                this->unpack_04_out8_set(v[7]);
                        
                            if (v->length > 6)
                                this->unpack_04_out7_set(v[6]);
                        
                            if (v->length > 5)
                                this->unpack_04_out6_set(v[5]);
                        
                            if (v->length > 4)
                                this->unpack_04_out5_set(v[4]);
                        
                            if (v->length > 3)
                                this->unpack_04_out4_set(v[3]);
                        
                            if (v->length > 2)
                                this->unpack_04_out3_set(v[2]);
                        
                            if (v->length > 1)
                                this->unpack_04_out2_set(v[1]);
                        
                            if (v->length > 0)
                                this->unpack_04_out1_set(v[0]);
                        }
                        
                        void message_24_out_set(const list& v) {
                            this->listlookup_04_lookup_set(v);
                            this->unpack_04_input_list_set(v);
                        }
                        
                        void message_24_trigger_bang() {
                            this->message_24_out_set(this->message_24_set);
                        }
                        
                        void eventinlet_28_out1_list_set(const list& v) {
                            this->message_24_set_set(v);
                            this->message_24_trigger_bang();
                        }
                        
                        void message_24_set_bang() {
                            list v = this->message_24_set;
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("STUTTER/cric2r/quantize/message_obj-138"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void eventinlet_28_out1_bang_bang() {
                            this->message_24_set_bang();
                            this->message_24_trigger_bang();
                        }
                        
                        void eventinlet_28_out1_number_set(number v) {
                            {
                                list converted = {v};
                                this->message_24_set_set(converted);
                            }
                        
                            this->message_24_trigger_bang();
                        }
                        
                        void numberobj_51_value_bang() {
                            number v = this->numberobj_51_value;
                            number localvalue = v;
                        
                            if (this->numberobj_51_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("STUTTER/cric2r/quantize/number_obj-11"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_51_output_set(localvalue);
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_41_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_41_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_41_value = localvalue;
                        }
                        
                        void numberobj_42_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_42_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_42_value = localvalue;
                        }
                        
                        void numberobj_43_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_43_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_43_value = localvalue;
                        }
                        
                        void numberobj_44_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_44_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_44_value = localvalue;
                        }
                        
                        void numberobj_45_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_45_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_45_value = localvalue;
                        }
                        
                        void numberobj_46_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_46_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_46_value = localvalue;
                        }
                        
                        void numberobj_47_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_47_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_47_value = localvalue;
                        }
                        
                        void numberobj_48_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_48_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_48_value = localvalue;
                        }
                        
                        void numberobj_49_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_49_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_49_value = localvalue;
                        }
                        
                        void numberobj_50_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_50_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_50_value = localvalue;
                        }
                        
                        void numberobj_51_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_51_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_51_value = localvalue;
                        }
                        
                        void message_23_init() {
                            this->message_23_set_set({2000, 1000, 500, 250, 125, 62.5, 31.25, 15.625});
                        }
                        
                        void numberobj_41_init() {
                            this->numberobj_41_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric2r/quantize/number_obj-13"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_41_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_41_value;
                        }
                        
                        void numberobj_41_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_41_value_set(preset["value"]);
                        }
                        
                        void message_24_init() {
                            this->message_24_set_set({2000, 1000, 500, 250, 125, 62.5, 31.25, 15.625});
                        }
                        
                        void numberobj_42_init() {
                            this->numberobj_42_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric2r/quantize/number_obj-39"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_42_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_42_value;
                        }
                        
                        void numberobj_42_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_42_value_set(preset["value"]);
                        }
                        
                        void numberobj_43_init() {
                            this->numberobj_43_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric2r/quantize/number_obj-37"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_43_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_43_value;
                        }
                        
                        void numberobj_43_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_43_value_set(preset["value"]);
                        }
                        
                        void numberobj_44_init() {
                            this->numberobj_44_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric2r/quantize/number_obj-15"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_44_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_44_value;
                        }
                        
                        void numberobj_44_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_44_value_set(preset["value"]);
                        }
                        
                        void numberobj_45_init() {
                            this->numberobj_45_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric2r/quantize/number_obj-17"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_45_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_45_value;
                        }
                        
                        void numberobj_45_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_45_value_set(preset["value"]);
                        }
                        
                        void numberobj_46_init() {
                            this->numberobj_46_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric2r/quantize/number_obj-19"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_46_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_46_value;
                        }
                        
                        void numberobj_46_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_46_value_set(preset["value"]);
                        }
                        
                        void numberobj_47_init() {
                            this->numberobj_47_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric2r/quantize/number_obj-21"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_47_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_47_value;
                        }
                        
                        void numberobj_47_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_47_value_set(preset["value"]);
                        }
                        
                        void numberobj_48_init() {
                            this->numberobj_48_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric2r/quantize/number_obj-23"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_48_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_48_value;
                        }
                        
                        void numberobj_48_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_48_value_set(preset["value"]);
                        }
                        
                        void numberobj_49_init() {
                            this->numberobj_49_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric2r/quantize/number_obj-25"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_49_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_49_value;
                        }
                        
                        void numberobj_49_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_49_value_set(preset["value"]);
                        }
                        
                        void numberobj_50_init() {
                            this->numberobj_50_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric2r/quantize/number_obj-27"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_50_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_50_value;
                        }
                        
                        void numberobj_50_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_50_value_set(preset["value"]);
                        }
                        
                        void numberobj_51_init() {
                            this->numberobj_51_currentFormat = 6;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("STUTTER/cric2r/quantize/number_obj-11"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_51_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_51_value;
                        }
                        
                        void numberobj_51_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_51_value_set(preset["value"]);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            minimum_04_right = 0;
                            minimum_04_out = 0;
                            minimum_04_index = 0;
                            pak_04_in1 = 0;
                            pak_04_in2 = 0;
                            pak_04_in3 = 0;
                            pak_04_in4 = 0;
                            pak_04_in5 = 0;
                            pak_04_in6 = 0;
                            pak_04_in7 = 0;
                            pak_04_in8 = 0;
                            numberobj_41_value = 0;
                            numberobj_41_value_setter(numberobj_41_value);
                            expr_33_in1 = 0;
                            expr_33_in2 = 0;
                            expr_33_out1 = 0;
                            unpack_04_out1 = 0;
                            unpack_04_out2 = 0;
                            unpack_04_out3 = 0;
                            unpack_04_out4 = 0;
                            unpack_04_out5 = 0;
                            unpack_04_out6 = 0;
                            unpack_04_out7 = 0;
                            unpack_04_out8 = 0;
                            numberobj_42_value = 0;
                            numberobj_42_value_setter(numberobj_42_value);
                            numberobj_43_value = 0;
                            numberobj_43_value_setter(numberobj_43_value);
                            numberobj_44_value = 0;
                            numberobj_44_value_setter(numberobj_44_value);
                            expr_34_in1 = 0;
                            expr_34_in2 = 0;
                            expr_34_out1 = 0;
                            numberobj_45_value = 0;
                            numberobj_45_value_setter(numberobj_45_value);
                            expr_35_in1 = 0;
                            expr_35_in2 = 0;
                            expr_35_out1 = 0;
                            numberobj_46_value = 0;
                            numberobj_46_value_setter(numberobj_46_value);
                            expr_36_in1 = 0;
                            expr_36_in2 = 0;
                            expr_36_out1 = 0;
                            numberobj_47_value = 0;
                            numberobj_47_value_setter(numberobj_47_value);
                            expr_37_in1 = 0;
                            expr_37_in2 = 0;
                            expr_37_out1 = 0;
                            numberobj_48_value = 0;
                            numberobj_48_value_setter(numberobj_48_value);
                            expr_38_in1 = 0;
                            expr_38_in2 = 0;
                            expr_38_out1 = 0;
                            numberobj_49_value = 0;
                            numberobj_49_value_setter(numberobj_49_value);
                            expr_39_in1 = 0;
                            expr_39_in2 = 0;
                            expr_39_out1 = 0;
                            numberobj_50_value = 0;
                            numberobj_50_value_setter(numberobj_50_value);
                            expr_40_in1 = 0;
                            expr_40_in2 = 0;
                            expr_40_out1 = 0;
                            numberobj_51_value = 0;
                            numberobj_51_value_setter(numberobj_51_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_41_currentFormat = 6;
                            numberobj_41_lastValue = 0;
                            numberobj_42_currentFormat = 6;
                            numberobj_42_lastValue = 0;
                            numberobj_43_currentFormat = 6;
                            numberobj_43_lastValue = 0;
                            numberobj_44_currentFormat = 6;
                            numberobj_44_lastValue = 0;
                            numberobj_45_currentFormat = 6;
                            numberobj_45_lastValue = 0;
                            numberobj_46_currentFormat = 6;
                            numberobj_46_lastValue = 0;
                            numberobj_47_currentFormat = 6;
                            numberobj_47_lastValue = 0;
                            numberobj_48_currentFormat = 6;
                            numberobj_48_lastValue = 0;
                            numberobj_49_currentFormat = 6;
                            numberobj_49_lastValue = 0;
                            numberobj_50_currentFormat = 6;
                            numberobj_50_lastValue = 0;
                            numberobj_51_currentFormat = 6;
                            numberobj_51_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            list minimum_04_input;
                            number minimum_04_right;
                            number minimum_04_out;
                            number minimum_04_index;
                            list message_23_set;
                            number pak_04_in1;
                            number pak_04_in2;
                            number pak_04_in3;
                            number pak_04_in4;
                            number pak_04_in5;
                            number pak_04_in6;
                            number pak_04_in7;
                            number pak_04_in8;
                            number numberobj_41_value;
                            number expr_33_in1;
                            number expr_33_in2;
                            number expr_33_out1;
                            number unpack_04_out1;
                            number unpack_04_out2;
                            number unpack_04_out3;
                            number unpack_04_out4;
                            number unpack_04_out5;
                            number unpack_04_out6;
                            number unpack_04_out7;
                            number unpack_04_out8;
                            list message_24_set;
                            number numberobj_42_value;
                            number numberobj_43_value;
                            list listlookup_04_input;
                            list listlookup_04_lookup;
                            number numberobj_44_value;
                            number expr_34_in1;
                            number expr_34_in2;
                            number expr_34_out1;
                            number numberobj_45_value;
                            number expr_35_in1;
                            number expr_35_in2;
                            number expr_35_out1;
                            number numberobj_46_value;
                            number expr_36_in1;
                            number expr_36_in2;
                            number expr_36_out1;
                            number numberobj_47_value;
                            number expr_37_in1;
                            number expr_37_in2;
                            number expr_37_out1;
                            number numberobj_48_value;
                            number expr_38_in1;
                            number expr_38_in2;
                            number expr_38_out1;
                            number numberobj_49_value;
                            number expr_39_in1;
                            number expr_39_in2;
                            number expr_39_out1;
                            number numberobj_50_value;
                            number expr_40_in1;
                            number expr_40_in2;
                            number expr_40_out1;
                            number numberobj_51_value;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Int numberobj_41_currentFormat;
                            number numberobj_41_lastValue;
                            Int numberobj_42_currentFormat;
                            number numberobj_42_lastValue;
                            Int numberobj_43_currentFormat;
                            number numberobj_43_lastValue;
                            Int numberobj_44_currentFormat;
                            number numberobj_44_lastValue;
                            Int numberobj_45_currentFormat;
                            number numberobj_45_lastValue;
                            Int numberobj_46_currentFormat;
                            number numberobj_46_lastValue;
                            Int numberobj_47_currentFormat;
                            number numberobj_47_lastValue;
                            Int numberobj_48_currentFormat;
                            number numberobj_48_lastValue;
                            Int numberobj_49_currentFormat;
                            number numberobj_49_lastValue;
                            Int numberobj_50_currentFormat;
                            number numberobj_50_lastValue;
                            Int numberobj_51_currentFormat;
                            number numberobj_51_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_25()
            {
            }
            
            ~RNBOSubpatcher_25()
            {
                delete this->p_04;
            }
            
            virtual RNBOSubpatcher_29* getPatcher() const {
                return static_cast<RNBOSubpatcher_29 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, 892732297, false);
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number minimum(number x, number y) {
                return (y < x ? y : x);
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return globalrandom() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
            
                this->groove_04_perform(
                    this->groove_04_rate_auto,
                    this->groove_04_begin,
                    this->groove_04_end,
                    out1,
                    this->dummyBuffer,
                    n
                );
            
                this->p_04_perform(n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->groove_04_dspsetup(forceDSPSetup);
                this->p_04->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_04 = new RNBOSubpatcher_19();
                this->p_04->setEngineAndPatcher(this->getEngine(), this);
                this->p_04->initialize();
                this->p_04->setParameterOffset(this->getParameterOffset(this->p_04));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_04->getPreset(getSubState(getSubState(preset, "__sps"), "quantize"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        this->p_04->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_04->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_04->getNumParameters())
                            this->p_04->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_04)
                    return 0;
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_04->getNumParameters())
                        return this->p_04->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case 892732297:
                    {
                    this->loadmess_04_startupbang_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/cric2r/message_obj-38") == objectId)
                        this->message_25_listin_number_set(payload);
            
                    if (TAG("STUTTER/cric2r/message_obj-41") == objectId)
                        this->message_26_listin_number_set(payload);
            
                    if (TAG("STUTTER/cric2r/message_obj-5") == objectId)
                        this->message_27_listin_number_set(payload);
            
                    if (TAG("STUTTER/cric2r/message_obj-7") == objectId)
                        this->message_28_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("STUTTER/cric2r/number_obj-26") == objectId)
                        this->numberobj_52_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("STUTTER/cric2r/number_obj-26") == objectId)
                        this->numberobj_52_format_set(payload);
            
                    break;
                    }
                }
            
                this->p_04->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/cric2r/message_obj-38") == objectId)
                        this->message_25_listin_list_set(payload);
            
                    if (TAG("STUTTER/cric2r/message_obj-41") == objectId)
                        this->message_26_listin_list_set(payload);
            
                    if (TAG("STUTTER/cric2r/message_obj-5") == objectId)
                        this->message_27_listin_list_set(payload);
            
                    if (TAG("STUTTER/cric2r/message_obj-7") == objectId)
                        this->message_28_listin_list_set(payload);
            
                    break;
                    }
                }
            
                this->p_04->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("bangin"):
                    {
                    if (TAG("STUTTER/cric2r/button_obj-44") == objectId)
                        this->button_06_bangin_bang();
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/cric2r/message_obj-38") == objectId)
                        this->message_25_listin_bang_bang();
            
                    if (TAG("STUTTER/cric2r/message_obj-41") == objectId)
                        this->message_26_listin_bang_bang();
            
                    if (TAG("STUTTER/cric2r/message_obj-5") == objectId)
                        this->message_27_listin_bang_bang();
            
                    if (TAG("STUTTER/cric2r/message_obj-7") == objectId)
                        this->message_28_listin_bang_bang();
            
                    break;
                    }
                case TAG("startupbang"):
                    {
                    if (TAG("STUTTER/cric2r/loadmess_obj-25") == objectId)
                        this->loadmess_04_startupbang_bang();
            
                    break;
                    }
                }
            
                this->p_04->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("STUTTER/cric2r/button_obj-44"):
                    {
                    return "STUTTER/cric2r/button_obj-44";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("STUTTER/cric2r/message_obj-38"):
                    {
                    return "STUTTER/cric2r/message_obj-38";
                    }
                case TAG("STUTTER/cric2r/message_obj-41"):
                    {
                    return "STUTTER/cric2r/message_obj-41";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("STUTTER/cric2r/number_obj-26"):
                    {
                    return "STUTTER/cric2r/number_obj-26";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("STUTTER/cric2r/message_obj-5"):
                    {
                    return "STUTTER/cric2r/message_obj-5";
                    }
                case TAG("STUTTER/cric2r/message_obj-7"):
                    {
                    return "STUTTER/cric2r/message_obj-7";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("startupbang"):
                    {
                    return "startupbang";
                    }
                case TAG("STUTTER/cric2r/loadmess_obj-25"):
                    {
                    return "STUTTER/cric2r/loadmess_obj-25";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                auto subpatchResult_0 = this->p_04->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 1) {
                    this->groove_04_buffer = new Float32Buffer(this->getPatcher()->getPatcher()->buff2);
                }
            
                this->p_04->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->groove_04_buffer = new Float32Buffer(this->getPatcher()->getPatcher()->buff2);
            }
            
            protected:
            
            void button_06_bangin_bang() {
                this->button_06_bangval_bang();
            }
            
            void message_25_listin_list_set(const list& v) {
                this->message_25_set_set(v);
            }
            
            void message_25_listin_number_set(number v) {
                this->message_25_set_set(v);
            }
            
            void message_25_listin_bang_bang() {
                this->message_25_trigger_bang();
            }
            
            void eventinlet_30_out1_bang_bang() {
                this->switchobj_07_onoff_bang();
                this->switchobj_06_onoff_bang();
            }
            
            void eventinlet_30_out1_list_set(const list& v) {
                {
                    if (v->length > 2)
                        this->switchobj_07_in2_number_set(v[2]);
            
                    if (v->length > 1)
                        this->switchobj_07_in1_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->switchobj_07_onoff_set(converted);
                }
            
                {
                    if (v->length > 2)
                        this->switchobj_06_in2_number_set(v[2]);
            
                    if (v->length > 1)
                        this->switchobj_06_in1_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->switchobj_06_onoff_set(converted);
                }
            }
            
            void eventinlet_31_out1_number_set(number ) {}
            
            void eventinlet_31_out1_list_set(const list& ) {}
            
            void message_26_listin_list_set(const list& v) {
                this->message_26_set_set(v);
            }
            
            void message_26_listin_number_set(number v) {
                this->message_26_set_set(v);
            }
            
            void message_26_listin_bang_bang() {
                this->message_26_trigger_bang();
            }
            
            void eventinlet_32_out1_bang_bang() {
                this->switchobj_06_in1_bang_bang();
            }
            
            void eventinlet_32_out1_number_set(number v) {
                this->switchobj_06_in1_number_set(v);
            }
            
            void eventinlet_33_out1_bang_bang() {
                this->switchobj_07_in1_bang_bang();
            }
            
            void eventinlet_33_out1_number_set(number v) {
                this->switchobj_07_in1_number_set(v);
            }
            
            void eventinlet_34_out1_bang_bang() {
                this->scale_04_outlow_bang();
            }
            
            void eventinlet_34_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_04_outlow_set(converted);
                }
            }
            
            void eventinlet_35_out1_bang_bang() {
                this->scale_04_outhigh_bang();
            }
            
            void eventinlet_35_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->scale_04_outhigh_set(converted);
                }
            }
            
            void loadmess_04_startupbang_bang() {
                this->loadmess_04_message_bang();
            }
            
            void numberobj_52_valin_set(number v) {
                this->numberobj_52_value_set(v);
            }
            
            void numberobj_52_format_set(number v) {
                this->numberobj_52_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_36_out1_bang_bang() {
                this->p_04_in1_bang_bang();
            }
            
            void eventinlet_36_out1_number_set(number v) {
                this->p_04_in1_number_set(v);
            }
            
            void eventinlet_37_out1_bang_bang() {
                this->switchobj_08_onoff_bang();
            }
            
            void eventinlet_37_out1_number_set(number v) {
                this->switchobj_08_onoff_set(v);
            }
            
            void eventinlet_38_out1_number_set(number v) {
                RNBO_UNUSED(v);
                this->button_06_bangval_bang();
            }
            
            void eventinlet_38_out1_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->button_06_bangval_bang();
            }
            
            void message_27_listin_list_set(const list& v) {
                this->message_27_set_set(v);
            }
            
            void message_27_listin_number_set(number v) {
                this->message_27_set_set(v);
            }
            
            void message_27_listin_bang_bang() {
                this->message_27_trigger_bang();
            }
            
            void message_28_listin_list_set(const list& v) {
                this->message_28_set_set(v);
            }
            
            void message_28_listin_number_set(number v) {
                this->message_28_set_set(v);
            }
            
            void message_28_listin_bang_bang() {
                this->message_28_trigger_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->message_25_init();
                this->message_26_init();
                this->random_06_nz_init();
                this->numberobj_52_init();
                this->message_27_init();
                this->message_28_init();
                this->p_04->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_04->startup();
                this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
            }
            
            void allocateDataRefs() {
                this->p_04->allocateDataRefs();
                this->groove_04_buffer = this->groove_04_buffer->allocateIfNeeded();
            }
            
            void gate_06_onoff_set(number v) {
                this->gate_06_onoff = v;
            }
            
            void groove_04_rate_auto_set(number v) {
                this->groove_04_rate_auto = v;
            }
            
            void gate_06_out1_number_set(number v) {
                this->gate_06_out1_number = v;
                this->groove_04_rate_auto_set(v);
            }
            
            void message_26_set_set(const list& v) {
                this->message_26_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/cric2r/message_obj-41"),
                    v,
                    this->_currentTime
                );
            }
            
            void expr_42_out1_set(number v) {
                this->expr_42_out1 = v;
            
                {
                    list converted = {this->expr_42_out1};
                    this->message_26_set_set(converted);
                }
            }
            
            void expr_42_in1_set(number in1) {
                this->expr_42_in1 = in1;
                this->expr_42_out1_set(this->expr_42_in1 + this->expr_42_in2);//#map:STUTTER/cric2r/+_obj-35:1
            }
            
            void expr_42_in2_set(number v) {
                this->expr_42_in2 = v;
                this->expr_42_in1_set(this->expr_42_in1);
            }
            
            void switchobj_08_out_number_set(number v) {
                this->expr_42_in2_set(v);
            }
            
            void switchobj_08_in2_number_set(number v) {
                if (this->switchobj_08_onoff == 2) {
                    this->switchobj_08_out_number_set(v);
                }
            }
            
            void p_04_out1_number_set(number v) {
                this->switchobj_08_in2_number_set(v);
            }
            
            void p_04_in2_list_set(const list& v) {
                this->p_04->updateTime(this->_currentTime);
                this->p_04->eventinlet_29_out1_list_set(v);
            }
            
            void switchobj_08_out_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_42_in2_set(converted);
                }
            }
            
            void switchobj_08_in1_list_set(const list& v) {
                if (this->switchobj_08_onoff == 1) {
                    this->switchobj_08_out_list_set(v);
                }
            }
            
            void scale_04_out_set(const list& v) {
                this->scale_04_out = jsCreateListCopy(v);
                this->p_04_in2_list_set(v);
                this->switchobj_08_in1_list_set(v);
            }
            
            void scale_04_input_set(const list& v) {
                this->scale_04_input = jsCreateListCopy(v);
                list tmp = {};
            
                for (Index i = 0; i < v->length; i++) {
                    tmp->push(this->scale(
                        v[(Index)i],
                        this->scale_04_inlow,
                        this->scale_04_inhigh,
                        this->scale_04_outlow,
                        this->scale_04_outhigh,
                        this->scale_04_power
                    ));
                }
            
                this->scale_04_out_set(tmp);
            }
            
            void random_06_result_set(number v) {
                {
                    list converted = {v};
                    this->scale_04_input_set(converted);
                }
            }
            
            void random_06_trigger_bang() {
                this->random_06_result_set(rnbo_abs(this->random_06_nz_next()) * this->random_06_limit);
            }
            
            void trigger_04_out4_bang() {
                this->random_06_trigger_bang();
            }
            
            void groove_04_end_set(number v) {
                this->groove_04_end = v;
            }
            
            void switchobj_07_out_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->groove_04_end_set(converted);
                }
            }
            
            void switchobj_07_in2_list_set(const list& v) {
                if (this->switchobj_07_onoff == 2) {
                    this->switchobj_07_out_list_set(v);
                }
            }
            
            void message_26_out_set(const list& v) {
                this->switchobj_07_in2_list_set(v);
            }
            
            void message_26_trigger_bang() {
                this->message_26_out_set(this->message_26_set);
            }
            
            void trigger_04_out3_bang() {
                this->message_26_trigger_bang();
            }
            
            void groove_04_begin_set(number v) {
                this->groove_04_begin = v;
            }
            
            void switchobj_06_out_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->groove_04_begin_set(converted);
                }
            }
            
            void switchobj_06_in2_list_set(const list& v) {
                if (this->switchobj_06_onoff == 2) {
                    this->switchobj_06_out_list_set(v);
                }
            }
            
            void message_25_out_set(const list& v) {
                this->switchobj_06_in2_list_set(v);
            }
            
            void message_25_trigger_bang() {
                this->message_25_out_set(this->message_25_set);
            }
            
            void trigger_04_out2_bang() {
                this->message_25_trigger_bang();
            }
            
            void groove_04_rate_bang_bang() {
                this->groove_04_changeIncomingInSamples = this->sampleOffsetIntoNextAudioBuffer + 1;
                this->groove_04_incomingChange = 1;
            }
            
            void trigger_04_out1_bang() {
                this->groove_04_rate_bang_bang();
            }
            
            void trigger_04_input_number_set(number v) {
                RNBO_UNUSED(v);
                this->trigger_04_out4_bang();
                this->trigger_04_out3_bang();
                this->trigger_04_out2_bang();
                this->trigger_04_out1_bang();
            }
            
            void gate_06_out2_number_set(number v) {
                this->gate_06_out2_number = v;
                this->trigger_04_input_number_set(v);
            }
            
            void gate_06_input_number_set(number v) {
                if (this->gate_06_onoff == 1)
                    this->gate_06_out1_number_set(v);
                else if (this->gate_06_onoff == 2)
                    this->gate_06_out2_number_set(v);
            }
            
            void message_27_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_06_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_06_onoff_set(converted);
                }
            }
            
            void message_27_trigger_bang() {
                this->message_27_out_set(this->message_27_set);
            }
            
            void select_10_match1_bang() {
                this->message_27_trigger_bang();
            }
            
            void message_28_out_set(const list& v) {
                {
                    if (v->length > 1)
                        this->gate_06_input_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gate_06_onoff_set(converted);
                }
            }
            
            void message_28_trigger_bang() {
                this->message_28_out_set(this->message_28_set);
            }
            
            void select_10_match2_bang() {
                this->message_28_trigger_bang();
            }
            
            void select_10_nomatch_number_set(number ) {}
            
            void select_10_input_number_set(number v) {
                if (v == this->select_10_test1)
                    this->select_10_match1_bang();
                else if (v == this->select_10_test2)
                    this->select_10_match2_bang();
                else
                    this->select_10_nomatch_number_set(v);
            }
            
            void receive_14_output_number_set(number v) {
                this->receive_14_output_number = v;
                this->select_10_input_number_set(v);
            }
            
            void switchobj_07_onoff_set(number v) {
                this->switchobj_07_onoff = v;
            }
            
            void switchobj_06_onoff_set(number v) {
                this->switchobj_06_onoff = v;
            }
            
            void eventinlet_30_out1_number_set(number v) {
                this->switchobj_07_onoff_set(v);
                this->switchobj_06_onoff_set(v);
            }
            
            void gate_06_out1_bang_bang() {
                this->groove_04_rate_bang_bang();
            }
            
            void trigger_04_input_bang_bang() {
                this->trigger_04_out4_bang();
                this->trigger_04_out3_bang();
                this->trigger_04_out2_bang();
                this->trigger_04_out1_bang();
            }
            
            void gate_06_out2_bang_bang() {
                this->trigger_04_input_bang_bang();
            }
            
            void gate_06_input_bang_bang() {
                if (this->gate_06_onoff == 1)
                    this->gate_06_out1_bang_bang();
                else if (this->gate_06_onoff == 2)
                    this->gate_06_out2_bang_bang();
            }
            
            void button_06_output_bang() {
                this->gate_06_input_bang_bang();
            }
            
            void button_06_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("STUTTER/cric2r/button_obj-44"), this->_currentTime);;
                this->button_06_output_bang();
            }
            
            void eventinlet_38_out1_bang_bang() {
                this->button_06_bangval_bang();
            }
            
            void eventinlet_31_out1_bang_bang() {}
            
            void switchobj_07_in1_list_set(const list& v) {
                if (this->switchobj_07_onoff == 1) {
                    this->switchobj_07_out_list_set(v);
                }
            }
            
            void eventinlet_33_out1_list_set(const list& v) {
                this->switchobj_07_in1_list_set(v);
            }
            
            void switchobj_06_in1_list_set(const list& v) {
                if (this->switchobj_06_onoff == 1) {
                    this->switchobj_06_out_list_set(v);
                }
            }
            
            void eventinlet_32_out1_list_set(const list& v) {
                this->switchobj_06_in1_list_set(v);
            }
            
            void switchobj_08_onoff_set(number v) {
                this->switchobj_08_onoff = v;
            }
            
            void switchobj_08_in1_number_set(number v) {
                if (this->switchobj_08_onoff == 1) {
                    this->switchobj_08_out_number_set(v);
                }
            }
            
            void eventinlet_37_out1_list_set(const list& v) {
                {
                    if (v->length > 2)
                        this->switchobj_08_in2_number_set(v[2]);
            
                    if (v->length > 1)
                        this->switchobj_08_in1_number_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->switchobj_08_onoff_set(converted);
                }
            }
            
            void p_04_in1_list_set(const list& v) {
                this->p_04->updateTime(this->_currentTime);
                this->p_04->eventinlet_28_out1_list_set(v);
            }
            
            void eventinlet_36_out1_list_set(const list& v) {
                this->p_04_in1_list_set(v);
            }
            
            void scale_04_outlow_set(number v) {
                this->scale_04_outlow = v;
            }
            
            void eventinlet_34_out1_number_set(number v) {
                this->scale_04_outlow_set(v);
            }
            
            void scale_04_outhigh_set(number v) {
                this->scale_04_outhigh = v;
            }
            
            void eventinlet_35_out1_number_set(number v) {
                this->scale_04_outhigh_set(v);
            }
            
            void message_25_set_set(const list& v) {
                this->message_25_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/cric2r/message_obj-38"),
                    v,
                    this->_currentTime
                );
            }
            
            void wrap_04_out1_set(number v) {
                this->expr_42_in1_set(v);
            
                {
                    list converted = {v};
                    this->message_25_set_set(converted);
                }
            }
            
            void wrap_04_x_set(number x) {
                this->wrap_04_x = x;
                auto high = this->wrap_04_high;
                auto low = this->wrap_04_low;
                number lo;
                number hi;
            
                if (low == high) {
                    this->wrap_04_out1_set(low);
                    return;
                }
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi) {
                    this->wrap_04_out1_set(x);
                    return;
                }
            
                if (range <= 0.000000001) {
                    this->wrap_04_out1_set(lo);
                    return;
                }
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi) {
                    this->wrap_04_out1_set(result - range);
                    return;
                } else {
                    this->wrap_04_out1_set(result);
                    return;
                }
            }
            
            void expr_41_out1_set(number v) {
                this->expr_41_out1 = v;
                this->wrap_04_x_set(this->expr_41_out1);
            }
            
            void expr_41_in1_set(number in1) {
                this->expr_41_in1 = in1;
                this->expr_41_out1_set(this->expr_41_in1 - this->expr_41_in2);//#map:STUTTER/cric2r/-_obj-82:1
            }
            
            void receive_13_output_number_set(number v) {
                this->receive_13_output_number = v;
                this->expr_41_in1_set(v);
            }
            
            void switchobj_07_out_number_set(number v) {
                this->groove_04_end_set(v);
            }
            
            void switchobj_07_onoff_bang() {
                this->switchobj_07_out_number_set(this->switchobj_07_onoff);
            }
            
            void switchobj_06_out_number_set(number v) {
                this->groove_04_begin_set(v);
            }
            
            void switchobj_06_onoff_bang() {
                this->switchobj_06_out_number_set(this->switchobj_06_onoff);
            }
            
            void switchobj_07_in1_number_set(number v) {
                if (this->switchobj_07_onoff == 1) {
                    this->switchobj_07_out_number_set(v);
                }
            }
            
            void switchobj_07_in2_number_set(number v) {
                if (this->switchobj_07_onoff == 2) {
                    this->switchobj_07_out_number_set(v);
                }
            }
            
            void switchobj_06_in1_number_set(number v) {
                if (this->switchobj_06_onoff == 1) {
                    this->switchobj_06_out_number_set(v);
                }
            }
            
            void switchobj_06_in2_number_set(number v) {
                if (this->switchobj_06_onoff == 2) {
                    this->switchobj_06_out_number_set(v);
                }
            }
            
            void switchobj_06_out_bang_bang() {}
            
            void switchobj_06_in1_bang_bang() {
                if (this->switchobj_06_onoff == 1) {
                    this->switchobj_06_out_bang_bang();
                }
            }
            
            void switchobj_07_out_bang_bang() {}
            
            void switchobj_07_in1_bang_bang() {
                if (this->switchobj_07_onoff == 1) {
                    this->switchobj_07_out_bang_bang();
                }
            }
            
            void scale_04_outlow_bang() {}
            
            void scale_04_outhigh_bang() {}
            
            void groove_04_crossfade_set(number v) {
                this->groove_04_crossfade = v;
                this->groove_04_crossfadeInSamples = this->mstosamps(v);
            }
            
            void numberobj_52_output_set(number v) {
                this->groove_04_crossfade_set(v);
            }
            
            void numberobj_52_value_set(number v) {
                this->numberobj_52_value_setter(v);
                v = this->numberobj_52_value;
                number localvalue = v;
            
                if (this->numberobj_52_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/cric2r/number_obj-26"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_52_output_set(localvalue);
            }
            
            void loadmess_04_message_bang() {
                list v = this->loadmess_04_message;
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_52_value_set(converted);
                }
            }
            
            void p_04_in1_bang_bang() {
                this->p_04->updateTime(this->_currentTime);
                this->p_04->eventinlet_28_out1_bang_bang();
            }
            
            void p_04_in1_number_set(number v) {
                this->p_04->updateTime(this->_currentTime);
                this->p_04->eventinlet_28_out1_number_set(v);
            }
            
            void switchobj_08_onoff_bang() {
                this->switchobj_08_out_number_set(this->switchobj_08_onoff);
            }
            
            void message_27_set_set(const list& v) {
                this->message_27_set = jsCreateListCopy(v);
                this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/cric2r/message_obj-5"), v, this->_currentTime);
            }
            
            void message_28_set_set(const list& v) {
                this->message_28_set = jsCreateListCopy(v);
                this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/cric2r/message_obj-7"), v, this->_currentTime);
            }
            
            void groove_04_perform(
                number rate_auto,
                number begin,
                number end,
                SampleValue * out1,
                SampleValue * sync,
                Index n
            ) {
                RNBO_UNUSED(out1);
                auto __groove_04_crossfade = this->groove_04_crossfade;
                auto __groove_04_loop = this->groove_04_loop;
                auto __groove_04_playStatus = this->groove_04_playStatus;
                auto __groove_04_readIndex = this->groove_04_readIndex;
                auto __groove_04_incomingChange = this->groove_04_incomingChange;
                auto __groove_04_changeIncomingInSamples = this->groove_04_changeIncomingInSamples;
                auto __groove_04_buffer = this->groove_04_buffer;
                SampleArray<1> out = {out1};
                SampleIndex bufferLength = (SampleIndex)(__groove_04_buffer->getSize());
                Index i = 0;
            
                if (bufferLength > 1) {
                    auto effectiveChannels = this->minimum(__groove_04_buffer->getChannels(), 1);
                    number srMult = 0.001 * __groove_04_buffer->getSampleRate();
                    number srInv = (number)1 / this->samplerate();
                    number rateMult = __groove_04_buffer->getSampleRate() * srInv;
            
                    for (; i < n; i++) {
                        Index channel = 0;
                        number offset = 0;
                        number loopMin = begin * srMult;
                        loopMin = (loopMin > bufferLength - 1 ? bufferLength - 1 : (loopMin < 0 ? 0 : loopMin));
                        number loopMax = (end < 0 ? bufferLength : end * srMult);
                        loopMax = (loopMax > bufferLength ? bufferLength : (loopMax < 0 ? 0 : loopMax));
            
                        if (loopMin >= loopMax) {
                            offset = loopMax;
                            loopMax = bufferLength;
                            loopMin -= offset;
                        }
            
                        number loopLength = loopMax - loopMin;
                        number currentRate = rate_auto * rateMult;
                        number currentSync = 0;
            
                        if (__groove_04_changeIncomingInSamples > 0) {
                            __groove_04_changeIncomingInSamples--;
            
                            if (__groove_04_changeIncomingInSamples <= 0) {
                                if (__groove_04_incomingChange == 1) {
                                    if (currentRate < 0) {
                                        __groove_04_readIndex = loopMax - 1;
                                    } else {
                                        __groove_04_readIndex = loopMin;
                                    }
            
                                    __groove_04_playStatus = 1;
                                } else if (__groove_04_incomingChange == 0) {
                                    __groove_04_playStatus = 0;
                                }
            
                                __groove_04_incomingChange = 2;
                            }
                        }
            
                        if (loopLength > 0) {
                            if (currentRate != 0) {
                                if (__groove_04_playStatus == 1) {
                                    if ((bool)(__groove_04_loop)) {
                                        while (__groove_04_readIndex < loopMin) {
                                            __groove_04_readIndex += loopLength;
                                        }
            
                                        while (__groove_04_readIndex >= loopMax) {
                                            __groove_04_readIndex -= loopLength;
                                        }
                                    } else if (__groove_04_readIndex >= loopMax || __groove_04_readIndex < loopMin) {
                                        __groove_04_playStatus = 0;
                                        break;
                                    }
            
                                    for (; channel < effectiveChannels; channel++) {
                                        number outSample = (currentRate == 1 ? this->groove_04_getSample((Index)(channel), trunc(__groove_04_readIndex), offset, bufferLength) : this->groove_04_interpolatedSample(
                                            (Index)(channel),
                                            __groove_04_readIndex,
                                            loopMax,
                                            loopLength,
                                            offset,
                                            bufferLength
                                        ));
            
                                        if (__groove_04_crossfade > 0) {
                                            out[(Index)channel][(Index)i] = this->groove_04_crossfadedSample(
                                                outSample,
                                                __groove_04_readIndex,
                                                (Index)(channel),
                                                currentRate,
                                                loopMin,
                                                loopMax,
                                                loopLength,
                                                offset,
                                                bufferLength
                                            );
                                        } else {
                                            out[(Index)channel][(Index)i] = outSample;
                                        }
                                    }
            
                                    __groove_04_readIndex += currentRate;
                                }
                            }
                        }
            
                        for (; channel < 1; channel++) {
                            if (__groove_04_playStatus <= 0)
                                sync[(Index)i] = 0;
            
                            out[(Index)channel][(Index)i] = 0;
                        }
                    }
                }
            
                for (; i < n; i++) {
                    if (__groove_04_playStatus <= 0)
                        sync[(Index)i] = 0;
            
                    for (number channel = 0; channel < 1; channel++) {
                        out[(Index)channel][(Index)i] = 0;
                    }
                }
            
                this->groove_04_changeIncomingInSamples = __groove_04_changeIncomingInSamples;
                this->groove_04_incomingChange = __groove_04_incomingChange;
                this->groove_04_readIndex = __groove_04_readIndex;
                this->groove_04_playStatus = __groove_04_playStatus;
            }
            
            void p_04_perform(Index n) {
                // subpatcher: quantize
                this->p_04->process(nullptr, 0, nullptr, 0, n);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void random_06_limit_setter(number v) {
                if (v >= 0)
                    this->random_06_limit = v;
            }
            
            void numberobj_52_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_52_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_52_value = localvalue;
            }
            
            number groove_04_getSample(
                Index channel,
                SampleIndex index,
                SampleIndex offset,
                SampleIndex bufferLength
            ) {
                if (offset > 0) {
                    index += offset;
            
                    if (index >= bufferLength)
                        index -= bufferLength;
                }
            
                return this->groove_04_buffer->getSample(channel, index);
            }
            
            number groove_04_interpolatedSample(
                Index channel,
                number index,
                SampleIndex end,
                SampleIndex length,
                SampleIndex offset,
                SampleIndex bufferLength
            ) {
                SampleIndex index1 = (SampleIndex)(trunc(index));
                number i_x = index - index1;
                number i_1px = 1. + i_x;
                number i_1mx = 1. - i_x;
                number i_2mx = 2. - i_x;
                number i_a = i_1mx * i_2mx;
                number i_b = i_1px * i_x;
                number i_p1 = -.1666667 * i_a * i_x;
                number i_p2 = .5 * i_1px * i_a;
                number i_p3 = .5 * i_b * i_2mx;
                number i_p4 = -.1666667 * i_b * i_1mx;
                SampleIndex index2 = (SampleIndex)(index1 + 1);
            
                if (index2 >= end)
                    index2 -= length;
            
                SampleIndex index3 = (SampleIndex)(index1 + 2);
            
                if (index3 >= end)
                    index3 -= length;
            
                SampleIndex index4 = (SampleIndex)(index1 + 3);
            
                if (index4 >= end)
                    index4 -= length;
            
                return this->groove_04_getSample(channel, index1, offset, bufferLength) * i_p1 + this->groove_04_getSample(channel, index2, offset, bufferLength) * i_p2 + this->groove_04_getSample(channel, index3, offset, bufferLength) * i_p3 + this->groove_04_getSample(channel, index4, offset, bufferLength) * i_p4;
            }
            
            number groove_04_crossfadedSample(
                SampleValue out,
                number readIndex,
                Index channel,
                number rate,
                number loopMin,
                number loopMax,
                number loopLength,
                number offset,
                number bufferLength
            ) {
                auto crossFadeStart1 = this->maximum(loopMin - this->groove_04_crossfadeInSamples, 0);
                auto crossFadeEnd1 = this->minimum(crossFadeStart1 + this->groove_04_crossfadeInSamples, bufferLength);
                number crossFadeStart2 = crossFadeStart1 + loopLength;
                auto crossFadeEnd2 = this->minimum(crossFadeEnd1 + loopLength, bufferLength);
                number crossFadeLength = crossFadeEnd2 - crossFadeStart2;
            
                if (crossFadeLength > 0) {
                    crossFadeEnd1 = crossFadeStart1 + crossFadeLength;
                    number diff = -1;
                    number addFactor = 0;
            
                    if (readIndex >= crossFadeStart2) {
                        diff = readIndex - crossFadeStart2;
                        addFactor = -1;
                    } else if (readIndex < crossFadeEnd1) {
                        diff = crossFadeEnd1 - readIndex + loopMax - crossFadeStart2;
                        addFactor = 1;
                    }
            
                    if (diff >= 0) {
                        number out2ReadIndex = readIndex + loopLength * addFactor;
                        number out2 = (rate == 1 ? this->groove_04_getSample(channel, trunc(out2ReadIndex), offset, bufferLength) : this->groove_04_interpolatedSample(channel, out2ReadIndex, loopMax, loopLength, offset, bufferLength));
                        number out2Factor = diff / crossFadeLength;
                        number out1Factor = 1 - out2Factor;
                        return out * out1Factor + out2 * out2Factor;
                    }
                }
            
                return out;
            }
            
            void groove_04_dspsetup(bool force) {
                if ((bool)(this->groove_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->groove_04_crossfadeInSamples = this->mstosamps(this->groove_04_crossfade);
                this->groove_04_setupDone = true;
            }
            
            void message_25_init() {
                this->message_25_set_set({6032.6875});
            }
            
            void message_26_init() {
                this->message_26_set_set({6032.6875});
            }
            
            void random_06_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->random_06_nz_state
                );
            }
            
            void random_06_nz_init() {
                this->random_06_nz_reset();
            }
            
            void random_06_nz_seed(number v) {
                xoshiro_reset(v, this->random_06_nz_state);
            }
            
            number random_06_nz_next() {
                return xoshiro_next(this->random_06_nz_state);
            }
            
            void numberobj_52_init() {
                this->numberobj_52_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/cric2r/number_obj-26"), 1, this->_currentTime);
            }
            
            void numberobj_52_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_52_value;
            }
            
            void numberobj_52_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_52_value_set(preset["value"]);
            }
            
            void message_27_init() {
                this->message_27_set_set({1});
            }
            
            void message_28_init() {
                this->message_28_set_set({2});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                groove_04_rate_auto = 1;
                groove_04_begin = 0;
                groove_04_end = -1;
                groove_04_loop = 1;
                groove_04_crossfade = 0;
                gate_06_onoff = 0;
                gate_06_out1_number = 0;
                gate_06_out2_number = 0;
                switchobj_06_onoff = 0;
                wrap_04_x = 0;
                wrap_04_low = 0;
                wrap_04_high = 30000;
                expr_41_in1 = 0;
                expr_41_in2 = 10;
                expr_41_out1 = 0;
                receive_13_output_number = 0;
                switchobj_07_onoff = 0;
                scale_04_inlow = 0;
                scale_04_inhigh = 4999;
                scale_04_outlow = 0;
                scale_04_outhigh = 1;
                scale_04_power = 1;
                random_06_limit = 5000;
                random_06_limit_setter(random_06_limit);
                random_06_seed = 0;
                expr_42_in1 = 0;
                expr_42_in2 = 0;
                expr_42_out1 = 0;
                loadmess_04_message = { 3 };
                numberobj_52_value = 0;
                numberobj_52_value_setter(numberobj_52_value);
                switchobj_08_onoff = 0;
                p_04_target = 0;
                select_10_test1 = 0;
                select_10_test2 = 1;
                receive_14_output_number = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                groove_04_readIndex = 0;
                groove_04_playStatus = 0;
                groove_04_changeIncomingInSamples = 0;
                groove_04_incomingChange = 2;
                groove_04_crossfadeInSamples = 0;
                groove_04_setupDone = false;
                numberobj_52_currentFormat = 6;
                numberobj_52_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number groove_04_rate_auto;
                number groove_04_begin;
                number groove_04_end;
                number groove_04_loop;
                number groove_04_crossfade;
                number gate_06_onoff;
                number gate_06_out1_number;
                list gate_06_out1_list;
                number gate_06_out2_number;
                list gate_06_out2_list;
                list message_25_set;
                number switchobj_06_onoff;
                number wrap_04_x;
                number wrap_04_low;
                number wrap_04_high;
                number expr_41_in1;
                number expr_41_in2;
                number expr_41_out1;
                number receive_13_output_number;
                list receive_13_output_list;
                list message_26_set;
                number switchobj_07_onoff;
                list scale_04_input;
                number scale_04_inlow;
                number scale_04_inhigh;
                number scale_04_outlow;
                number scale_04_outhigh;
                number scale_04_power;
                list scale_04_out;
                number random_06_limit;
                number random_06_seed;
                number expr_42_in1;
                number expr_42_in2;
                number expr_42_out1;
                list loadmess_04_message;
                number numberobj_52_value;
                number switchobj_08_onoff;
                number p_04_target;
                list message_27_set;
                number select_10_test1;
                number select_10_test2;
                number receive_14_output_number;
                list receive_14_output_list;
                list message_28_set;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float32BufferRef groove_04_buffer;
                number groove_04_readIndex;
                Index groove_04_playStatus;
                SampleIndex groove_04_changeIncomingInSamples;
                Int groove_04_incomingChange;
                SampleIndex groove_04_crossfadeInSamples;
                bool groove_04_setupDone;
                UInt random_06_nz_state[4] = { };
                Int numberobj_52_currentFormat;
                number numberobj_52_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_19* p_04;
            
    };
    
    class RNBOSubpatcher_26 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_29;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_26()
            {
            }
            
            ~RNBOSubpatcher_26()
            {
            }
            
            virtual RNBOSubpatcher_29* getPatcher() const {
                return static_cast<RNBOSubpatcher_29 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, 892732297, false);
                getEngine()->flushClockEvents(this, -871642103, false);
            }
            
            MillisecondTime currenttime() {
                return this->_currentTime;
            }
            
            number tempo() {
                return this->getTopLevelPatcher()->globaltransport_getTempo(this->currenttime());
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                this->updateTime(time);
                this->tempo_01_onTempoChanged(tempo);
            }
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void processBBUEvent(MillisecondTime , number , number , number ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case 892732297:
                    {
                    this->loadmess_05_startupbang_bang();
                    break;
                    }
                case -871642103:
                    {
                    this->loadbang_01_startupbang_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("STUTTER/stutter-withtempo/number_obj-10") == objectId)
                        this->numberobj_53_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-18") == objectId)
                        this->numberobj_54_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-12") == objectId)
                        this->numberobj_55_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-7") == objectId)
                        this->numberobj_56_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-104") == objectId)
                        this->numberobj_57_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-84") == objectId)
                        this->numberobj_58_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-102") == objectId)
                        this->numberobj_59_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-23") == objectId)
                        this->numberobj_60_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-107") == objectId)
                        this->numberobj_61_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-81") == objectId)
                        this->numberobj_62_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-19") == objectId)
                        this->numberobj_63_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-26") == objectId)
                        this->numberobj_64_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-98") == objectId)
                        this->numberobj_65_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-79") == objectId)
                        this->numberobj_66_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-43") == objectId)
                        this->numberobj_67_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-110") == objectId)
                        this->numberobj_68_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-29") == objectId)
                        this->numberobj_69_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-76") == objectId)
                        this->numberobj_70_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-46") == objectId)
                        this->numberobj_71_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-113") == objectId)
                        this->numberobj_72_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-32") == objectId)
                        this->numberobj_73_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-73") == objectId)
                        this->numberobj_74_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-49") == objectId)
                        this->numberobj_75_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-116") == objectId)
                        this->numberobj_76_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-35") == objectId)
                        this->numberobj_77_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-70") == objectId)
                        this->numberobj_78_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-52") == objectId)
                        this->numberobj_79_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-38") == objectId)
                        this->numberobj_80_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-119") == objectId)
                        this->numberobj_81_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-67") == objectId)
                        this->numberobj_82_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-162") == objectId)
                        this->numberobj_83_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-41") == objectId)
                        this->numberobj_84_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-64") == objectId)
                        this->numberobj_85_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-122") == objectId)
                        this->numberobj_86_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-55") == objectId)
                        this->numberobj_87_valin_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-58") == objectId)
                        this->numberobj_88_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("STUTTER/stutter-withtempo/number_obj-10") == objectId)
                        this->numberobj_53_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-18") == objectId)
                        this->numberobj_54_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-12") == objectId)
                        this->numberobj_55_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-7") == objectId)
                        this->numberobj_56_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-104") == objectId)
                        this->numberobj_57_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-84") == objectId)
                        this->numberobj_58_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-102") == objectId)
                        this->numberobj_59_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-23") == objectId)
                        this->numberobj_60_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-107") == objectId)
                        this->numberobj_61_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-81") == objectId)
                        this->numberobj_62_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-19") == objectId)
                        this->numberobj_63_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-26") == objectId)
                        this->numberobj_64_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-98") == objectId)
                        this->numberobj_65_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-79") == objectId)
                        this->numberobj_66_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-43") == objectId)
                        this->numberobj_67_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-110") == objectId)
                        this->numberobj_68_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-29") == objectId)
                        this->numberobj_69_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-76") == objectId)
                        this->numberobj_70_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-46") == objectId)
                        this->numberobj_71_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-113") == objectId)
                        this->numberobj_72_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-32") == objectId)
                        this->numberobj_73_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-73") == objectId)
                        this->numberobj_74_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-49") == objectId)
                        this->numberobj_75_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-116") == objectId)
                        this->numberobj_76_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-35") == objectId)
                        this->numberobj_77_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-70") == objectId)
                        this->numberobj_78_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-52") == objectId)
                        this->numberobj_79_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-38") == objectId)
                        this->numberobj_80_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-119") == objectId)
                        this->numberobj_81_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-67") == objectId)
                        this->numberobj_82_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-162") == objectId)
                        this->numberobj_83_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-41") == objectId)
                        this->numberobj_84_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-64") == objectId)
                        this->numberobj_85_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-122") == objectId)
                        this->numberobj_86_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-55") == objectId)
                        this->numberobj_87_format_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/number_obj-58") == objectId)
                        this->numberobj_88_format_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/stutter-withtempo/message_obj-153") == objectId)
                        this->message_29_listin_number_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/message_obj-155") == objectId)
                        this->message_30_listin_number_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/message_obj-157") == objectId)
                        this->message_31_listin_number_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/message_obj-159") == objectId)
                        this->message_32_listin_number_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/stutter-withtempo/message_obj-153") == objectId)
                        this->message_29_listin_list_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/message_obj-155") == objectId)
                        this->message_30_listin_list_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/message_obj-157") == objectId)
                        this->message_31_listin_list_set(payload);
            
                    if (TAG("STUTTER/stutter-withtempo/message_obj-159") == objectId)
                        this->message_32_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("startupbang"):
                    {
                    if (TAG("STUTTER/stutter-withtempo/loadmess_obj-13") == objectId)
                        this->loadmess_05_startupbang_bang();
            
                    if (TAG("STUTTER/stutter-withtempo/loadbang_obj-145") == objectId)
                        this->loadbang_01_startupbang_bang();
            
                    break;
                    }
                case TAG("bangin"):
                    {
                    if (TAG("STUTTER/stutter-withtempo/button_obj-2") == objectId)
                        this->button_07_bangin_bang();
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/stutter-withtempo/message_obj-153") == objectId)
                        this->message_29_listin_bang_bang();
            
                    if (TAG("STUTTER/stutter-withtempo/message_obj-155") == objectId)
                        this->message_30_listin_bang_bang();
            
                    if (TAG("STUTTER/stutter-withtempo/message_obj-157") == objectId)
                        this->message_31_listin_bang_bang();
            
                    if (TAG("STUTTER/stutter-withtempo/message_obj-159") == objectId)
                        this->message_32_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-10"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-10";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-18"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-18";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-12"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-12";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-7"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-7";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-104"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-104";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-84"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-84";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("STUTTER/stutter-withtempo/button_obj-2"):
                    {
                    return "STUTTER/stutter-withtempo/button_obj-2";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-102"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-102";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-23"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-23";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-107"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-107";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-81"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-81";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-19"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-19";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-26"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-26";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-98"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-98";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-79"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-79";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-43"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-43";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-110"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-110";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-29"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-29";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-76"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-76";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-46"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-46";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-113"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-113";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-32"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-32";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-73"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-73";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-49"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-49";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-116"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-116";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-35"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-35";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-70"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-70";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-52"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-52";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-38"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-38";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-119"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-119";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-67"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-67";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-162"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-162";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("STUTTER/stutter-withtempo/message_obj-153"):
                    {
                    return "STUTTER/stutter-withtempo/message_obj-153";
                    }
                case TAG("STUTTER/stutter-withtempo/message_obj-155"):
                    {
                    return "STUTTER/stutter-withtempo/message_obj-155";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-41"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-41";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-64"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-64";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-122"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-122";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-55"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-55";
                    }
                case TAG("STUTTER/stutter-withtempo/message_obj-157"):
                    {
                    return "STUTTER/stutter-withtempo/message_obj-157";
                    }
                case TAG("STUTTER/stutter-withtempo/message_obj-159"):
                    {
                    return "STUTTER/stutter-withtempo/message_obj-159";
                    }
                case TAG("STUTTER/stutter-withtempo/number_obj-58"):
                    {
                    return "STUTTER/stutter-withtempo/number_obj-58";
                    }
                case TAG("startupbang"):
                    {
                    return "startupbang";
                    }
                case TAG("STUTTER/stutter-withtempo/loadmess_obj-13"):
                    {
                    return "STUTTER/stutter-withtempo/loadmess_obj-13";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("STUTTER/stutter-withtempo/loadbang_obj-145"):
                    {
                    return "STUTTER/stutter-withtempo/loadbang_obj-145";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void loadmess_05_startupbang_bang() {
                this->loadmess_05_message_bang();
            }
            
            void numberobj_53_valin_set(number v) {
                this->numberobj_53_value_set(v);
            }
            
            void numberobj_53_format_set(number v) {
                this->numberobj_53_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_54_valin_set(number v) {
                this->numberobj_54_value_set(v);
            }
            
            void numberobj_54_format_set(number v) {
                this->numberobj_54_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_55_valin_set(number v) {
                this->numberobj_55_value_set(v);
            }
            
            void numberobj_55_format_set(number v) {
                this->numberobj_55_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_56_valin_set(number v) {
                this->numberobj_56_value_set(v);
            }
            
            void numberobj_56_format_set(number v) {
                this->numberobj_56_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_57_valin_set(number v) {
                this->numberobj_57_value_set(v);
            }
            
            void numberobj_57_format_set(number v) {
                this->numberobj_57_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_58_valin_set(number v) {
                this->numberobj_58_value_set(v);
            }
            
            void numberobj_58_format_set(number v) {
                this->numberobj_58_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void button_07_bangin_bang() {
                this->button_07_bangval_bang();
            }
            
            void numberobj_59_valin_set(number v) {
                this->numberobj_59_value_set(v);
            }
            
            void numberobj_59_format_set(number v) {
                this->numberobj_59_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_60_valin_set(number v) {
                this->numberobj_60_value_set(v);
            }
            
            void numberobj_60_format_set(number v) {
                this->numberobj_60_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void loadbang_01_startupbang_bang() {
                this->loadbang_01_output_bang();
            }
            
            void numberobj_61_valin_set(number v) {
                this->numberobj_61_value_set(v);
            }
            
            void numberobj_61_format_set(number v) {
                this->numberobj_61_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_62_valin_set(number v) {
                this->numberobj_62_value_set(v);
            }
            
            void numberobj_62_format_set(number v) {
                this->numberobj_62_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_63_valin_set(number v) {
                this->numberobj_63_value_set(v);
            }
            
            void numberobj_63_format_set(number v) {
                this->numberobj_63_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_64_valin_set(number v) {
                this->numberobj_64_value_set(v);
            }
            
            void numberobj_64_format_set(number v) {
                this->numberobj_64_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_65_valin_set(number v) {
                this->numberobj_65_value_set(v);
            }
            
            void numberobj_65_format_set(number v) {
                this->numberobj_65_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_66_valin_set(number v) {
                this->numberobj_66_value_set(v);
            }
            
            void numberobj_66_format_set(number v) {
                this->numberobj_66_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_67_valin_set(number v) {
                this->numberobj_67_value_set(v);
            }
            
            void numberobj_67_format_set(number v) {
                this->numberobj_67_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_68_valin_set(number v) {
                this->numberobj_68_value_set(v);
            }
            
            void numberobj_68_format_set(number v) {
                this->numberobj_68_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_69_valin_set(number v) {
                this->numberobj_69_value_set(v);
            }
            
            void numberobj_69_format_set(number v) {
                this->numberobj_69_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_70_valin_set(number v) {
                this->numberobj_70_value_set(v);
            }
            
            void numberobj_70_format_set(number v) {
                this->numberobj_70_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_71_valin_set(number v) {
                this->numberobj_71_value_set(v);
            }
            
            void numberobj_71_format_set(number v) {
                this->numberobj_71_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_72_valin_set(number v) {
                this->numberobj_72_value_set(v);
            }
            
            void numberobj_72_format_set(number v) {
                this->numberobj_72_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_73_valin_set(number v) {
                this->numberobj_73_value_set(v);
            }
            
            void numberobj_73_format_set(number v) {
                this->numberobj_73_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_74_valin_set(number v) {
                this->numberobj_74_value_set(v);
            }
            
            void numberobj_74_format_set(number v) {
                this->numberobj_74_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_75_valin_set(number v) {
                this->numberobj_75_value_set(v);
            }
            
            void numberobj_75_format_set(number v) {
                this->numberobj_75_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_76_valin_set(number v) {
                this->numberobj_76_value_set(v);
            }
            
            void numberobj_76_format_set(number v) {
                this->numberobj_76_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_77_valin_set(number v) {
                this->numberobj_77_value_set(v);
            }
            
            void numberobj_77_format_set(number v) {
                this->numberobj_77_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_78_valin_set(number v) {
                this->numberobj_78_value_set(v);
            }
            
            void numberobj_78_format_set(number v) {
                this->numberobj_78_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_79_valin_set(number v) {
                this->numberobj_79_value_set(v);
            }
            
            void numberobj_79_format_set(number v) {
                this->numberobj_79_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_80_valin_set(number v) {
                this->numberobj_80_value_set(v);
            }
            
            void numberobj_80_format_set(number v) {
                this->numberobj_80_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_81_valin_set(number v) {
                this->numberobj_81_value_set(v);
            }
            
            void numberobj_81_format_set(number v) {
                this->numberobj_81_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_82_valin_set(number v) {
                this->numberobj_82_value_set(v);
            }
            
            void numberobj_82_format_set(number v) {
                this->numberobj_82_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_83_valin_set(number v) {
                this->numberobj_83_value_set(v);
            }
            
            void numberobj_83_format_set(number v) {
                this->numberobj_83_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_29_listin_list_set(const list& v) {
                this->message_29_set_set(v);
            }
            
            void message_29_listin_number_set(number v) {
                this->message_29_set_set(v);
            }
            
            void message_29_listin_bang_bang() {
                this->message_29_trigger_bang();
            }
            
            void message_30_listin_list_set(const list& v) {
                this->message_30_set_set(v);
            }
            
            void message_30_listin_number_set(number v) {
                this->message_30_set_set(v);
            }
            
            void message_30_listin_bang_bang() {
                this->message_30_trigger_bang();
            }
            
            void numberobj_84_valin_set(number v) {
                this->numberobj_84_value_set(v);
            }
            
            void numberobj_84_format_set(number v) {
                this->numberobj_84_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_85_valin_set(number v) {
                this->numberobj_85_value_set(v);
            }
            
            void numberobj_85_format_set(number v) {
                this->numberobj_85_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_86_valin_set(number v) {
                this->numberobj_86_value_set(v);
            }
            
            void numberobj_86_format_set(number v) {
                this->numberobj_86_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_87_valin_set(number v) {
                this->numberobj_87_value_set(v);
            }
            
            void numberobj_87_format_set(number v) {
                this->numberobj_87_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_31_listin_list_set(const list& v) {
                this->message_31_set_set(v);
            }
            
            void message_31_listin_number_set(number v) {
                this->message_31_set_set(v);
            }
            
            void message_31_listin_bang_bang() {
                this->message_31_trigger_bang();
            }
            
            void message_32_listin_list_set(const list& v) {
                this->message_32_set_set(v);
            }
            
            void message_32_listin_number_set(number v) {
                this->message_32_set_set(v);
            }
            
            void message_32_listin_bang_bang() {
                this->message_32_trigger_bang();
            }
            
            void numberobj_88_valin_set(number v) {
                this->numberobj_88_value_set(v);
            }
            
            void numberobj_88_format_set(number v) {
                this->numberobj_88_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->numberobj_53_init();
                this->numberobj_54_init();
                this->numberobj_55_init();
                this->numberobj_56_init();
                this->numberobj_57_init();
                this->numberobj_58_init();
                this->numberobj_59_init();
                this->numberobj_60_init();
                this->numberobj_61_init();
                this->numberobj_62_init();
                this->numberobj_63_init();
                this->numberobj_64_init();
                this->numberobj_65_init();
                this->numberobj_66_init();
                this->numberobj_67_init();
                this->numberobj_68_init();
                this->numberobj_69_init();
                this->numberobj_70_init();
                this->numberobj_71_init();
                this->numberobj_72_init();
                this->numberobj_73_init();
                this->numberobj_74_init();
                this->numberobj_75_init();
                this->numberobj_76_init();
                this->numberobj_77_init();
                this->numberobj_78_init();
                this->numberobj_79_init();
                this->numberobj_80_init();
                this->numberobj_81_init();
                this->numberobj_82_init();
                this->numberobj_83_init();
                this->message_29_init();
                this->message_30_init();
                this->numberobj_84_init();
                this->numberobj_85_init();
                this->numberobj_86_init();
                this->numberobj_87_init();
                this->message_31_init();
                this->message_32_init();
                this->numberobj_88_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
                this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
            }
            
            void allocateDataRefs() {}
            
            void switchobj_09_onoff_set(number v) {
                this->switchobj_09_onoff = v;
            }
            
            void trigger_05_out2_set(number v) {
                this->switchobj_09_onoff_set(v);
            }
            
            void eventoutlet_11_in1_list_set(const list& v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_11_out1_list_set((list)v);
            }
            
            void switchobj_09_out_list_set(const list& v) {
                this->eventoutlet_11_in1_list_set(v);
            }
            
            void switchobj_09_in2_list_set(const list& v) {
                if (this->switchobj_09_onoff == 2) {
                    this->switchobj_09_out_list_set(v);
                }
            }
            
            void pak_07_out_set(const list& v) {
                this->switchobj_09_in2_list_set(v);
            }
            
            void pak_07_in8_set(number v) {
                this->pak_07_in8 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_07_in1;
                array[1] = this->pak_07_in2;
                array[2] = this->pak_07_in3;
                array[3] = this->pak_07_in4;
                array[4] = this->pak_07_in5;
                array[5] = this->pak_07_in6;
                array[6] = this->pak_07_in7;
                array[7] = this->pak_07_in8;
                this->pak_07_out_set(array);
            }
            
            void numberobj_88_output_set(number v) {
                this->pak_07_in8_set(v);
            }
            
            void numberobj_88_value_set(number v) {
                this->numberobj_88_value_setter(v);
                v = this->numberobj_88_value;
                number localvalue = v;
            
                if (this->numberobj_88_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-58"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_88_output_set(localvalue);
            }
            
            void expr_75_out1_set(number v) {
                this->expr_75_out1 = v;
                this->numberobj_88_value_set(this->expr_75_out1);
            }
            
            void expr_75_in1_set(number in1) {
                this->expr_75_in1 = in1;
                this->expr_75_out1_set(this->expr_75_in1 + this->expr_75_in2);//#map:STUTTER/stutter-withtempo/+_obj-56:1
            }
            
            void expr_75_in2_set(number v) {
                this->expr_75_in2 = v;
                this->expr_75_in1_set(this->expr_75_in1);
            }
            
            void expr_76_out1_set(number v) {
                this->expr_76_out1 = v;
                this->expr_75_in2_set(this->expr_76_out1);
            }
            
            void expr_76_in1_set(number in1) {
                this->expr_76_in1 = in1;
            
                this->expr_76_out1_set(
                    (this->expr_76_in2 == 0 ? 0 : (this->expr_76_in2 == 0. ? 0. : this->expr_76_in1 / this->expr_76_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-59:1
            }
            
            void switchobj_09_in3_list_set(const list& v) {
                if (this->switchobj_09_onoff == 3) {
                    this->switchobj_09_out_list_set(v);
                }
            }
            
            void pak_08_out_set(const list& v) {
                this->switchobj_09_in3_list_set(v);
            }
            
            void pak_08_in8_set(number v) {
                this->pak_08_in8 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_08_in1;
                array[1] = this->pak_08_in2;
                array[2] = this->pak_08_in3;
                array[3] = this->pak_08_in4;
                array[4] = this->pak_08_in5;
                array[5] = this->pak_08_in6;
                array[6] = this->pak_08_in7;
                array[7] = this->pak_08_in8;
                this->pak_08_out_set(array);
            }
            
            void numberobj_85_output_set(number v) {
                this->pak_08_in8_set(v);
            }
            
            void numberobj_85_value_set(number v) {
                this->numberobj_85_value_setter(v);
                v = this->numberobj_85_value;
                number localvalue = v;
            
                if (this->numberobj_85_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-64"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_85_output_set(localvalue);
            }
            
            void expr_72_out1_set(number v) {
                this->expr_72_out1 = v;
                this->numberobj_85_value_set(this->expr_72_out1);
            }
            
            void expr_72_in1_set(number in1) {
                this->expr_72_in1 = in1;
            
                this->expr_72_out1_set(
                    (this->expr_72_in2 == 0 ? 0 : (this->expr_72_in2 == 0. ? 0. : this->expr_72_in1 / this->expr_72_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-65:1
            }
            
            void pak_07_in7_set(number v) {
                this->pak_07_in7 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_07_in1;
                array[1] = this->pak_07_in2;
                array[2] = this->pak_07_in3;
                array[3] = this->pak_07_in4;
                array[4] = this->pak_07_in5;
                array[5] = this->pak_07_in6;
                array[6] = this->pak_07_in7;
                array[7] = this->pak_07_in8;
                this->pak_07_out_set(array);
            }
            
            void numberobj_87_output_set(number v) {
                this->pak_07_in7_set(v);
            }
            
            void numberobj_87_value_set(number v) {
                this->numberobj_87_value_setter(v);
                v = this->numberobj_87_value;
                number localvalue = v;
            
                if (this->numberobj_87_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-55"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_87_output_set(localvalue);
            }
            
            void expr_74_out1_set(number v) {
                this->expr_74_out1 = v;
                this->numberobj_87_value_set(this->expr_74_out1);
            }
            
            void expr_74_in1_set(number in1) {
                this->expr_74_in1 = in1;
                this->expr_74_out1_set(this->expr_74_in1 + this->expr_74_in2);//#map:STUTTER/stutter-withtempo/+_obj-53:1
            }
            
            void expr_74_in2_set(number v) {
                this->expr_74_in2 = v;
                this->expr_74_in1_set(this->expr_74_in1);
            }
            
            void switchobj_09_in1_list_set(const list& v) {
                if (this->switchobj_09_onoff == 1) {
                    this->switchobj_09_out_list_set(v);
                }
            }
            
            void pak_06_out_set(const list& v) {
                this->switchobj_09_in1_list_set(v);
            }
            
            void pak_06_in8_set(number v) {
                this->pak_06_in8 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_06_in1;
                array[1] = this->pak_06_in2;
                array[2] = this->pak_06_in3;
                array[3] = this->pak_06_in4;
                array[4] = this->pak_06_in5;
                array[5] = this->pak_06_in6;
                array[6] = this->pak_06_in7;
                array[7] = this->pak_06_in8;
                this->pak_06_out_set(array);
            }
            
            void numberobj_84_output_set(number v) {
                this->expr_75_in1_set(v);
                this->expr_74_in2_set(v);
                this->pak_06_in8_set(v);
            }
            
            void numberobj_84_value_set(number v) {
                this->numberobj_84_value_setter(v);
                v = this->numberobj_84_value;
                number localvalue = v;
            
                if (this->numberobj_84_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-41"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_84_output_set(localvalue);
            }
            
            void expr_71_out1_set(number v) {
                this->expr_71_out1 = v;
                this->numberobj_84_value_set(this->expr_71_out1);
            }
            
            void expr_71_in1_set(number in1) {
                this->expr_71_in1 = in1;
            
                this->expr_71_out1_set(
                    (this->expr_71_in2 == 0 ? 0 : (this->expr_71_in2 == 0. ? 0. : this->expr_71_in1 / this->expr_71_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-42:1
            }
            
            void pak_08_in7_set(number v) {
                this->pak_08_in7 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_08_in1;
                array[1] = this->pak_08_in2;
                array[2] = this->pak_08_in3;
                array[3] = this->pak_08_in4;
                array[4] = this->pak_08_in5;
                array[5] = this->pak_08_in6;
                array[6] = this->pak_08_in7;
                array[7] = this->pak_08_in8;
                this->pak_08_out_set(array);
            }
            
            void numberobj_82_output_set(number v) {
                this->pak_08_in7_set(v);
            }
            
            void numberobj_82_value_set(number v) {
                this->numberobj_82_value_setter(v);
                v = this->numberobj_82_value;
                number localvalue = v;
            
                if (this->numberobj_82_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-67"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_82_output_set(localvalue);
            }
            
            void expr_70_out1_set(number v) {
                this->expr_70_out1 = v;
                this->numberobj_82_value_set(this->expr_70_out1);
            }
            
            void expr_70_in1_set(number in1) {
                this->expr_70_in1 = in1;
            
                this->expr_70_out1_set(
                    (this->expr_70_in2 == 0 ? 0 : (this->expr_70_in2 == 0. ? 0. : this->expr_70_in1 / this->expr_70_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-68:1
            }
            
            void pak_07_in6_set(number v) {
                this->pak_07_in6 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_07_in1;
                array[1] = this->pak_07_in2;
                array[2] = this->pak_07_in3;
                array[3] = this->pak_07_in4;
                array[4] = this->pak_07_in5;
                array[5] = this->pak_07_in6;
                array[6] = this->pak_07_in7;
                array[7] = this->pak_07_in8;
                this->pak_07_out_set(array);
            }
            
            void numberobj_79_output_set(number v) {
                this->pak_07_in6_set(v);
            }
            
            void numberobj_79_value_set(number v) {
                this->numberobj_79_value_setter(v);
                v = this->numberobj_79_value;
                number localvalue = v;
            
                if (this->numberobj_79_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-52"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_79_output_set(localvalue);
            }
            
            void expr_67_out1_set(number v) {
                this->expr_67_out1 = v;
                this->numberobj_79_value_set(this->expr_67_out1);
            }
            
            void expr_67_in1_set(number in1) {
                this->expr_67_in1 = in1;
                this->expr_67_out1_set(this->expr_67_in1 + this->expr_67_in2);//#map:STUTTER/stutter-withtempo/+_obj-50:1
            }
            
            void expr_67_in2_set(number v) {
                this->expr_67_in2 = v;
                this->expr_67_in1_set(this->expr_67_in1);
            }
            
            void pak_06_in7_set(number v) {
                this->pak_06_in7 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_06_in1;
                array[1] = this->pak_06_in2;
                array[2] = this->pak_06_in3;
                array[3] = this->pak_06_in4;
                array[4] = this->pak_06_in5;
                array[5] = this->pak_06_in6;
                array[6] = this->pak_06_in7;
                array[7] = this->pak_06_in8;
                this->pak_06_out_set(array);
            }
            
            void numberobj_80_output_set(number v) {
                this->expr_74_in1_set(v);
                this->expr_67_in2_set(v);
                this->pak_06_in7_set(v);
            }
            
            void numberobj_80_value_set(number v) {
                this->numberobj_80_value_setter(v);
                v = this->numberobj_80_value;
                number localvalue = v;
            
                if (this->numberobj_80_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-38"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_80_output_set(localvalue);
            }
            
            void expr_68_out1_set(number v) {
                this->expr_68_out1 = v;
                this->numberobj_80_value_set(this->expr_68_out1);
            }
            
            void expr_68_in1_set(number in1) {
                this->expr_68_in1 = in1;
            
                this->expr_68_out1_set(
                    (this->expr_68_in2 == 0 ? 0 : (this->expr_68_in2 == 0. ? 0. : this->expr_68_in1 / this->expr_68_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-39:1
            }
            
            void pak_08_in6_set(number v) {
                this->pak_08_in6 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_08_in1;
                array[1] = this->pak_08_in2;
                array[2] = this->pak_08_in3;
                array[3] = this->pak_08_in4;
                array[4] = this->pak_08_in5;
                array[5] = this->pak_08_in6;
                array[6] = this->pak_08_in7;
                array[7] = this->pak_08_in8;
                this->pak_08_out_set(array);
            }
            
            void numberobj_78_output_set(number v) {
                this->pak_08_in6_set(v);
            }
            
            void numberobj_78_value_set(number v) {
                this->numberobj_78_value_setter(v);
                v = this->numberobj_78_value;
                number localvalue = v;
            
                if (this->numberobj_78_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-70"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_78_output_set(localvalue);
            }
            
            void expr_66_out1_set(number v) {
                this->expr_66_out1 = v;
                this->numberobj_78_value_set(this->expr_66_out1);
            }
            
            void expr_66_in1_set(number in1) {
                this->expr_66_in1 = in1;
            
                this->expr_66_out1_set(
                    (this->expr_66_in2 == 0 ? 0 : (this->expr_66_in2 == 0. ? 0. : this->expr_66_in1 / this->expr_66_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-71:1
            }
            
            void pak_07_in5_set(number v) {
                this->pak_07_in5 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_07_in1;
                array[1] = this->pak_07_in2;
                array[2] = this->pak_07_in3;
                array[3] = this->pak_07_in4;
                array[4] = this->pak_07_in5;
                array[5] = this->pak_07_in6;
                array[6] = this->pak_07_in7;
                array[7] = this->pak_07_in8;
                this->pak_07_out_set(array);
            }
            
            void numberobj_75_output_set(number v) {
                this->pak_07_in5_set(v);
            }
            
            void numberobj_75_value_set(number v) {
                this->numberobj_75_value_setter(v);
                v = this->numberobj_75_value;
                number localvalue = v;
            
                if (this->numberobj_75_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-49"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_75_output_set(localvalue);
            }
            
            void expr_63_out1_set(number v) {
                this->expr_63_out1 = v;
                this->numberobj_75_value_set(this->expr_63_out1);
            }
            
            void expr_63_in1_set(number in1) {
                this->expr_63_in1 = in1;
                this->expr_63_out1_set(this->expr_63_in1 + this->expr_63_in2);//#map:STUTTER/stutter-withtempo/+_obj-47:1
            }
            
            void expr_63_in2_set(number v) {
                this->expr_63_in2 = v;
                this->expr_63_in1_set(this->expr_63_in1);
            }
            
            void pak_06_in6_set(number v) {
                this->pak_06_in6 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_06_in1;
                array[1] = this->pak_06_in2;
                array[2] = this->pak_06_in3;
                array[3] = this->pak_06_in4;
                array[4] = this->pak_06_in5;
                array[5] = this->pak_06_in6;
                array[6] = this->pak_06_in7;
                array[7] = this->pak_06_in8;
                this->pak_06_out_set(array);
            }
            
            void numberobj_77_output_set(number v) {
                this->expr_67_in1_set(v);
                this->expr_63_in2_set(v);
                this->pak_06_in6_set(v);
            }
            
            void numberobj_77_value_set(number v) {
                this->numberobj_77_value_setter(v);
                v = this->numberobj_77_value;
                number localvalue = v;
            
                if (this->numberobj_77_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-35"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_77_output_set(localvalue);
            }
            
            void expr_65_out1_set(number v) {
                this->expr_65_out1 = v;
                this->numberobj_77_value_set(this->expr_65_out1);
            }
            
            void expr_65_in1_set(number in1) {
                this->expr_65_in1 = in1;
            
                this->expr_65_out1_set(
                    (this->expr_65_in2 == 0 ? 0 : (this->expr_65_in2 == 0. ? 0. : this->expr_65_in1 / this->expr_65_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-36:1
            }
            
            void pak_08_in5_set(number v) {
                this->pak_08_in5 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_08_in1;
                array[1] = this->pak_08_in2;
                array[2] = this->pak_08_in3;
                array[3] = this->pak_08_in4;
                array[4] = this->pak_08_in5;
                array[5] = this->pak_08_in6;
                array[6] = this->pak_08_in7;
                array[7] = this->pak_08_in8;
                this->pak_08_out_set(array);
            }
            
            void numberobj_74_output_set(number v) {
                this->pak_08_in5_set(v);
            }
            
            void numberobj_74_value_set(number v) {
                this->numberobj_74_value_setter(v);
                v = this->numberobj_74_value;
                number localvalue = v;
            
                if (this->numberobj_74_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-73"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_74_output_set(localvalue);
            }
            
            void expr_62_out1_set(number v) {
                this->expr_62_out1 = v;
                this->numberobj_74_value_set(this->expr_62_out1);
            }
            
            void expr_62_in1_set(number in1) {
                this->expr_62_in1 = in1;
            
                this->expr_62_out1_set(
                    (this->expr_62_in2 == 0 ? 0 : (this->expr_62_in2 == 0. ? 0. : this->expr_62_in1 / this->expr_62_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-74:1
            }
            
            void pak_06_in5_set(number v) {
                this->pak_06_in5 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_06_in1;
                array[1] = this->pak_06_in2;
                array[2] = this->pak_06_in3;
                array[3] = this->pak_06_in4;
                array[4] = this->pak_06_in5;
                array[5] = this->pak_06_in6;
                array[6] = this->pak_06_in7;
                array[7] = this->pak_06_in8;
                this->pak_06_out_set(array);
            }
            
            void pak_07_in4_set(number v) {
                this->pak_07_in4 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_07_in1;
                array[1] = this->pak_07_in2;
                array[2] = this->pak_07_in3;
                array[3] = this->pak_07_in4;
                array[4] = this->pak_07_in5;
                array[5] = this->pak_07_in6;
                array[6] = this->pak_07_in7;
                array[7] = this->pak_07_in8;
                this->pak_07_out_set(array);
            }
            
            void numberobj_71_output_set(number v) {
                this->pak_07_in4_set(v);
            }
            
            void numberobj_71_value_set(number v) {
                this->numberobj_71_value_setter(v);
                v = this->numberobj_71_value;
                number localvalue = v;
            
                if (this->numberobj_71_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-46"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_71_output_set(localvalue);
            }
            
            void expr_59_out1_set(number v) {
                this->expr_59_out1 = v;
                this->numberobj_71_value_set(this->expr_59_out1);
            }
            
            void expr_59_in1_set(number in1) {
                this->expr_59_in1 = in1;
                this->expr_59_out1_set(this->expr_59_in1 + this->expr_59_in2);//#map:STUTTER/stutter-withtempo/+_obj-44:1
            }
            
            void expr_59_in2_set(number v) {
                this->expr_59_in2 = v;
                this->expr_59_in1_set(this->expr_59_in1);
            }
            
            void numberobj_73_output_set(number v) {
                this->expr_63_in1_set(v);
                this->pak_06_in5_set(v);
                this->expr_59_in2_set(v);
            }
            
            void numberobj_73_value_set(number v) {
                this->numberobj_73_value_setter(v);
                v = this->numberobj_73_value;
                number localvalue = v;
            
                if (this->numberobj_73_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-32"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_73_output_set(localvalue);
            }
            
            void expr_61_out1_set(number v) {
                this->expr_61_out1 = v;
                this->numberobj_73_value_set(this->expr_61_out1);
            }
            
            void expr_61_in1_set(number in1) {
                this->expr_61_in1 = in1;
            
                this->expr_61_out1_set(
                    (this->expr_61_in2 == 0 ? 0 : (this->expr_61_in2 == 0. ? 0. : this->expr_61_in1 / this->expr_61_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-33:1
            }
            
            void pak_08_in4_set(number v) {
                this->pak_08_in4 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_08_in1;
                array[1] = this->pak_08_in2;
                array[2] = this->pak_08_in3;
                array[3] = this->pak_08_in4;
                array[4] = this->pak_08_in5;
                array[5] = this->pak_08_in6;
                array[6] = this->pak_08_in7;
                array[7] = this->pak_08_in8;
                this->pak_08_out_set(array);
            }
            
            void numberobj_70_output_set(number v) {
                this->pak_08_in4_set(v);
            }
            
            void numberobj_70_value_set(number v) {
                this->numberobj_70_value_setter(v);
                v = this->numberobj_70_value;
                number localvalue = v;
            
                if (this->numberobj_70_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-76"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_70_output_set(localvalue);
            }
            
            void expr_58_out1_set(number v) {
                this->expr_58_out1 = v;
                this->numberobj_70_value_set(this->expr_58_out1);
            }
            
            void expr_58_in1_set(number in1) {
                this->expr_58_in1 = in1;
            
                this->expr_58_out1_set(
                    (this->expr_58_in2 == 0 ? 0 : (this->expr_58_in2 == 0. ? 0. : this->expr_58_in1 / this->expr_58_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-77:1
            }
            
            void pak_06_in4_set(number v) {
                this->pak_06_in4 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_06_in1;
                array[1] = this->pak_06_in2;
                array[2] = this->pak_06_in3;
                array[3] = this->pak_06_in4;
                array[4] = this->pak_06_in5;
                array[5] = this->pak_06_in6;
                array[6] = this->pak_06_in7;
                array[7] = this->pak_06_in8;
                this->pak_06_out_set(array);
            }
            
            void pak_07_in3_set(number v) {
                this->pak_07_in3 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_07_in1;
                array[1] = this->pak_07_in2;
                array[2] = this->pak_07_in3;
                array[3] = this->pak_07_in4;
                array[4] = this->pak_07_in5;
                array[5] = this->pak_07_in6;
                array[6] = this->pak_07_in7;
                array[7] = this->pak_07_in8;
                this->pak_07_out_set(array);
            }
            
            void numberobj_67_output_set(number v) {
                this->pak_07_in3_set(v);
            }
            
            void numberobj_67_value_set(number v) {
                this->numberobj_67_value_setter(v);
                v = this->numberobj_67_value;
                number localvalue = v;
            
                if (this->numberobj_67_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-43"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_67_output_set(localvalue);
            }
            
            void expr_55_out1_set(number v) {
                this->expr_55_out1 = v;
                this->numberobj_67_value_set(this->expr_55_out1);
            }
            
            void expr_55_in1_set(number in1) {
                this->expr_55_in1 = in1;
                this->expr_55_out1_set(this->expr_55_in1 + this->expr_55_in2);//#map:STUTTER/stutter-withtempo/+_obj-22:1
            }
            
            void expr_55_in2_set(number v) {
                this->expr_55_in2 = v;
                this->expr_55_in1_set(this->expr_55_in1);
            }
            
            void numberobj_69_output_set(number v) {
                this->expr_59_in1_set(v);
                this->pak_06_in4_set(v);
                this->expr_55_in2_set(v);
            }
            
            void numberobj_69_value_set(number v) {
                this->numberobj_69_value_setter(v);
                v = this->numberobj_69_value;
                number localvalue = v;
            
                if (this->numberobj_69_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-29"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_69_output_set(localvalue);
            }
            
            void expr_57_out1_set(number v) {
                this->expr_57_out1 = v;
                this->numberobj_69_value_set(this->expr_57_out1);
            }
            
            void expr_57_in1_set(number in1) {
                this->expr_57_in1 = in1;
            
                this->expr_57_out1_set(
                    (this->expr_57_in2 == 0 ? 0 : (this->expr_57_in2 == 0. ? 0. : this->expr_57_in1 / this->expr_57_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-30:1
            }
            
            void pak_06_in3_set(number v) {
                this->pak_06_in3 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_06_in1;
                array[1] = this->pak_06_in2;
                array[2] = this->pak_06_in3;
                array[3] = this->pak_06_in4;
                array[4] = this->pak_06_in5;
                array[5] = this->pak_06_in6;
                array[6] = this->pak_06_in7;
                array[7] = this->pak_06_in8;
                this->pak_06_out_set(array);
            }
            
            void pak_07_in2_set(number v) {
                this->pak_07_in2 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_07_in1;
                array[1] = this->pak_07_in2;
                array[2] = this->pak_07_in3;
                array[3] = this->pak_07_in4;
                array[4] = this->pak_07_in5;
                array[5] = this->pak_07_in6;
                array[6] = this->pak_07_in7;
                array[7] = this->pak_07_in8;
                this->pak_07_out_set(array);
            }
            
            void numberobj_63_output_set(number v) {
                this->pak_07_in2_set(v);
            }
            
            void numberobj_63_value_set(number v) {
                this->numberobj_63_value_setter(v);
                v = this->numberobj_63_value;
                number localvalue = v;
            
                if (this->numberobj_63_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-19"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_63_output_set(localvalue);
            }
            
            void expr_53_out1_set(number v) {
                this->expr_53_out1 = v;
                this->numberobj_63_value_set(this->expr_53_out1);
            }
            
            void expr_53_in1_set(number in1) {
                this->expr_53_in1 = in1;
                this->expr_53_out1_set(this->expr_53_in1 + this->expr_53_in2);//#map:STUTTER/stutter-withtempo/+_obj-14:1
            }
            
            void expr_53_in2_set(number v) {
                this->expr_53_in2 = v;
                this->expr_53_in1_set(this->expr_53_in1);
            }
            
            void numberobj_64_output_set(number v) {
                this->expr_55_in1_set(v);
                this->pak_06_in3_set(v);
                this->expr_53_in2_set(v);
            }
            
            void numberobj_64_value_set(number v) {
                this->numberobj_64_value_setter(v);
                v = this->numberobj_64_value;
                number localvalue = v;
            
                if (this->numberobj_64_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-26"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_64_output_set(localvalue);
            }
            
            void pak_08_in3_set(number v) {
                this->pak_08_in3 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_08_in1;
                array[1] = this->pak_08_in2;
                array[2] = this->pak_08_in3;
                array[3] = this->pak_08_in4;
                array[4] = this->pak_08_in5;
                array[5] = this->pak_08_in6;
                array[6] = this->pak_08_in7;
                array[7] = this->pak_08_in8;
                this->pak_08_out_set(array);
            }
            
            void numberobj_66_output_set(number v) {
                this->pak_08_in3_set(v);
            }
            
            void numberobj_66_value_set(number v) {
                this->numberobj_66_value_setter(v);
                v = this->numberobj_66_value;
                number localvalue = v;
            
                if (this->numberobj_66_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-79"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_66_output_set(localvalue);
            }
            
            void expr_54_out1_set(number v) {
                this->expr_54_out1 = v;
                this->numberobj_66_value_set(this->expr_54_out1);
            }
            
            void expr_54_in1_set(number in1) {
                this->expr_54_in1 = in1;
            
                this->expr_54_out1_set(
                    (this->expr_54_in2 == 0 ? 0 : (this->expr_54_in2 == 0. ? 0. : this->expr_54_in1 / this->expr_54_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-87:1
            }
            
            void pak_06_in2_set(number v) {
                this->pak_06_in2 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_06_in1;
                array[1] = this->pak_06_in2;
                array[2] = this->pak_06_in3;
                array[3] = this->pak_06_in4;
                array[4] = this->pak_06_in5;
                array[5] = this->pak_06_in6;
                array[6] = this->pak_06_in7;
                array[7] = this->pak_06_in8;
                this->pak_06_out_set(array);
            }
            
            void pak_07_in1_set(number v) {
                this->pak_07_in1 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_07_in1;
                array[1] = this->pak_07_in2;
                array[2] = this->pak_07_in3;
                array[3] = this->pak_07_in4;
                array[4] = this->pak_07_in5;
                array[5] = this->pak_07_in6;
                array[6] = this->pak_07_in7;
                array[7] = this->pak_07_in8;
                this->pak_07_out_set(array);
            }
            
            void numberobj_56_output_set(number v) {
                this->pak_07_in1_set(v);
            }
            
            void numberobj_56_value_set(number v) {
                this->numberobj_56_value_setter(v);
                v = this->numberobj_56_value;
                number localvalue = v;
            
                if (this->numberobj_56_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-7"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_56_output_set(localvalue);
            }
            
            void expr_45_out1_set(number v) {
                this->expr_45_out1 = v;
                this->numberobj_56_value_set(this->expr_45_out1);
            }
            
            void expr_45_in1_set(number in1) {
                this->expr_45_in1 = in1;
                this->expr_45_out1_set(this->expr_45_in1 + this->expr_45_in2);//#map:STUTTER/stutter-withtempo/+_obj-11:1
            }
            
            void expr_45_in2_set(number v) {
                this->expr_45_in2 = v;
                this->expr_45_in1_set(this->expr_45_in1);
            }
            
            void numberobj_60_output_set(number v) {
                this->expr_54_in1_set(v);
                this->expr_53_in1_set(v);
                this->pak_06_in2_set(v);
                this->expr_45_in2_set(v);
            }
            
            void numberobj_60_value_set(number v) {
                this->numberobj_60_value_setter(v);
                v = this->numberobj_60_value;
                number localvalue = v;
            
                if (this->numberobj_60_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-23"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_60_output_set(localvalue);
            }
            
            void expr_50_out1_set(number v) {
                this->expr_50_out1 = v;
                this->numberobj_60_value_set(this->expr_50_out1);
            }
            
            void expr_50_in1_set(number in1) {
                this->expr_50_in1 = in1;
                this->expr_50_out1_set(this->expr_50_in1 * this->expr_50_in2);//#map:STUTTER/stutter-withtempo/*_obj-21:1
            }
            
            void pak_08_in2_set(number v) {
                this->pak_08_in2 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_08_in1;
                array[1] = this->pak_08_in2;
                array[2] = this->pak_08_in3;
                array[3] = this->pak_08_in4;
                array[4] = this->pak_08_in5;
                array[5] = this->pak_08_in6;
                array[6] = this->pak_08_in7;
                array[7] = this->pak_08_in8;
                this->pak_08_out_set(array);
            }
            
            void numberobj_62_output_set(number v) {
                this->pak_08_in2_set(v);
            }
            
            void numberobj_62_value_set(number v) {
                this->numberobj_62_value_setter(v);
                v = this->numberobj_62_value;
                number localvalue = v;
            
                if (this->numberobj_62_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-81"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_62_output_set(localvalue);
            }
            
            void expr_52_out1_set(number v) {
                this->expr_52_out1 = v;
                this->numberobj_62_value_set(this->expr_52_out1);
            }
            
            void expr_52_in1_set(number in1) {
                this->expr_52_in1 = in1;
            
                this->expr_52_out1_set(
                    (this->expr_52_in2 == 0 ? 0 : (this->expr_52_in2 == 0. ? 0. : this->expr_52_in1 / this->expr_52_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-86:1
            }
            
            void switchobj_09_in4_list_set(const list& v) {
                if (this->switchobj_09_onoff == 4) {
                    this->switchobj_09_out_list_set(v);
                }
            }
            
            void pak_05_out_set(const list& v) {
                this->switchobj_09_in4_list_set(v);
            }
            
            void pak_05_in8_set(number v) {
                this->pak_05_in8 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_05_in1;
                array[1] = this->pak_05_in2;
                array[2] = this->pak_05_in3;
                array[3] = this->pak_05_in4;
                array[4] = this->pak_05_in5;
                array[5] = this->pak_05_in6;
                array[6] = this->pak_05_in7;
                array[7] = this->pak_05_in8;
                this->pak_05_out_set(array);
            }
            
            void numberobj_86_output_set(number v) {
                this->pak_05_in8_set(v);
            }
            
            void numberobj_86_value_set(number v) {
                this->numberobj_86_value_setter(v);
                v = this->numberobj_86_value;
                number localvalue = v;
            
                if (this->numberobj_86_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-122"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_86_output_set(localvalue);
            }
            
            void expr_73_out1_set(number v) {
                this->expr_73_out1 = v;
                this->numberobj_86_value_set(this->expr_73_out1);
            }
            
            void expr_73_in1_set(number in1) {
                this->expr_73_in1 = in1;
            
                this->expr_73_out1_set(
                    (this->expr_73_in2 == 0 ? 0 : (this->expr_73_in2 == 0. ? 0. : this->expr_73_in1 / this->expr_73_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-120:1
            }
            
            void pak_05_in7_set(number v) {
                this->pak_05_in7 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_05_in1;
                array[1] = this->pak_05_in2;
                array[2] = this->pak_05_in3;
                array[3] = this->pak_05_in4;
                array[4] = this->pak_05_in5;
                array[5] = this->pak_05_in6;
                array[6] = this->pak_05_in7;
                array[7] = this->pak_05_in8;
                this->pak_05_out_set(array);
            }
            
            void numberobj_81_output_set(number v) {
                this->pak_05_in7_set(v);
            }
            
            void numberobj_81_value_set(number v) {
                this->numberobj_81_value_setter(v);
                v = this->numberobj_81_value;
                number localvalue = v;
            
                if (this->numberobj_81_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-119"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_81_output_set(localvalue);
            }
            
            void expr_69_out1_set(number v) {
                this->expr_69_out1 = v;
                this->numberobj_81_value_set(this->expr_69_out1);
            }
            
            void expr_69_in1_set(number in1) {
                this->expr_69_in1 = in1;
            
                this->expr_69_out1_set(
                    (this->expr_69_in2 == 0 ? 0 : (this->expr_69_in2 == 0. ? 0. : this->expr_69_in1 / this->expr_69_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-117:1
            }
            
            void pak_05_in6_set(number v) {
                this->pak_05_in6 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_05_in1;
                array[1] = this->pak_05_in2;
                array[2] = this->pak_05_in3;
                array[3] = this->pak_05_in4;
                array[4] = this->pak_05_in5;
                array[5] = this->pak_05_in6;
                array[6] = this->pak_05_in7;
                array[7] = this->pak_05_in8;
                this->pak_05_out_set(array);
            }
            
            void numberobj_76_output_set(number v) {
                this->pak_05_in6_set(v);
            }
            
            void numberobj_76_value_set(number v) {
                this->numberobj_76_value_setter(v);
                v = this->numberobj_76_value;
                number localvalue = v;
            
                if (this->numberobj_76_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-116"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_76_output_set(localvalue);
            }
            
            void expr_64_out1_set(number v) {
                this->expr_64_out1 = v;
                this->numberobj_76_value_set(this->expr_64_out1);
            }
            
            void expr_64_in1_set(number in1) {
                this->expr_64_in1 = in1;
            
                this->expr_64_out1_set(
                    (this->expr_64_in2 == 0 ? 0 : (this->expr_64_in2 == 0. ? 0. : this->expr_64_in1 / this->expr_64_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-114:1
            }
            
            void pak_05_in5_set(number v) {
                this->pak_05_in5 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_05_in1;
                array[1] = this->pak_05_in2;
                array[2] = this->pak_05_in3;
                array[3] = this->pak_05_in4;
                array[4] = this->pak_05_in5;
                array[5] = this->pak_05_in6;
                array[6] = this->pak_05_in7;
                array[7] = this->pak_05_in8;
                this->pak_05_out_set(array);
            }
            
            void numberobj_72_output_set(number v) {
                this->pak_05_in5_set(v);
            }
            
            void numberobj_72_value_set(number v) {
                this->numberobj_72_value_setter(v);
                v = this->numberobj_72_value;
                number localvalue = v;
            
                if (this->numberobj_72_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-113"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_72_output_set(localvalue);
            }
            
            void expr_60_out1_set(number v) {
                this->expr_60_out1 = v;
                this->numberobj_72_value_set(this->expr_60_out1);
            }
            
            void expr_60_in1_set(number in1) {
                this->expr_60_in1 = in1;
            
                this->expr_60_out1_set(
                    (this->expr_60_in2 == 0 ? 0 : (this->expr_60_in2 == 0. ? 0. : this->expr_60_in1 / this->expr_60_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-111:1
            }
            
            void pak_05_in4_set(number v) {
                this->pak_05_in4 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_05_in1;
                array[1] = this->pak_05_in2;
                array[2] = this->pak_05_in3;
                array[3] = this->pak_05_in4;
                array[4] = this->pak_05_in5;
                array[5] = this->pak_05_in6;
                array[6] = this->pak_05_in7;
                array[7] = this->pak_05_in8;
                this->pak_05_out_set(array);
            }
            
            void numberobj_68_output_set(number v) {
                this->pak_05_in4_set(v);
            }
            
            void numberobj_68_value_set(number v) {
                this->numberobj_68_value_setter(v);
                v = this->numberobj_68_value;
                number localvalue = v;
            
                if (this->numberobj_68_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-110"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_68_output_set(localvalue);
            }
            
            void expr_56_out1_set(number v) {
                this->expr_56_out1 = v;
                this->numberobj_68_value_set(this->expr_56_out1);
            }
            
            void expr_56_in1_set(number in1) {
                this->expr_56_in1 = in1;
            
                this->expr_56_out1_set(
                    (this->expr_56_in2 == 0 ? 0 : (this->expr_56_in2 == 0. ? 0. : this->expr_56_in1 / this->expr_56_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-108:1
            }
            
            void pak_05_in3_set(number v) {
                this->pak_05_in3 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_05_in1;
                array[1] = this->pak_05_in2;
                array[2] = this->pak_05_in3;
                array[3] = this->pak_05_in4;
                array[4] = this->pak_05_in5;
                array[5] = this->pak_05_in6;
                array[6] = this->pak_05_in7;
                array[7] = this->pak_05_in8;
                this->pak_05_out_set(array);
            }
            
            void numberobj_65_output_set(number v) {
                this->pak_05_in3_set(v);
            }
            
            void numberobj_65_value_set(number v) {
                this->numberobj_65_value_setter(v);
                v = this->numberobj_65_value;
                number localvalue = v;
            
                if (this->numberobj_65_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-98"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_65_output_set(localvalue);
            }
            
            void pak_05_in2_set(number v) {
                this->pak_05_in2 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_05_in1;
                array[1] = this->pak_05_in2;
                array[2] = this->pak_05_in3;
                array[3] = this->pak_05_in4;
                array[4] = this->pak_05_in5;
                array[5] = this->pak_05_in6;
                array[6] = this->pak_05_in7;
                array[7] = this->pak_05_in8;
                this->pak_05_out_set(array);
            }
            
            void numberobj_61_output_set(number v) {
                this->pak_05_in2_set(v);
            }
            
            void numberobj_61_value_set(number v) {
                this->numberobj_61_value_setter(v);
                v = this->numberobj_61_value;
                number localvalue = v;
            
                if (this->numberobj_61_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-107"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_61_output_set(localvalue);
            }
            
            void expr_51_out1_set(number v) {
                this->expr_51_out1 = v;
                this->numberobj_61_value_set(this->expr_51_out1);
            }
            
            void expr_51_in1_set(number in1) {
                this->expr_51_in1 = in1;
                this->expr_51_out1_set(this->expr_51_in1 * this->expr_51_in2);//#map:STUTTER/stutter-withtempo/*_obj-105:1
            }
            
            void pak_05_in1_set(number v) {
                this->pak_05_in1 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_05_in1;
                array[1] = this->pak_05_in2;
                array[2] = this->pak_05_in3;
                array[3] = this->pak_05_in4;
                array[4] = this->pak_05_in5;
                array[5] = this->pak_05_in6;
                array[6] = this->pak_05_in7;
                array[7] = this->pak_05_in8;
                this->pak_05_out_set(array);
            }
            
            void numberobj_57_output_set(number v) {
                this->pak_05_in1_set(v);
            }
            
            void numberobj_57_value_set(number v) {
                this->numberobj_57_value_setter(v);
                v = this->numberobj_57_value;
                number localvalue = v;
            
                if (this->numberobj_57_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-104"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_57_output_set(localvalue);
            }
            
            void expr_46_out1_set(number v) {
                this->expr_46_out1 = v;
                this->numberobj_57_value_set(this->expr_46_out1);
            }
            
            void expr_46_in1_set(number in1) {
                this->expr_46_in1 = in1;
                this->expr_46_out1_set(this->expr_46_in1 * this->expr_46_in2);//#map:STUTTER/stutter-withtempo/*_obj-101:1
            }
            
            void expr_47_out1_set(number v) {
                this->expr_47_out1 = v;
                this->expr_73_in1_set(this->expr_47_out1);
                this->expr_69_in1_set(this->expr_47_out1);
                this->expr_64_in1_set(this->expr_47_out1);
                this->expr_60_in1_set(this->expr_47_out1);
                this->expr_56_in1_set(this->expr_47_out1);
                this->numberobj_65_value_set(this->expr_47_out1);
                this->expr_51_in1_set(this->expr_47_out1);
                this->expr_46_in1_set(this->expr_47_out1);
            }
            
            void expr_47_in1_set(number in1) {
                this->expr_47_in1 = in1;
            
                this->expr_47_out1_set(
                    (this->expr_47_in2 == 0 ? 0 : (this->expr_47_in2 == 0. ? 0. : this->expr_47_in1 / this->expr_47_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-95:1
            }
            
            void pak_08_in1_set(number v) {
                this->pak_08_in1 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_08_in1;
                array[1] = this->pak_08_in2;
                array[2] = this->pak_08_in3;
                array[3] = this->pak_08_in4;
                array[4] = this->pak_08_in5;
                array[5] = this->pak_08_in6;
                array[6] = this->pak_08_in7;
                array[7] = this->pak_08_in8;
                this->pak_08_out_set(array);
            }
            
            void numberobj_58_output_set(number v) {
                this->pak_08_in1_set(v);
            }
            
            void numberobj_58_value_set(number v) {
                this->numberobj_58_value_setter(v);
                v = this->numberobj_58_value;
                number localvalue = v;
            
                if (this->numberobj_58_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-84"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_58_output_set(localvalue);
            }
            
            void expr_48_out1_set(number v) {
                this->expr_48_out1 = v;
                this->numberobj_58_value_set(this->expr_48_out1);
            }
            
            void expr_48_in1_set(number in1) {
                this->expr_48_in1 = in1;
                this->expr_48_out1_set(this->expr_48_in1 * this->expr_48_in2);//#map:STUTTER/stutter-withtempo/*_obj-89:1
            }
            
            void expr_49_out1_set(number v) {
                this->expr_49_out1 = v;
                this->expr_48_in1_set(this->expr_49_out1);
            }
            
            void expr_49_in1_set(number in1) {
                this->expr_49_in1 = in1;
            
                this->expr_49_out1_set(
                    (this->expr_49_in2 == 0 ? 0 : (this->expr_49_in2 == 0. ? 0. : this->expr_49_in1 / this->expr_49_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-88:1
            }
            
            void pak_06_in1_set(number v) {
                this->pak_06_in1 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_06_in1;
                array[1] = this->pak_06_in2;
                array[2] = this->pak_06_in3;
                array[3] = this->pak_06_in4;
                array[4] = this->pak_06_in5;
                array[5] = this->pak_06_in6;
                array[6] = this->pak_06_in7;
                array[7] = this->pak_06_in8;
                this->pak_06_out_set(array);
            }
            
            void numberobj_54_output_set(number v) {
                this->expr_52_in1_set(v);
                this->expr_47_in1_set(v);
                this->expr_49_in1_set(v);
                this->expr_45_in1_set(v);
                this->pak_06_in1_set(v);
            }
            
            void numberobj_54_value_set(number v) {
                this->numberobj_54_value_setter(v);
                v = this->numberobj_54_value;
                number localvalue = v;
            
                if (this->numberobj_54_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-18"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_54_output_set(localvalue);
            }
            
            void expr_43_out1_set(number v) {
                this->expr_43_out1 = v;
                this->numberobj_54_value_set(this->expr_43_out1);
            }
            
            void expr_43_in1_set(number in1) {
                this->expr_43_in1 = in1;
                this->expr_43_out1_set(this->expr_43_in1 * this->expr_43_in2);//#map:STUTTER/stutter-withtempo/*_obj-16:1
            }
            
            void numberobj_55_output_set(number v) {
                this->expr_76_in1_set(v);
                this->expr_72_in1_set(v);
                this->expr_71_in1_set(v);
                this->expr_70_in1_set(v);
                this->expr_68_in1_set(v);
                this->expr_66_in1_set(v);
                this->expr_65_in1_set(v);
                this->expr_62_in1_set(v);
                this->expr_61_in1_set(v);
                this->expr_58_in1_set(v);
                this->expr_57_in1_set(v);
                this->numberobj_64_value_set(v);
                this->expr_50_in1_set(v);
                this->expr_43_in1_set(v);
            }
            
            void numberobj_55_value_set(number v) {
                this->numberobj_55_value_setter(v);
                v = this->numberobj_55_value;
                number localvalue = v;
            
                if (this->numberobj_55_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-12"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_55_output_set(localvalue);
            }
            
            void expr_44_out1_set(number v) {
                this->expr_44_out1 = v;
                this->numberobj_55_value_set(this->expr_44_out1);
            }
            
            void expr_44_in1_set(number in1) {
                this->expr_44_in1 = in1;
            
                this->expr_44_out1_set(
                    (this->expr_44_in2 == 0 ? 0 : (this->expr_44_in2 == 0. ? 0. : this->expr_44_in1 / this->expr_44_in2))
                );//#map:STUTTER/stutter-withtempo//_obj-8:1
            }
            
            void expr_44_in2_set(number v) {
                this->expr_44_in2 = v;
                this->expr_44_in1_set(this->expr_44_in1);
            }
            
            void numberobj_59_output_set(number v) {
                this->expr_44_in2_set(v);
            }
            
            void numberobj_59_value_set(number v) {
                this->numberobj_59_value_setter(v);
                v = this->numberobj_59_value;
                number localvalue = v;
            
                if (this->numberobj_59_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-102"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_59_output_set(localvalue);
            }
            
            void tempo_01_tempo_set(number v) {
                this->numberobj_59_value_set(v);
            }
            
            void tempo_01_input_bang_bang() {
                this->tempo_01_tempo_set(this->tempo());
            }
            
            void button_07_output_bang() {
                this->tempo_01_input_bang_bang();
            }
            
            void button_07_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("STUTTER/stutter-withtempo/button_obj-2"),
                    this->_currentTime
                );;
            
                this->button_07_output_bang();
            }
            
            void trigger_05_out1_bang() {
                this->button_07_bangval_bang();
            }
            
            void trigger_05_input_number_set(number v) {
                this->trigger_05_out2_set(v);
                this->trigger_05_out1_bang();
            }
            
            void numberobj_83_output_set(number v) {
                this->trigger_05_input_number_set(v);
            }
            
            void numberobj_83_value_set(number v) {
                this->numberobj_83_value_setter(v);
                v = this->numberobj_83_value;
                number localvalue = v;
            
                if (this->numberobj_83_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-162"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_83_output_set(localvalue);
            }
            
            void message_29_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_83_value_set(converted);
                }
            }
            
            void message_29_trigger_bang() {
                this->message_29_out_set(this->message_29_set);
            }
            
            void select_11_match1_bang() {
                this->message_29_trigger_bang();
            }
            
            void message_30_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_83_value_set(converted);
                }
            }
            
            void message_30_trigger_bang() {
                this->message_30_out_set(this->message_30_set);
            }
            
            void select_11_match2_bang() {
                this->message_30_trigger_bang();
            }
            
            void message_31_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_83_value_set(converted);
                }
            }
            
            void message_31_trigger_bang() {
                this->message_31_out_set(this->message_31_set);
            }
            
            void select_11_match3_bang() {
                this->message_31_trigger_bang();
            }
            
            void message_32_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_83_value_set(converted);
                }
            }
            
            void message_32_trigger_bang() {
                this->message_32_out_set(this->message_32_set);
            }
            
            void select_11_match4_bang() {
                this->message_32_trigger_bang();
            }
            
            void select_11_nomatch_number_set(number ) {}
            
            void select_11_input_number_set(number v) {
                if (v == this->select_11_test1)
                    this->select_11_match1_bang();
                else if (v == this->select_11_test2)
                    this->select_11_match2_bang();
                else if (v == this->select_11_test3)
                    this->select_11_match3_bang();
                else if (v == this->select_11_test4)
                    this->select_11_match4_bang();
                else
                    this->select_11_nomatch_number_set(v);
            }
            
            void receive_15_output_number_set(number v) {
                this->receive_15_output_number = v;
                this->select_11_input_number_set(v);
            }
            
            void numberobj_53_output_set(number v) {
                this->expr_44_in1_set(v);
            }
            
            void numberobj_53_value_set(number v) {
                this->numberobj_53_value_setter(v);
                v = this->numberobj_53_value;
                number localvalue = v;
            
                if (this->numberobj_53_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/stutter-withtempo/number_obj-10"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_53_output_set(localvalue);
            }
            
            void loadmess_05_message_bang() {
                list v = this->loadmess_05_message;
            
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_53_value_set(converted);
                }
            }
            
            void loadbang_01_output_bang() {
                this->button_07_bangval_bang();
            }
            
            void message_29_set_set(const list& v) {
                this->message_29_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/stutter-withtempo/message_obj-153"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_30_set_set(const list& v) {
                this->message_30_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/stutter-withtempo/message_obj-155"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_31_set_set(const list& v) {
                this->message_31_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/stutter-withtempo/message_obj-157"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_32_set_set(const list& v) {
                this->message_32_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/stutter-withtempo/message_obj-159"),
                    v,
                    this->_currentTime
                );
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_53_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_53_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_53_value = localvalue;
            }
            
            void numberobj_54_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_54_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_54_value = localvalue;
            }
            
            void numberobj_55_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_55_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_55_value = localvalue;
            }
            
            void numberobj_56_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_56_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_56_value = localvalue;
            }
            
            void numberobj_57_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_57_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_57_value = localvalue;
            }
            
            void numberobj_58_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_58_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_58_value = localvalue;
            }
            
            void numberobj_59_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_59_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_59_value = localvalue;
            }
            
            void numberobj_60_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_60_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_60_value = localvalue;
            }
            
            void numberobj_61_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_61_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_61_value = localvalue;
            }
            
            void numberobj_62_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_62_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_62_value = localvalue;
            }
            
            void numberobj_63_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_63_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_63_value = localvalue;
            }
            
            void numberobj_64_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_64_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_64_value = localvalue;
            }
            
            void numberobj_65_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_65_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_65_value = localvalue;
            }
            
            void numberobj_66_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_66_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_66_value = localvalue;
            }
            
            void numberobj_67_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_67_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_67_value = localvalue;
            }
            
            void numberobj_68_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_68_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_68_value = localvalue;
            }
            
            void numberobj_69_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_69_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_69_value = localvalue;
            }
            
            void numberobj_70_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_70_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_70_value = localvalue;
            }
            
            void numberobj_71_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_71_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_71_value = localvalue;
            }
            
            void numberobj_72_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_72_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_72_value = localvalue;
            }
            
            void numberobj_73_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_73_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_73_value = localvalue;
            }
            
            void numberobj_74_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_74_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_74_value = localvalue;
            }
            
            void numberobj_75_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_75_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_75_value = localvalue;
            }
            
            void numberobj_76_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_76_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_76_value = localvalue;
            }
            
            void numberobj_77_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_77_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_77_value = localvalue;
            }
            
            void numberobj_78_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_78_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_78_value = localvalue;
            }
            
            void numberobj_79_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_79_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_79_value = localvalue;
            }
            
            void numberobj_80_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_80_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_80_value = localvalue;
            }
            
            void numberobj_81_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_81_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_81_value = localvalue;
            }
            
            void numberobj_82_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_82_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_82_value = localvalue;
            }
            
            void numberobj_83_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_83_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_83_value = localvalue;
            }
            
            void numberobj_84_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_84_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_84_value = localvalue;
            }
            
            void numberobj_85_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_85_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_85_value = localvalue;
            }
            
            void numberobj_86_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_86_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_86_value = localvalue;
            }
            
            void numberobj_87_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_87_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_87_value = localvalue;
            }
            
            void numberobj_88_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_88_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_88_value = localvalue;
            }
            
            void numberobj_53_init() {
                this->numberobj_53_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-10"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_53_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_53_value;
            }
            
            void numberobj_53_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_53_value_set(preset["value"]);
            }
            
            void numberobj_54_init() {
                this->numberobj_54_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-18"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_54_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_54_value;
            }
            
            void numberobj_54_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_54_value_set(preset["value"]);
            }
            
            void numberobj_55_init() {
                this->numberobj_55_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-12"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_55_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_55_value;
            }
            
            void numberobj_55_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_55_value_set(preset["value"]);
            }
            
            void numberobj_56_init() {
                this->numberobj_56_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-7"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_56_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_56_value;
            }
            
            void numberobj_56_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_56_value_set(preset["value"]);
            }
            
            void numberobj_57_init() {
                this->numberobj_57_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-104"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_57_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_57_value;
            }
            
            void numberobj_57_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_57_value_set(preset["value"]);
            }
            
            void numberobj_58_init() {
                this->numberobj_58_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-84"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_58_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_58_value;
            }
            
            void numberobj_58_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_58_value_set(preset["value"]);
            }
            
            void numberobj_59_init() {
                this->numberobj_59_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-102"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_59_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_59_value;
            }
            
            void numberobj_59_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_59_value_set(preset["value"]);
            }
            
            void tempo_01_onTempoChanged(number tempo) {
                this->tempo_01_tempo_set(tempo);
            }
            
            void numberobj_60_init() {
                this->numberobj_60_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-23"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_60_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_60_value;
            }
            
            void numberobj_60_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_60_value_set(preset["value"]);
            }
            
            void numberobj_61_init() {
                this->numberobj_61_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-107"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_61_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_61_value;
            }
            
            void numberobj_61_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_61_value_set(preset["value"]);
            }
            
            void numberobj_62_init() {
                this->numberobj_62_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-81"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_62_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_62_value;
            }
            
            void numberobj_62_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_62_value_set(preset["value"]);
            }
            
            void numberobj_63_init() {
                this->numberobj_63_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-19"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_63_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_63_value;
            }
            
            void numberobj_63_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_63_value_set(preset["value"]);
            }
            
            void numberobj_64_init() {
                this->numberobj_64_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-26"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_64_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_64_value;
            }
            
            void numberobj_64_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_64_value_set(preset["value"]);
            }
            
            void numberobj_65_init() {
                this->numberobj_65_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-98"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_65_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_65_value;
            }
            
            void numberobj_65_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_65_value_set(preset["value"]);
            }
            
            void numberobj_66_init() {
                this->numberobj_66_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-79"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_66_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_66_value;
            }
            
            void numberobj_66_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_66_value_set(preset["value"]);
            }
            
            void numberobj_67_init() {
                this->numberobj_67_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-43"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_67_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_67_value;
            }
            
            void numberobj_67_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_67_value_set(preset["value"]);
            }
            
            void numberobj_68_init() {
                this->numberobj_68_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-110"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_68_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_68_value;
            }
            
            void numberobj_68_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_68_value_set(preset["value"]);
            }
            
            void numberobj_69_init() {
                this->numberobj_69_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-29"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_69_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_69_value;
            }
            
            void numberobj_69_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_69_value_set(preset["value"]);
            }
            
            void numberobj_70_init() {
                this->numberobj_70_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-76"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_70_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_70_value;
            }
            
            void numberobj_70_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_70_value_set(preset["value"]);
            }
            
            void numberobj_71_init() {
                this->numberobj_71_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-46"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_71_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_71_value;
            }
            
            void numberobj_71_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_71_value_set(preset["value"]);
            }
            
            void numberobj_72_init() {
                this->numberobj_72_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-113"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_72_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_72_value;
            }
            
            void numberobj_72_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_72_value_set(preset["value"]);
            }
            
            void numberobj_73_init() {
                this->numberobj_73_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-32"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_73_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_73_value;
            }
            
            void numberobj_73_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_73_value_set(preset["value"]);
            }
            
            void numberobj_74_init() {
                this->numberobj_74_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-73"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_74_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_74_value;
            }
            
            void numberobj_74_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_74_value_set(preset["value"]);
            }
            
            void numberobj_75_init() {
                this->numberobj_75_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-49"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_75_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_75_value;
            }
            
            void numberobj_75_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_75_value_set(preset["value"]);
            }
            
            void numberobj_76_init() {
                this->numberobj_76_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-116"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_76_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_76_value;
            }
            
            void numberobj_76_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_76_value_set(preset["value"]);
            }
            
            void numberobj_77_init() {
                this->numberobj_77_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-35"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_77_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_77_value;
            }
            
            void numberobj_77_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_77_value_set(preset["value"]);
            }
            
            void numberobj_78_init() {
                this->numberobj_78_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-70"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_78_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_78_value;
            }
            
            void numberobj_78_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_78_value_set(preset["value"]);
            }
            
            void numberobj_79_init() {
                this->numberobj_79_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-52"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_79_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_79_value;
            }
            
            void numberobj_79_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_79_value_set(preset["value"]);
            }
            
            void numberobj_80_init() {
                this->numberobj_80_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-38"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_80_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_80_value;
            }
            
            void numberobj_80_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_80_value_set(preset["value"]);
            }
            
            void numberobj_81_init() {
                this->numberobj_81_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-119"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_81_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_81_value;
            }
            
            void numberobj_81_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_81_value_set(preset["value"]);
            }
            
            void numberobj_82_init() {
                this->numberobj_82_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-67"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_82_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_82_value;
            }
            
            void numberobj_82_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_82_value_set(preset["value"]);
            }
            
            void numberobj_83_init() {
                this->numberobj_83_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-162"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_83_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_83_value;
            }
            
            void numberobj_83_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_83_value_set(preset["value"]);
            }
            
            void message_29_init() {
                this->message_29_set_set({1});
            }
            
            void message_30_init() {
                this->message_30_set_set({2});
            }
            
            void numberobj_84_init() {
                this->numberobj_84_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-41"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_84_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_84_value;
            }
            
            void numberobj_84_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_84_value_set(preset["value"]);
            }
            
            void numberobj_85_init() {
                this->numberobj_85_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-64"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_85_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_85_value;
            }
            
            void numberobj_85_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_85_value_set(preset["value"]);
            }
            
            void numberobj_86_init() {
                this->numberobj_86_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-122"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_86_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_86_value;
            }
            
            void numberobj_86_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_86_value_set(preset["value"]);
            }
            
            void numberobj_87_init() {
                this->numberobj_87_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-55"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_87_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_87_value;
            }
            
            void numberobj_87_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_87_value_set(preset["value"]);
            }
            
            void message_31_init() {
                this->message_31_set_set({3});
            }
            
            void message_32_init() {
                this->message_32_set_set({4});
            }
            
            void numberobj_88_init() {
                this->numberobj_88_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/stutter-withtempo/number_obj-58"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_88_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_88_value;
            }
            
            void numberobj_88_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_88_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                loadmess_05_message = { 60000 };
                numberobj_53_value = 0;
                numberobj_53_value_setter(numberobj_53_value);
                numberobj_54_value = 0;
                numberobj_54_value_setter(numberobj_54_value);
                expr_43_in1 = 0;
                expr_43_in2 = 4;
                expr_43_out1 = 0;
                numberobj_55_value = 0;
                numberobj_55_value_setter(numberobj_55_value);
                expr_44_in1 = 0;
                expr_44_in2 = 0;
                expr_44_out1 = 0;
                pak_05_in1 = 0;
                pak_05_in2 = 0;
                pak_05_in3 = 0;
                pak_05_in4 = 0;
                pak_05_in5 = 0;
                pak_05_in6 = 0;
                pak_05_in7 = 0;
                pak_05_in8 = 0;
                pak_06_in1 = 0;
                pak_06_in2 = 0;
                pak_06_in3 = 0;
                pak_06_in4 = 0;
                pak_06_in5 = 0;
                pak_06_in6 = 0;
                pak_06_in7 = 0;
                pak_06_in8 = 0;
                pak_07_in1 = 0;
                pak_07_in2 = 0;
                pak_07_in3 = 0;
                pak_07_in4 = 0;
                pak_07_in5 = 0;
                pak_07_in6 = 0;
                pak_07_in7 = 0;
                pak_07_in8 = 0;
                expr_45_in1 = 0;
                expr_45_in2 = 0;
                expr_45_out1 = 0;
                numberobj_56_value = 0;
                numberobj_56_value_setter(numberobj_56_value);
                pak_08_in1 = 0;
                pak_08_in2 = 0;
                pak_08_in3 = 0;
                pak_08_in4 = 0;
                pak_08_in5 = 0;
                pak_08_in6 = 0;
                pak_08_in7 = 0;
                pak_08_in8 = 0;
                expr_46_in1 = 0;
                expr_46_in2 = 4;
                expr_46_out1 = 0;
                numberobj_57_value = 0;
                numberobj_57_value_setter(numberobj_57_value);
                expr_47_in1 = 0;
                expr_47_in2 = 5;
                expr_47_out1 = 0;
                expr_48_in1 = 0;
                expr_48_in2 = 2;
                expr_48_out1 = 0;
                expr_49_in1 = 0;
                expr_49_in2 = 3;
                expr_49_out1 = 0;
                numberobj_58_value = 0;
                numberobj_58_value_setter(numberobj_58_value);
                numberobj_59_value = 0;
                numberobj_59_value_setter(numberobj_59_value);
                tempo_01_input_number = 0;
                numberobj_60_value = 0;
                numberobj_60_value_setter(numberobj_60_value);
                expr_50_in1 = 0;
                expr_50_in2 = 2;
                expr_50_out1 = 0;
                expr_51_in1 = 0;
                expr_51_in2 = 2;
                expr_51_out1 = 0;
                numberobj_61_value = 0;
                numberobj_61_value_setter(numberobj_61_value);
                expr_52_in1 = 0;
                expr_52_in2 = 3;
                expr_52_out1 = 0;
                numberobj_62_value = 0;
                numberobj_62_value_setter(numberobj_62_value);
                expr_53_in1 = 0;
                expr_53_in2 = 0;
                expr_53_out1 = 0;
                numberobj_63_value = 0;
                numberobj_63_value_setter(numberobj_63_value);
                numberobj_64_value = 0;
                numberobj_64_value_setter(numberobj_64_value);
                numberobj_65_value = 0;
                numberobj_65_value_setter(numberobj_65_value);
                expr_54_in1 = 0;
                expr_54_in2 = 3;
                expr_54_out1 = 0;
                numberobj_66_value = 0;
                numberobj_66_value_setter(numberobj_66_value);
                expr_55_in1 = 0;
                expr_55_in2 = 0;
                expr_55_out1 = 0;
                numberobj_67_value = 0;
                numberobj_67_value_setter(numberobj_67_value);
                expr_56_in1 = 0;
                expr_56_in2 = 2;
                expr_56_out1 = 0;
                numberobj_68_value = 0;
                numberobj_68_value_setter(numberobj_68_value);
                numberobj_69_value = 0;
                numberobj_69_value_setter(numberobj_69_value);
                expr_57_in1 = 0;
                expr_57_in2 = 2;
                expr_57_out1 = 0;
                numberobj_70_value = 0;
                numberobj_70_value_setter(numberobj_70_value);
                expr_58_in1 = 0;
                expr_58_in2 = 3;
                expr_58_out1 = 0;
                expr_59_in1 = 0;
                expr_59_in2 = 0;
                expr_59_out1 = 0;
                numberobj_71_value = 0;
                numberobj_71_value_setter(numberobj_71_value);
                expr_60_in1 = 0;
                expr_60_in2 = 4;
                expr_60_out1 = 0;
                numberobj_72_value = 0;
                numberobj_72_value_setter(numberobj_72_value);
                numberobj_73_value = 0;
                numberobj_73_value_setter(numberobj_73_value);
                expr_61_in1 = 0;
                expr_61_in2 = 4;
                expr_61_out1 = 0;
                numberobj_74_value = 0;
                numberobj_74_value_setter(numberobj_74_value);
                expr_62_in1 = 0;
                expr_62_in2 = 6;
                expr_62_out1 = 0;
                expr_63_in1 = 0;
                expr_63_in2 = 0;
                expr_63_out1 = 0;
                numberobj_75_value = 0;
                numberobj_75_value_setter(numberobj_75_value);
                expr_64_in1 = 0;
                expr_64_in2 = 8;
                expr_64_out1 = 0;
                numberobj_76_value = 0;
                numberobj_76_value_setter(numberobj_76_value);
                numberobj_77_value = 0;
                numberobj_77_value_setter(numberobj_77_value);
                expr_65_in1 = 0;
                expr_65_in2 = 8;
                expr_65_out1 = 0;
                numberobj_78_value = 0;
                numberobj_78_value_setter(numberobj_78_value);
                expr_66_in1 = 0;
                expr_66_in2 = 12;
                expr_66_out1 = 0;
                expr_67_in1 = 0;
                expr_67_in2 = 0;
                expr_67_out1 = 0;
                numberobj_79_value = 0;
                numberobj_79_value_setter(numberobj_79_value);
                numberobj_80_value = 0;
                numberobj_80_value_setter(numberobj_80_value);
                expr_68_in1 = 0;
                expr_68_in2 = 16;
                expr_68_out1 = 0;
                expr_69_in1 = 0;
                expr_69_in2 = 16;
                expr_69_out1 = 0;
                numberobj_81_value = 0;
                numberobj_81_value_setter(numberobj_81_value);
                numberobj_82_value = 0;
                numberobj_82_value_setter(numberobj_82_value);
                expr_70_in1 = 0;
                expr_70_in2 = 24;
                expr_70_out1 = 0;
                numberobj_83_value = 0;
                numberobj_83_value_setter(numberobj_83_value);
                select_11_test1 = 0;
                select_11_test2 = 1;
                select_11_test3 = 2;
                select_11_test4 = 3;
                receive_15_output_number = 0;
                numberobj_84_value = 0;
                numberobj_84_value_setter(numberobj_84_value);
                expr_71_in1 = 0;
                expr_71_in2 = 32;
                expr_71_out1 = 0;
                numberobj_85_value = 0;
                numberobj_85_value_setter(numberobj_85_value);
                expr_72_in1 = 0;
                expr_72_in2 = 48;
                expr_72_out1 = 0;
                expr_73_in1 = 0;
                expr_73_in2 = 32;
                expr_73_out1 = 0;
                numberobj_86_value = 0;
                numberobj_86_value_setter(numberobj_86_value);
                expr_74_in1 = 0;
                expr_74_in2 = 0;
                expr_74_out1 = 0;
                numberobj_87_value = 0;
                numberobj_87_value_setter(numberobj_87_value);
                expr_75_in1 = 0;
                expr_75_in2 = 0;
                expr_75_out1 = 0;
                numberobj_88_value = 0;
                numberobj_88_value_setter(numberobj_88_value);
                expr_76_in1 = 0;
                expr_76_in2 = 64;
                expr_76_out1 = 0;
                switchobj_09_onoff = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_53_currentFormat = 6;
                numberobj_53_lastValue = 0;
                numberobj_54_currentFormat = 6;
                numberobj_54_lastValue = 0;
                numberobj_55_currentFormat = 6;
                numberobj_55_lastValue = 0;
                numberobj_56_currentFormat = 6;
                numberobj_56_lastValue = 0;
                numberobj_57_currentFormat = 6;
                numberobj_57_lastValue = 0;
                numberobj_58_currentFormat = 6;
                numberobj_58_lastValue = 0;
                numberobj_59_currentFormat = 6;
                numberobj_59_lastValue = 0;
                numberobj_60_currentFormat = 6;
                numberobj_60_lastValue = 0;
                numberobj_61_currentFormat = 6;
                numberobj_61_lastValue = 0;
                numberobj_62_currentFormat = 6;
                numberobj_62_lastValue = 0;
                numberobj_63_currentFormat = 6;
                numberobj_63_lastValue = 0;
                numberobj_64_currentFormat = 6;
                numberobj_64_lastValue = 0;
                numberobj_65_currentFormat = 6;
                numberobj_65_lastValue = 0;
                numberobj_66_currentFormat = 6;
                numberobj_66_lastValue = 0;
                numberobj_67_currentFormat = 6;
                numberobj_67_lastValue = 0;
                numberobj_68_currentFormat = 6;
                numberobj_68_lastValue = 0;
                numberobj_69_currentFormat = 6;
                numberobj_69_lastValue = 0;
                numberobj_70_currentFormat = 6;
                numberobj_70_lastValue = 0;
                numberobj_71_currentFormat = 6;
                numberobj_71_lastValue = 0;
                numberobj_72_currentFormat = 6;
                numberobj_72_lastValue = 0;
                numberobj_73_currentFormat = 6;
                numberobj_73_lastValue = 0;
                numberobj_74_currentFormat = 6;
                numberobj_74_lastValue = 0;
                numberobj_75_currentFormat = 6;
                numberobj_75_lastValue = 0;
                numberobj_76_currentFormat = 6;
                numberobj_76_lastValue = 0;
                numberobj_77_currentFormat = 6;
                numberobj_77_lastValue = 0;
                numberobj_78_currentFormat = 6;
                numberobj_78_lastValue = 0;
                numberobj_79_currentFormat = 6;
                numberobj_79_lastValue = 0;
                numberobj_80_currentFormat = 6;
                numberobj_80_lastValue = 0;
                numberobj_81_currentFormat = 6;
                numberobj_81_lastValue = 0;
                numberobj_82_currentFormat = 6;
                numberobj_82_lastValue = 0;
                numberobj_83_currentFormat = 6;
                numberobj_83_lastValue = 0;
                numberobj_84_currentFormat = 6;
                numberobj_84_lastValue = 0;
                numberobj_85_currentFormat = 6;
                numberobj_85_lastValue = 0;
                numberobj_86_currentFormat = 6;
                numberobj_86_lastValue = 0;
                numberobj_87_currentFormat = 6;
                numberobj_87_lastValue = 0;
                numberobj_88_currentFormat = 6;
                numberobj_88_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                list loadmess_05_message;
                number numberobj_53_value;
                number numberobj_54_value;
                number expr_43_in1;
                number expr_43_in2;
                number expr_43_out1;
                number numberobj_55_value;
                number expr_44_in1;
                number expr_44_in2;
                number expr_44_out1;
                number pak_05_in1;
                number pak_05_in2;
                number pak_05_in3;
                number pak_05_in4;
                number pak_05_in5;
                number pak_05_in6;
                number pak_05_in7;
                number pak_05_in8;
                number pak_06_in1;
                number pak_06_in2;
                number pak_06_in3;
                number pak_06_in4;
                number pak_06_in5;
                number pak_06_in6;
                number pak_06_in7;
                number pak_06_in8;
                number pak_07_in1;
                number pak_07_in2;
                number pak_07_in3;
                number pak_07_in4;
                number pak_07_in5;
                number pak_07_in6;
                number pak_07_in7;
                number pak_07_in8;
                number expr_45_in1;
                number expr_45_in2;
                number expr_45_out1;
                number numberobj_56_value;
                number pak_08_in1;
                number pak_08_in2;
                number pak_08_in3;
                number pak_08_in4;
                number pak_08_in5;
                number pak_08_in6;
                number pak_08_in7;
                number pak_08_in8;
                number expr_46_in1;
                number expr_46_in2;
                number expr_46_out1;
                number numberobj_57_value;
                number expr_47_in1;
                number expr_47_in2;
                number expr_47_out1;
                number expr_48_in1;
                number expr_48_in2;
                number expr_48_out1;
                number expr_49_in1;
                number expr_49_in2;
                number expr_49_out1;
                number numberobj_58_value;
                number numberobj_59_value;
                number tempo_01_input_number;
                number numberobj_60_value;
                number expr_50_in1;
                number expr_50_in2;
                number expr_50_out1;
                number expr_51_in1;
                number expr_51_in2;
                number expr_51_out1;
                number numberobj_61_value;
                number expr_52_in1;
                number expr_52_in2;
                number expr_52_out1;
                number numberobj_62_value;
                number expr_53_in1;
                number expr_53_in2;
                number expr_53_out1;
                number numberobj_63_value;
                number numberobj_64_value;
                number numberobj_65_value;
                number expr_54_in1;
                number expr_54_in2;
                number expr_54_out1;
                number numberobj_66_value;
                number expr_55_in1;
                number expr_55_in2;
                number expr_55_out1;
                number numberobj_67_value;
                number expr_56_in1;
                number expr_56_in2;
                number expr_56_out1;
                number numberobj_68_value;
                number numberobj_69_value;
                number expr_57_in1;
                number expr_57_in2;
                number expr_57_out1;
                number numberobj_70_value;
                number expr_58_in1;
                number expr_58_in2;
                number expr_58_out1;
                number expr_59_in1;
                number expr_59_in2;
                number expr_59_out1;
                number numberobj_71_value;
                number expr_60_in1;
                number expr_60_in2;
                number expr_60_out1;
                number numberobj_72_value;
                number numberobj_73_value;
                number expr_61_in1;
                number expr_61_in2;
                number expr_61_out1;
                number numberobj_74_value;
                number expr_62_in1;
                number expr_62_in2;
                number expr_62_out1;
                number expr_63_in1;
                number expr_63_in2;
                number expr_63_out1;
                number numberobj_75_value;
                number expr_64_in1;
                number expr_64_in2;
                number expr_64_out1;
                number numberobj_76_value;
                number numberobj_77_value;
                number expr_65_in1;
                number expr_65_in2;
                number expr_65_out1;
                number numberobj_78_value;
                number expr_66_in1;
                number expr_66_in2;
                number expr_66_out1;
                number expr_67_in1;
                number expr_67_in2;
                number expr_67_out1;
                number numberobj_79_value;
                number numberobj_80_value;
                number expr_68_in1;
                number expr_68_in2;
                number expr_68_out1;
                number expr_69_in1;
                number expr_69_in2;
                number expr_69_out1;
                number numberobj_81_value;
                number numberobj_82_value;
                number expr_70_in1;
                number expr_70_in2;
                number expr_70_out1;
                number numberobj_83_value;
                list message_29_set;
                number select_11_test1;
                number select_11_test2;
                number select_11_test3;
                number select_11_test4;
                number receive_15_output_number;
                list receive_15_output_list;
                list message_30_set;
                number numberobj_84_value;
                number expr_71_in1;
                number expr_71_in2;
                number expr_71_out1;
                number numberobj_85_value;
                number expr_72_in1;
                number expr_72_in2;
                number expr_72_out1;
                number expr_73_in1;
                number expr_73_in2;
                number expr_73_out1;
                number numberobj_86_value;
                number expr_74_in1;
                number expr_74_in2;
                number expr_74_out1;
                number numberobj_87_value;
                list message_31_set;
                list message_32_set;
                number expr_75_in1;
                number expr_75_in2;
                number expr_75_out1;
                number numberobj_88_value;
                number expr_76_in1;
                number expr_76_in2;
                number expr_76_out1;
                number switchobj_09_onoff;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_53_currentFormat;
                number numberobj_53_lastValue;
                Int numberobj_54_currentFormat;
                number numberobj_54_lastValue;
                Int numberobj_55_currentFormat;
                number numberobj_55_lastValue;
                Int numberobj_56_currentFormat;
                number numberobj_56_lastValue;
                Int numberobj_57_currentFormat;
                number numberobj_57_lastValue;
                Int numberobj_58_currentFormat;
                number numberobj_58_lastValue;
                Int numberobj_59_currentFormat;
                number numberobj_59_lastValue;
                Int numberobj_60_currentFormat;
                number numberobj_60_lastValue;
                Int numberobj_61_currentFormat;
                number numberobj_61_lastValue;
                Int numberobj_62_currentFormat;
                number numberobj_62_lastValue;
                Int numberobj_63_currentFormat;
                number numberobj_63_lastValue;
                Int numberobj_64_currentFormat;
                number numberobj_64_lastValue;
                Int numberobj_65_currentFormat;
                number numberobj_65_lastValue;
                Int numberobj_66_currentFormat;
                number numberobj_66_lastValue;
                Int numberobj_67_currentFormat;
                number numberobj_67_lastValue;
                Int numberobj_68_currentFormat;
                number numberobj_68_lastValue;
                Int numberobj_69_currentFormat;
                number numberobj_69_lastValue;
                Int numberobj_70_currentFormat;
                number numberobj_70_lastValue;
                Int numberobj_71_currentFormat;
                number numberobj_71_lastValue;
                Int numberobj_72_currentFormat;
                number numberobj_72_lastValue;
                Int numberobj_73_currentFormat;
                number numberobj_73_lastValue;
                Int numberobj_74_currentFormat;
                number numberobj_74_lastValue;
                Int numberobj_75_currentFormat;
                number numberobj_75_lastValue;
                Int numberobj_76_currentFormat;
                number numberobj_76_lastValue;
                Int numberobj_77_currentFormat;
                number numberobj_77_lastValue;
                Int numberobj_78_currentFormat;
                number numberobj_78_lastValue;
                Int numberobj_79_currentFormat;
                number numberobj_79_lastValue;
                Int numberobj_80_currentFormat;
                number numberobj_80_lastValue;
                Int numberobj_81_currentFormat;
                number numberobj_81_lastValue;
                Int numberobj_82_currentFormat;
                number numberobj_82_lastValue;
                Int numberobj_83_currentFormat;
                number numberobj_83_lastValue;
                Int numberobj_84_currentFormat;
                number numberobj_84_lastValue;
                Int numberobj_85_currentFormat;
                number numberobj_85_lastValue;
                Int numberobj_86_currentFormat;
                number numberobj_86_lastValue;
                Int numberobj_87_currentFormat;
                number numberobj_87_lastValue;
                Int numberobj_88_currentFormat;
                number numberobj_88_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_27 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_29;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_27()
            {
            }
            
            ~RNBOSubpatcher_27()
            {
            }
            
            virtual RNBOSubpatcher_29* getPatcher() const {
                return static_cast<RNBOSubpatcher_29 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/quantize[1]/message_obj-30") == objectId)
                        this->message_33_listin_number_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/message_obj-138") == objectId)
                        this->message_34_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("STUTTER/quantize[1]/number_obj-13") == objectId)
                        this->numberobj_89_valin_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-39") == objectId)
                        this->numberobj_90_valin_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-37") == objectId)
                        this->numberobj_91_valin_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-15") == objectId)
                        this->numberobj_92_valin_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-17") == objectId)
                        this->numberobj_93_valin_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-19") == objectId)
                        this->numberobj_94_valin_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-21") == objectId)
                        this->numberobj_95_valin_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-23") == objectId)
                        this->numberobj_96_valin_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-25") == objectId)
                        this->numberobj_97_valin_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-27") == objectId)
                        this->numberobj_98_valin_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-11") == objectId)
                        this->numberobj_99_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("STUTTER/quantize[1]/number_obj-13") == objectId)
                        this->numberobj_89_format_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-39") == objectId)
                        this->numberobj_90_format_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-37") == objectId)
                        this->numberobj_91_format_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-15") == objectId)
                        this->numberobj_92_format_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-17") == objectId)
                        this->numberobj_93_format_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-19") == objectId)
                        this->numberobj_94_format_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-21") == objectId)
                        this->numberobj_95_format_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-23") == objectId)
                        this->numberobj_96_format_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-25") == objectId)
                        this->numberobj_97_format_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-27") == objectId)
                        this->numberobj_98_format_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/number_obj-11") == objectId)
                        this->numberobj_99_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/quantize[1]/message_obj-30") == objectId)
                        this->message_33_listin_list_set(payload);
            
                    if (TAG("STUTTER/quantize[1]/message_obj-138") == objectId)
                        this->message_34_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/quantize[1]/message_obj-30") == objectId)
                        this->message_33_listin_bang_bang();
            
                    if (TAG("STUTTER/quantize[1]/message_obj-138") == objectId)
                        this->message_34_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("STUTTER/quantize[1]/message_obj-30"):
                    {
                    return "STUTTER/quantize[1]/message_obj-30";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("STUTTER/quantize[1]/number_obj-13"):
                    {
                    return "STUTTER/quantize[1]/number_obj-13";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("STUTTER/quantize[1]/message_obj-138"):
                    {
                    return "STUTTER/quantize[1]/message_obj-138";
                    }
                case TAG("STUTTER/quantize[1]/number_obj-39"):
                    {
                    return "STUTTER/quantize[1]/number_obj-39";
                    }
                case TAG("STUTTER/quantize[1]/number_obj-37"):
                    {
                    return "STUTTER/quantize[1]/number_obj-37";
                    }
                case TAG("STUTTER/quantize[1]/number_obj-15"):
                    {
                    return "STUTTER/quantize[1]/number_obj-15";
                    }
                case TAG("STUTTER/quantize[1]/number_obj-17"):
                    {
                    return "STUTTER/quantize[1]/number_obj-17";
                    }
                case TAG("STUTTER/quantize[1]/number_obj-19"):
                    {
                    return "STUTTER/quantize[1]/number_obj-19";
                    }
                case TAG("STUTTER/quantize[1]/number_obj-21"):
                    {
                    return "STUTTER/quantize[1]/number_obj-21";
                    }
                case TAG("STUTTER/quantize[1]/number_obj-23"):
                    {
                    return "STUTTER/quantize[1]/number_obj-23";
                    }
                case TAG("STUTTER/quantize[1]/number_obj-25"):
                    {
                    return "STUTTER/quantize[1]/number_obj-25";
                    }
                case TAG("STUTTER/quantize[1]/number_obj-27"):
                    {
                    return "STUTTER/quantize[1]/number_obj-27";
                    }
                case TAG("STUTTER/quantize[1]/number_obj-11"):
                    {
                    return "STUTTER/quantize[1]/number_obj-11";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void message_33_listin_list_set(const list& v) {
                this->message_33_set_set(v);
            }
            
            void message_33_listin_number_set(number v) {
                this->message_33_set_set(v);
            }
            
            void message_33_listin_bang_bang() {
                this->message_33_trigger_bang();
            }
            
            void numberobj_89_valin_set(number v) {
                this->numberobj_89_value_set(v);
            }
            
            void numberobj_89_format_set(number v) {
                this->numberobj_89_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_39_out1_bang_bang() {
                this->message_34_set_bang();
                this->message_34_trigger_bang();
            }
            
            void eventinlet_39_out1_number_set(number v) {
                {
                    list converted = {v};
                    this->message_34_set_set(converted);
                }
            
                this->message_34_trigger_bang();
            }
            
            void message_34_listin_list_set(const list& v) {
                this->message_34_set_set(v);
            }
            
            void message_34_listin_number_set(number v) {
                this->message_34_set_set(v);
            }
            
            void message_34_listin_bang_bang() {
                this->message_34_trigger_bang();
            }
            
            void numberobj_90_valin_set(number v) {
                this->numberobj_90_value_set(v);
            }
            
            void numberobj_90_format_set(number v) {
                this->numberobj_90_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_91_valin_set(number v) {
                this->numberobj_91_value_set(v);
            }
            
            void numberobj_91_format_set(number v) {
                this->numberobj_91_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_92_valin_set(number v) {
                this->numberobj_92_value_set(v);
            }
            
            void numberobj_92_format_set(number v) {
                this->numberobj_92_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_93_valin_set(number v) {
                this->numberobj_93_value_set(v);
            }
            
            void numberobj_93_format_set(number v) {
                this->numberobj_93_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_94_valin_set(number v) {
                this->numberobj_94_value_set(v);
            }
            
            void numberobj_94_format_set(number v) {
                this->numberobj_94_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_95_valin_set(number v) {
                this->numberobj_95_value_set(v);
            }
            
            void numberobj_95_format_set(number v) {
                this->numberobj_95_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_96_valin_set(number v) {
                this->numberobj_96_value_set(v);
            }
            
            void numberobj_96_format_set(number v) {
                this->numberobj_96_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_97_valin_set(number v) {
                this->numberobj_97_value_set(v);
            }
            
            void numberobj_97_format_set(number v) {
                this->numberobj_97_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_98_valin_set(number v) {
                this->numberobj_98_value_set(v);
            }
            
            void numberobj_98_format_set(number v) {
                this->numberobj_98_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_99_valin_set(number v) {
                this->numberobj_99_value_set(v);
            }
            
            void numberobj_99_format_set(number v) {
                this->numberobj_99_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_40_out1_bang_bang() {
                this->numberobj_99_value_bang();
            }
            
            void eventinlet_40_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_99_value_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->message_33_init();
                this->numberobj_89_init();
                this->message_34_init();
                this->numberobj_90_init();
                this->numberobj_91_init();
                this->numberobj_92_init();
                this->numberobj_93_init();
                this->numberobj_94_init();
                this->numberobj_95_init();
                this->numberobj_96_init();
                this->numberobj_97_init();
                this->numberobj_98_init();
                this->numberobj_99_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void message_34_set_set(const list& v) {
                this->message_34_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/quantize[1]/message_obj-138"),
                    v,
                    this->_currentTime
                );
            }
            
            void listlookup_05_lookup_set(const list& v) {
                this->listlookup_05_lookup = jsCreateListCopy(v);
            }
            
            void message_33_set_set(const list& v) {
                this->message_33_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/quantize[1]/message_obj-30"),
                    v,
                    this->_currentTime
                );
            }
            
            void eventoutlet_12_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_12_out1_number_set(v);
            }
            
            void numberobj_90_output_set(number v) {
                this->eventoutlet_12_in1_number_set(v);
            }
            
            void numberobj_90_value_set(number v) {
                this->numberobj_90_value_setter(v);
                v = this->numberobj_90_value;
                number localvalue = v;
            
                if (this->numberobj_90_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize[1]/number_obj-39"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_90_output_set(localvalue);
            }
            
            void listlookup_05_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_90_value_set(converted);
                }
            }
            
            void listlookup_05_input_set(const list& v) {
                this->listlookup_05_input = jsCreateListCopy(v);
                list tmp = list();
            
                for (Index i = 0; i < v->length; i++) {
                    long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
            
                    if (j >= 0 && (Index)(j) < this->listlookup_05_lookup->length)
                        tmp->push(this->listlookup_05_lookup[(Index)j]);
                }
            
                if ((bool)(tmp->length))
                    this->listlookup_05_out_set(tmp);
            }
            
            void numberobj_91_output_set(number v) {
                {
                    list converted = {v};
                    this->listlookup_05_input_set(converted);
                }
            }
            
            void numberobj_91_value_set(number v) {
                this->numberobj_91_value_setter(v);
                v = this->numberobj_91_value;
                number localvalue = v;
            
                if (this->numberobj_91_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize[1]/number_obj-37"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_91_output_set(localvalue);
            }
            
            void minimum_05_index_set(number v) {
                this->minimum_05_index = v;
                this->numberobj_91_value_set(v);
            }
            
            void minimum_05_out_set(number v) {
                this->minimum_05_out = v;
            }
            
            void minimum_05_input_set(const list& v) {
                this->minimum_05_input = jsCreateListCopy(v);
            
                if (v->length == 1) {
                    if (v[0] < this->minimum_05_right) {
                        this->minimum_05_index_set(0);
                        this->minimum_05_out_set(v[0]);
                    } else {
                        this->minimum_05_index_set(1);
                        this->minimum_05_out_set(this->minimum_05_right);
                    }
                } else if (v->length > 0) {
                    int idx = 0;
                    number minimum = v[0];
            
                    for (Index i = 1; i < v->length; i++) {
                        if (v[(Index)i] < minimum) {
                            minimum = v[(Index)i];
                            idx = i;
                        }
                    }
            
                    this->minimum_05_index_set(idx);
                    this->minimum_05_out_set(minimum);
                }
            }
            
            void message_33_out_set(const list& v) {
                this->minimum_05_input_set(v);
            }
            
            void message_33_trigger_bang() {
                this->message_33_out_set(this->message_33_set);
            }
            
            void pak_09_out_set(const list& v) {
                this->message_33_set_set(v);
                this->message_33_trigger_bang();
            }
            
            void pak_09_in8_set(number v) {
                this->pak_09_in8 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_09_in1;
                array[1] = this->pak_09_in2;
                array[2] = this->pak_09_in3;
                array[3] = this->pak_09_in4;
                array[4] = this->pak_09_in5;
                array[5] = this->pak_09_in6;
                array[6] = this->pak_09_in7;
                array[7] = this->pak_09_in8;
                this->pak_09_out_set(array);
            }
            
            void numberobj_98_output_set(number v) {
                this->pak_09_in8_set(v);
            }
            
            void numberobj_98_value_set(number v) {
                this->numberobj_98_value_setter(v);
                v = this->numberobj_98_value;
                number localvalue = v;
            
                if (this->numberobj_98_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize[1]/number_obj-27"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_98_output_set(localvalue);
            }
            
            void expr_84_out1_set(number v) {
                this->expr_84_out1 = v;
                this->numberobj_98_value_set(this->expr_84_out1);
            }
            
            void expr_84_in1_set(number in1) {
                this->expr_84_in1 = in1;
                this->expr_84_out1_set(rnbo_abs(this->expr_84_in1 - this->expr_84_in2));//#map:STUTTER/quantize[1]/absdiff_obj-7:1
            }
            
            void unpack_05_out8_set(number v) {
                this->unpack_05_out8 = v;
                this->expr_84_in1_set(v);
            }
            
            void pak_09_in7_set(number v) {
                this->pak_09_in7 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_09_in1;
                array[1] = this->pak_09_in2;
                array[2] = this->pak_09_in3;
                array[3] = this->pak_09_in4;
                array[4] = this->pak_09_in5;
                array[5] = this->pak_09_in6;
                array[6] = this->pak_09_in7;
                array[7] = this->pak_09_in8;
                this->pak_09_out_set(array);
            }
            
            void numberobj_97_output_set(number v) {
                this->pak_09_in7_set(v);
            }
            
            void numberobj_97_value_set(number v) {
                this->numberobj_97_value_setter(v);
                v = this->numberobj_97_value;
                number localvalue = v;
            
                if (this->numberobj_97_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize[1]/number_obj-25"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_97_output_set(localvalue);
            }
            
            void expr_83_out1_set(number v) {
                this->expr_83_out1 = v;
                this->numberobj_97_value_set(this->expr_83_out1);
            }
            
            void expr_83_in1_set(number in1) {
                this->expr_83_in1 = in1;
                this->expr_83_out1_set(rnbo_abs(this->expr_83_in1 - this->expr_83_in2));//#map:STUTTER/quantize[1]/absdiff_obj-6:1
            }
            
            void unpack_05_out7_set(number v) {
                this->unpack_05_out7 = v;
                this->expr_83_in1_set(v);
            }
            
            void pak_09_in6_set(number v) {
                this->pak_09_in6 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_09_in1;
                array[1] = this->pak_09_in2;
                array[2] = this->pak_09_in3;
                array[3] = this->pak_09_in4;
                array[4] = this->pak_09_in5;
                array[5] = this->pak_09_in6;
                array[6] = this->pak_09_in7;
                array[7] = this->pak_09_in8;
                this->pak_09_out_set(array);
            }
            
            void numberobj_96_output_set(number v) {
                this->pak_09_in6_set(v);
            }
            
            void numberobj_96_value_set(number v) {
                this->numberobj_96_value_setter(v);
                v = this->numberobj_96_value;
                number localvalue = v;
            
                if (this->numberobj_96_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize[1]/number_obj-23"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_96_output_set(localvalue);
            }
            
            void expr_82_out1_set(number v) {
                this->expr_82_out1 = v;
                this->numberobj_96_value_set(this->expr_82_out1);
            }
            
            void expr_82_in1_set(number in1) {
                this->expr_82_in1 = in1;
                this->expr_82_out1_set(rnbo_abs(this->expr_82_in1 - this->expr_82_in2));//#map:STUTTER/quantize[1]/absdiff_obj-5:1
            }
            
            void unpack_05_out6_set(number v) {
                this->unpack_05_out6 = v;
                this->expr_82_in1_set(v);
            }
            
            void pak_09_in5_set(number v) {
                this->pak_09_in5 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_09_in1;
                array[1] = this->pak_09_in2;
                array[2] = this->pak_09_in3;
                array[3] = this->pak_09_in4;
                array[4] = this->pak_09_in5;
                array[5] = this->pak_09_in6;
                array[6] = this->pak_09_in7;
                array[7] = this->pak_09_in8;
                this->pak_09_out_set(array);
            }
            
            void numberobj_95_output_set(number v) {
                this->pak_09_in5_set(v);
            }
            
            void numberobj_95_value_set(number v) {
                this->numberobj_95_value_setter(v);
                v = this->numberobj_95_value;
                number localvalue = v;
            
                if (this->numberobj_95_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize[1]/number_obj-21"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_95_output_set(localvalue);
            }
            
            void expr_81_out1_set(number v) {
                this->expr_81_out1 = v;
                this->numberobj_95_value_set(this->expr_81_out1);
            }
            
            void expr_81_in1_set(number in1) {
                this->expr_81_in1 = in1;
                this->expr_81_out1_set(rnbo_abs(this->expr_81_in1 - this->expr_81_in2));//#map:STUTTER/quantize[1]/absdiff_obj-4:1
            }
            
            void unpack_05_out5_set(number v) {
                this->unpack_05_out5 = v;
                this->expr_81_in1_set(v);
            }
            
            void pak_09_in4_set(number v) {
                this->pak_09_in4 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_09_in1;
                array[1] = this->pak_09_in2;
                array[2] = this->pak_09_in3;
                array[3] = this->pak_09_in4;
                array[4] = this->pak_09_in5;
                array[5] = this->pak_09_in6;
                array[6] = this->pak_09_in7;
                array[7] = this->pak_09_in8;
                this->pak_09_out_set(array);
            }
            
            void numberobj_94_output_set(number v) {
                this->pak_09_in4_set(v);
            }
            
            void numberobj_94_value_set(number v) {
                this->numberobj_94_value_setter(v);
                v = this->numberobj_94_value;
                number localvalue = v;
            
                if (this->numberobj_94_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize[1]/number_obj-19"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_94_output_set(localvalue);
            }
            
            void expr_80_out1_set(number v) {
                this->expr_80_out1 = v;
                this->numberobj_94_value_set(this->expr_80_out1);
            }
            
            void expr_80_in1_set(number in1) {
                this->expr_80_in1 = in1;
                this->expr_80_out1_set(rnbo_abs(this->expr_80_in1 - this->expr_80_in2));//#map:STUTTER/quantize[1]/absdiff_obj-3:1
            }
            
            void unpack_05_out4_set(number v) {
                this->unpack_05_out4 = v;
                this->expr_80_in1_set(v);
            }
            
            void pak_09_in3_set(number v) {
                this->pak_09_in3 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_09_in1;
                array[1] = this->pak_09_in2;
                array[2] = this->pak_09_in3;
                array[3] = this->pak_09_in4;
                array[4] = this->pak_09_in5;
                array[5] = this->pak_09_in6;
                array[6] = this->pak_09_in7;
                array[7] = this->pak_09_in8;
                this->pak_09_out_set(array);
            }
            
            void numberobj_93_output_set(number v) {
                this->pak_09_in3_set(v);
            }
            
            void numberobj_93_value_set(number v) {
                this->numberobj_93_value_setter(v);
                v = this->numberobj_93_value;
                number localvalue = v;
            
                if (this->numberobj_93_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize[1]/number_obj-17"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_93_output_set(localvalue);
            }
            
            void expr_79_out1_set(number v) {
                this->expr_79_out1 = v;
                this->numberobj_93_value_set(this->expr_79_out1);
            }
            
            void expr_79_in1_set(number in1) {
                this->expr_79_in1 = in1;
                this->expr_79_out1_set(rnbo_abs(this->expr_79_in1 - this->expr_79_in2));//#map:STUTTER/quantize[1]/absdiff_obj-2:1
            }
            
            void unpack_05_out3_set(number v) {
                this->unpack_05_out3 = v;
                this->expr_79_in1_set(v);
            }
            
            void pak_09_in2_set(number v) {
                this->pak_09_in2 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_09_in1;
                array[1] = this->pak_09_in2;
                array[2] = this->pak_09_in3;
                array[3] = this->pak_09_in4;
                array[4] = this->pak_09_in5;
                array[5] = this->pak_09_in6;
                array[6] = this->pak_09_in7;
                array[7] = this->pak_09_in8;
                this->pak_09_out_set(array);
            }
            
            void numberobj_92_output_set(number v) {
                this->pak_09_in2_set(v);
            }
            
            void numberobj_92_value_set(number v) {
                this->numberobj_92_value_setter(v);
                v = this->numberobj_92_value;
                number localvalue = v;
            
                if (this->numberobj_92_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize[1]/number_obj-15"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_92_output_set(localvalue);
            }
            
            void expr_78_out1_set(number v) {
                this->expr_78_out1 = v;
                this->numberobj_92_value_set(this->expr_78_out1);
            }
            
            void expr_78_in1_set(number in1) {
                this->expr_78_in1 = in1;
                this->expr_78_out1_set(rnbo_abs(this->expr_78_in1 - this->expr_78_in2));//#map:STUTTER/quantize[1]/absdiff_obj-1:1
            }
            
            void unpack_05_out2_set(number v) {
                this->unpack_05_out2 = v;
                this->expr_78_in1_set(v);
            }
            
            void pak_09_in1_set(number v) {
                this->pak_09_in1 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_09_in1;
                array[1] = this->pak_09_in2;
                array[2] = this->pak_09_in3;
                array[3] = this->pak_09_in4;
                array[4] = this->pak_09_in5;
                array[5] = this->pak_09_in6;
                array[6] = this->pak_09_in7;
                array[7] = this->pak_09_in8;
                this->pak_09_out_set(array);
            }
            
            void numberobj_89_output_set(number v) {
                this->pak_09_in1_set(v);
            }
            
            void numberobj_89_value_set(number v) {
                this->numberobj_89_value_setter(v);
                v = this->numberobj_89_value;
                number localvalue = v;
            
                if (this->numberobj_89_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize[1]/number_obj-13"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_89_output_set(localvalue);
            }
            
            void expr_77_out1_set(number v) {
                this->expr_77_out1 = v;
                this->numberobj_89_value_set(this->expr_77_out1);
            }
            
            void expr_77_in1_set(number in1) {
                this->expr_77_in1 = in1;
                this->expr_77_out1_set(rnbo_abs(this->expr_77_in1 - this->expr_77_in2));//#map:STUTTER/quantize[1]/absdiff_obj-143:1
            }
            
            void unpack_05_out1_set(number v) {
                this->unpack_05_out1 = v;
                this->expr_77_in1_set(v);
            }
            
            void unpack_05_input_list_set(const list& v) {
                if (v->length > 7)
                    this->unpack_05_out8_set(v[7]);
            
                if (v->length > 6)
                    this->unpack_05_out7_set(v[6]);
            
                if (v->length > 5)
                    this->unpack_05_out6_set(v[5]);
            
                if (v->length > 4)
                    this->unpack_05_out5_set(v[4]);
            
                if (v->length > 3)
                    this->unpack_05_out4_set(v[3]);
            
                if (v->length > 2)
                    this->unpack_05_out3_set(v[2]);
            
                if (v->length > 1)
                    this->unpack_05_out2_set(v[1]);
            
                if (v->length > 0)
                    this->unpack_05_out1_set(v[0]);
            }
            
            void message_34_out_set(const list& v) {
                this->listlookup_05_lookup_set(v);
                this->unpack_05_input_list_set(v);
            }
            
            void message_34_trigger_bang() {
                this->message_34_out_set(this->message_34_set);
            }
            
            void eventinlet_39_out1_list_set(const list& v) {
                this->message_34_set_set(v);
                this->message_34_trigger_bang();
            }
            
            void expr_84_in2_set(number v) {
                this->expr_84_in2 = v;
                this->expr_84_in1_set(this->expr_84_in1);
            }
            
            void expr_83_in2_set(number v) {
                this->expr_83_in2 = v;
                this->expr_83_in1_set(this->expr_83_in1);
            }
            
            void expr_82_in2_set(number v) {
                this->expr_82_in2 = v;
                this->expr_82_in1_set(this->expr_82_in1);
            }
            
            void expr_81_in2_set(number v) {
                this->expr_81_in2 = v;
                this->expr_81_in1_set(this->expr_81_in1);
            }
            
            void expr_80_in2_set(number v) {
                this->expr_80_in2 = v;
                this->expr_80_in1_set(this->expr_80_in1);
            }
            
            void expr_79_in2_set(number v) {
                this->expr_79_in2 = v;
                this->expr_79_in1_set(this->expr_79_in1);
            }
            
            void expr_78_in2_set(number v) {
                this->expr_78_in2 = v;
                this->expr_78_in1_set(this->expr_78_in1);
            }
            
            void expr_77_in2_set(number v) {
                this->expr_77_in2 = v;
                this->expr_77_in1_set(this->expr_77_in1);
            }
            
            void numberobj_99_output_set(number v) {
                this->expr_84_in2_set(v);
                this->expr_83_in2_set(v);
                this->expr_82_in2_set(v);
                this->expr_81_in2_set(v);
                this->expr_80_in2_set(v);
                this->expr_79_in2_set(v);
                this->expr_78_in2_set(v);
                this->expr_77_in2_set(v);
            }
            
            void numberobj_99_value_set(number v) {
                this->numberobj_99_value_setter(v);
                v = this->numberobj_99_value;
                number localvalue = v;
            
                if (this->numberobj_99_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize[1]/number_obj-11"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_99_output_set(localvalue);
            }
            
            void eventinlet_40_out1_number_set(number v) {
                this->numberobj_99_value_set(v);
            }
            
            void message_34_set_bang() {
                list v = this->message_34_set;
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/quantize[1]/message_obj-138"),
                    v,
                    this->_currentTime
                );
            }
            
            void numberobj_99_value_bang() {
                number v = this->numberobj_99_value;
                number localvalue = v;
            
                if (this->numberobj_99_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize[1]/number_obj-11"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_99_output_set(localvalue);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_89_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_89_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_89_value = localvalue;
            }
            
            void numberobj_90_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_90_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_90_value = localvalue;
            }
            
            void numberobj_91_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_91_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_91_value = localvalue;
            }
            
            void numberobj_92_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_92_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_92_value = localvalue;
            }
            
            void numberobj_93_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_93_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_93_value = localvalue;
            }
            
            void numberobj_94_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_94_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_94_value = localvalue;
            }
            
            void numberobj_95_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_95_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_95_value = localvalue;
            }
            
            void numberobj_96_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_96_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_96_value = localvalue;
            }
            
            void numberobj_97_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_97_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_97_value = localvalue;
            }
            
            void numberobj_98_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_98_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_98_value = localvalue;
            }
            
            void numberobj_99_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_99_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_99_value = localvalue;
            }
            
            void message_33_init() {
                this->message_33_set_set({
                    873.648651,
                    126.351349,
                    626.351349,
                    876.351349,
                    1001.351349,
                    1063.851349,
                    1095.101349,
                    1110.726349
                });
            }
            
            void numberobj_89_init() {
                this->numberobj_89_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/quantize[1]/number_obj-13"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_89_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_89_value;
            }
            
            void numberobj_89_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_89_value_set(preset["value"]);
            }
            
            void message_34_init() {
                this->message_34_set_set({2000, 1000, 500, 250, 125, 62.5, 31.25, 15.625});
            }
            
            void numberobj_90_init() {
                this->numberobj_90_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/quantize[1]/number_obj-39"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_90_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_90_value;
            }
            
            void numberobj_90_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_90_value_set(preset["value"]);
            }
            
            void numberobj_91_init() {
                this->numberobj_91_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/quantize[1]/number_obj-37"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_91_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_91_value;
            }
            
            void numberobj_91_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_91_value_set(preset["value"]);
            }
            
            void numberobj_92_init() {
                this->numberobj_92_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/quantize[1]/number_obj-15"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_92_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_92_value;
            }
            
            void numberobj_92_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_92_value_set(preset["value"]);
            }
            
            void numberobj_93_init() {
                this->numberobj_93_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/quantize[1]/number_obj-17"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_93_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_93_value;
            }
            
            void numberobj_93_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_93_value_set(preset["value"]);
            }
            
            void numberobj_94_init() {
                this->numberobj_94_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/quantize[1]/number_obj-19"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_94_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_94_value;
            }
            
            void numberobj_94_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_94_value_set(preset["value"]);
            }
            
            void numberobj_95_init() {
                this->numberobj_95_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/quantize[1]/number_obj-21"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_95_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_95_value;
            }
            
            void numberobj_95_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_95_value_set(preset["value"]);
            }
            
            void numberobj_96_init() {
                this->numberobj_96_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/quantize[1]/number_obj-23"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_96_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_96_value;
            }
            
            void numberobj_96_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_96_value_set(preset["value"]);
            }
            
            void numberobj_97_init() {
                this->numberobj_97_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/quantize[1]/number_obj-25"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_97_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_97_value;
            }
            
            void numberobj_97_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_97_value_set(preset["value"]);
            }
            
            void numberobj_98_init() {
                this->numberobj_98_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/quantize[1]/number_obj-27"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_98_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_98_value;
            }
            
            void numberobj_98_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_98_value_set(preset["value"]);
            }
            
            void numberobj_99_init() {
                this->numberobj_99_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("STUTTER/quantize[1]/number_obj-11"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_99_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_99_value;
            }
            
            void numberobj_99_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_99_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                minimum_05_right = 0;
                minimum_05_out = 0;
                minimum_05_index = 0;
                pak_09_in1 = 0;
                pak_09_in2 = 0;
                pak_09_in3 = 0;
                pak_09_in4 = 0;
                pak_09_in5 = 0;
                pak_09_in6 = 0;
                pak_09_in7 = 0;
                pak_09_in8 = 0;
                numberobj_89_value = 0;
                numberobj_89_value_setter(numberobj_89_value);
                expr_77_in1 = 0;
                expr_77_in2 = 0;
                expr_77_out1 = 0;
                unpack_05_out1 = 0;
                unpack_05_out2 = 0;
                unpack_05_out3 = 0;
                unpack_05_out4 = 0;
                unpack_05_out5 = 0;
                unpack_05_out6 = 0;
                unpack_05_out7 = 0;
                unpack_05_out8 = 0;
                numberobj_90_value = 0;
                numberobj_90_value_setter(numberobj_90_value);
                numberobj_91_value = 0;
                numberobj_91_value_setter(numberobj_91_value);
                numberobj_92_value = 0;
                numberobj_92_value_setter(numberobj_92_value);
                expr_78_in1 = 0;
                expr_78_in2 = 0;
                expr_78_out1 = 0;
                numberobj_93_value = 0;
                numberobj_93_value_setter(numberobj_93_value);
                expr_79_in1 = 0;
                expr_79_in2 = 0;
                expr_79_out1 = 0;
                numberobj_94_value = 0;
                numberobj_94_value_setter(numberobj_94_value);
                expr_80_in1 = 0;
                expr_80_in2 = 0;
                expr_80_out1 = 0;
                numberobj_95_value = 0;
                numberobj_95_value_setter(numberobj_95_value);
                expr_81_in1 = 0;
                expr_81_in2 = 0;
                expr_81_out1 = 0;
                numberobj_96_value = 0;
                numberobj_96_value_setter(numberobj_96_value);
                expr_82_in1 = 0;
                expr_82_in2 = 0;
                expr_82_out1 = 0;
                numberobj_97_value = 0;
                numberobj_97_value_setter(numberobj_97_value);
                expr_83_in1 = 0;
                expr_83_in2 = 0;
                expr_83_out1 = 0;
                numberobj_98_value = 0;
                numberobj_98_value_setter(numberobj_98_value);
                expr_84_in1 = 0;
                expr_84_in2 = 0;
                expr_84_out1 = 0;
                numberobj_99_value = 0;
                numberobj_99_value_setter(numberobj_99_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_89_currentFormat = 6;
                numberobj_89_lastValue = 0;
                numberobj_90_currentFormat = 6;
                numberobj_90_lastValue = 0;
                numberobj_91_currentFormat = 6;
                numberobj_91_lastValue = 0;
                numberobj_92_currentFormat = 6;
                numberobj_92_lastValue = 0;
                numberobj_93_currentFormat = 6;
                numberobj_93_lastValue = 0;
                numberobj_94_currentFormat = 6;
                numberobj_94_lastValue = 0;
                numberobj_95_currentFormat = 6;
                numberobj_95_lastValue = 0;
                numberobj_96_currentFormat = 6;
                numberobj_96_lastValue = 0;
                numberobj_97_currentFormat = 6;
                numberobj_97_lastValue = 0;
                numberobj_98_currentFormat = 6;
                numberobj_98_lastValue = 0;
                numberobj_99_currentFormat = 6;
                numberobj_99_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                list minimum_05_input;
                number minimum_05_right;
                number minimum_05_out;
                number minimum_05_index;
                list message_33_set;
                number pak_09_in1;
                number pak_09_in2;
                number pak_09_in3;
                number pak_09_in4;
                number pak_09_in5;
                number pak_09_in6;
                number pak_09_in7;
                number pak_09_in8;
                number numberobj_89_value;
                number expr_77_in1;
                number expr_77_in2;
                number expr_77_out1;
                number unpack_05_out1;
                number unpack_05_out2;
                number unpack_05_out3;
                number unpack_05_out4;
                number unpack_05_out5;
                number unpack_05_out6;
                number unpack_05_out7;
                number unpack_05_out8;
                list message_34_set;
                number numberobj_90_value;
                number numberobj_91_value;
                list listlookup_05_input;
                list listlookup_05_lookup;
                number numberobj_92_value;
                number expr_78_in1;
                number expr_78_in2;
                number expr_78_out1;
                number numberobj_93_value;
                number expr_79_in1;
                number expr_79_in2;
                number expr_79_out1;
                number numberobj_94_value;
                number expr_80_in1;
                number expr_80_in2;
                number expr_80_out1;
                number numberobj_95_value;
                number expr_81_in1;
                number expr_81_in2;
                number expr_81_out1;
                number numberobj_96_value;
                number expr_82_in1;
                number expr_82_in2;
                number expr_82_out1;
                number numberobj_97_value;
                number expr_83_in1;
                number expr_83_in2;
                number expr_83_out1;
                number numberobj_98_value;
                number expr_84_in1;
                number expr_84_in2;
                number expr_84_out1;
                number numberobj_99_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_89_currentFormat;
                number numberobj_89_lastValue;
                Int numberobj_90_currentFormat;
                number numberobj_90_lastValue;
                Int numberobj_91_currentFormat;
                number numberobj_91_lastValue;
                Int numberobj_92_currentFormat;
                number numberobj_92_lastValue;
                Int numberobj_93_currentFormat;
                number numberobj_93_lastValue;
                Int numberobj_94_currentFormat;
                number numberobj_94_lastValue;
                Int numberobj_95_currentFormat;
                number numberobj_95_lastValue;
                Int numberobj_96_currentFormat;
                number numberobj_96_lastValue;
                Int numberobj_97_currentFormat;
                number numberobj_97_lastValue;
                Int numberobj_98_currentFormat;
                number numberobj_98_lastValue;
                Int numberobj_99_currentFormat;
                number numberobj_99_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_28 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_29;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_28()
            {
            }
            
            ~RNBOSubpatcher_28()
            {
            }
            
            virtual RNBOSubpatcher_29* getPatcher() const {
                return static_cast<RNBOSubpatcher_29 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/quantize/message_obj-30") == objectId)
                        this->message_35_listin_number_set(payload);
            
                    if (TAG("STUTTER/quantize/message_obj-138") == objectId)
                        this->message_36_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("STUTTER/quantize/number_obj-13") == objectId)
                        this->numberobj_100_valin_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-39") == objectId)
                        this->numberobj_101_valin_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-37") == objectId)
                        this->numberobj_102_valin_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-15") == objectId)
                        this->numberobj_103_valin_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-17") == objectId)
                        this->numberobj_104_valin_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-19") == objectId)
                        this->numberobj_105_valin_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-21") == objectId)
                        this->numberobj_106_valin_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-23") == objectId)
                        this->numberobj_107_valin_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-25") == objectId)
                        this->numberobj_108_valin_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-27") == objectId)
                        this->numberobj_109_valin_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-11") == objectId)
                        this->numberobj_110_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("STUTTER/quantize/number_obj-13") == objectId)
                        this->numberobj_100_format_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-39") == objectId)
                        this->numberobj_101_format_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-37") == objectId)
                        this->numberobj_102_format_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-15") == objectId)
                        this->numberobj_103_format_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-17") == objectId)
                        this->numberobj_104_format_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-19") == objectId)
                        this->numberobj_105_format_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-21") == objectId)
                        this->numberobj_106_format_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-23") == objectId)
                        this->numberobj_107_format_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-25") == objectId)
                        this->numberobj_108_format_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-27") == objectId)
                        this->numberobj_109_format_set(payload);
            
                    if (TAG("STUTTER/quantize/number_obj-11") == objectId)
                        this->numberobj_110_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/quantize/message_obj-30") == objectId)
                        this->message_35_listin_list_set(payload);
            
                    if (TAG("STUTTER/quantize/message_obj-138") == objectId)
                        this->message_36_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("STUTTER/quantize/message_obj-30") == objectId)
                        this->message_35_listin_bang_bang();
            
                    if (TAG("STUTTER/quantize/message_obj-138") == objectId)
                        this->message_36_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("STUTTER/quantize/message_obj-30"):
                    {
                    return "STUTTER/quantize/message_obj-30";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("STUTTER/quantize/number_obj-13"):
                    {
                    return "STUTTER/quantize/number_obj-13";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("STUTTER/quantize/message_obj-138"):
                    {
                    return "STUTTER/quantize/message_obj-138";
                    }
                case TAG("STUTTER/quantize/number_obj-39"):
                    {
                    return "STUTTER/quantize/number_obj-39";
                    }
                case TAG("STUTTER/quantize/number_obj-37"):
                    {
                    return "STUTTER/quantize/number_obj-37";
                    }
                case TAG("STUTTER/quantize/number_obj-15"):
                    {
                    return "STUTTER/quantize/number_obj-15";
                    }
                case TAG("STUTTER/quantize/number_obj-17"):
                    {
                    return "STUTTER/quantize/number_obj-17";
                    }
                case TAG("STUTTER/quantize/number_obj-19"):
                    {
                    return "STUTTER/quantize/number_obj-19";
                    }
                case TAG("STUTTER/quantize/number_obj-21"):
                    {
                    return "STUTTER/quantize/number_obj-21";
                    }
                case TAG("STUTTER/quantize/number_obj-23"):
                    {
                    return "STUTTER/quantize/number_obj-23";
                    }
                case TAG("STUTTER/quantize/number_obj-25"):
                    {
                    return "STUTTER/quantize/number_obj-25";
                    }
                case TAG("STUTTER/quantize/number_obj-27"):
                    {
                    return "STUTTER/quantize/number_obj-27";
                    }
                case TAG("STUTTER/quantize/number_obj-11"):
                    {
                    return "STUTTER/quantize/number_obj-11";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void message_35_listin_list_set(const list& v) {
                this->message_35_set_set(v);
            }
            
            void message_35_listin_number_set(number v) {
                this->message_35_set_set(v);
            }
            
            void message_35_listin_bang_bang() {
                this->message_35_trigger_bang();
            }
            
            void numberobj_100_valin_set(number v) {
                this->numberobj_100_value_set(v);
            }
            
            void numberobj_100_format_set(number v) {
                this->numberobj_100_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_41_out1_bang_bang() {
                this->message_36_set_bang();
                this->message_36_trigger_bang();
            }
            
            void eventinlet_41_out1_number_set(number v) {
                {
                    list converted = {v};
                    this->message_36_set_set(converted);
                }
            
                this->message_36_trigger_bang();
            }
            
            void message_36_listin_list_set(const list& v) {
                this->message_36_set_set(v);
            }
            
            void message_36_listin_number_set(number v) {
                this->message_36_set_set(v);
            }
            
            void message_36_listin_bang_bang() {
                this->message_36_trigger_bang();
            }
            
            void numberobj_101_valin_set(number v) {
                this->numberobj_101_value_set(v);
            }
            
            void numberobj_101_format_set(number v) {
                this->numberobj_101_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_102_valin_set(number v) {
                this->numberobj_102_value_set(v);
            }
            
            void numberobj_102_format_set(number v) {
                this->numberobj_102_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_103_valin_set(number v) {
                this->numberobj_103_value_set(v);
            }
            
            void numberobj_103_format_set(number v) {
                this->numberobj_103_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_104_valin_set(number v) {
                this->numberobj_104_value_set(v);
            }
            
            void numberobj_104_format_set(number v) {
                this->numberobj_104_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_105_valin_set(number v) {
                this->numberobj_105_value_set(v);
            }
            
            void numberobj_105_format_set(number v) {
                this->numberobj_105_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_106_valin_set(number v) {
                this->numberobj_106_value_set(v);
            }
            
            void numberobj_106_format_set(number v) {
                this->numberobj_106_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_107_valin_set(number v) {
                this->numberobj_107_value_set(v);
            }
            
            void numberobj_107_format_set(number v) {
                this->numberobj_107_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_108_valin_set(number v) {
                this->numberobj_108_value_set(v);
            }
            
            void numberobj_108_format_set(number v) {
                this->numberobj_108_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_109_valin_set(number v) {
                this->numberobj_109_value_set(v);
            }
            
            void numberobj_109_format_set(number v) {
                this->numberobj_109_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_110_valin_set(number v) {
                this->numberobj_110_value_set(v);
            }
            
            void numberobj_110_format_set(number v) {
                this->numberobj_110_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_42_out1_bang_bang() {
                this->numberobj_110_value_bang();
            }
            
            void eventinlet_42_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_110_value_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->message_35_init();
                this->numberobj_100_init();
                this->message_36_init();
                this->numberobj_101_init();
                this->numberobj_102_init();
                this->numberobj_103_init();
                this->numberobj_104_init();
                this->numberobj_105_init();
                this->numberobj_106_init();
                this->numberobj_107_init();
                this->numberobj_108_init();
                this->numberobj_109_init();
                this->numberobj_110_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void message_36_set_set(const list& v) {
                this->message_36_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/quantize/message_obj-138"),
                    v,
                    this->_currentTime
                );
            }
            
            void listlookup_06_lookup_set(const list& v) {
                this->listlookup_06_lookup = jsCreateListCopy(v);
            }
            
            void message_35_set_set(const list& v) {
                this->message_35_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/quantize/message_obj-30"),
                    v,
                    this->_currentTime
                );
            }
            
            void eventoutlet_13_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_13_out1_number_set(v);
            }
            
            void numberobj_101_output_set(number v) {
                this->eventoutlet_13_in1_number_set(v);
            }
            
            void numberobj_101_value_set(number v) {
                this->numberobj_101_value_setter(v);
                v = this->numberobj_101_value;
                number localvalue = v;
            
                if (this->numberobj_101_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize/number_obj-39"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_101_output_set(localvalue);
            }
            
            void listlookup_06_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_101_value_set(converted);
                }
            }
            
            void listlookup_06_input_set(const list& v) {
                this->listlookup_06_input = jsCreateListCopy(v);
                list tmp = list();
            
                for (Index i = 0; i < v->length; i++) {
                    long j = (long)(rnbo_fround(v[(Index)i] * 1 / (number)1) * 1);
            
                    if (j >= 0 && (Index)(j) < this->listlookup_06_lookup->length)
                        tmp->push(this->listlookup_06_lookup[(Index)j]);
                }
            
                if ((bool)(tmp->length))
                    this->listlookup_06_out_set(tmp);
            }
            
            void numberobj_102_output_set(number v) {
                {
                    list converted = {v};
                    this->listlookup_06_input_set(converted);
                }
            }
            
            void numberobj_102_value_set(number v) {
                this->numberobj_102_value_setter(v);
                v = this->numberobj_102_value;
                number localvalue = v;
            
                if (this->numberobj_102_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize/number_obj-37"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_102_output_set(localvalue);
            }
            
            void minimum_06_index_set(number v) {
                this->minimum_06_index = v;
                this->numberobj_102_value_set(v);
            }
            
            void minimum_06_out_set(number v) {
                this->minimum_06_out = v;
            }
            
            void minimum_06_input_set(const list& v) {
                this->minimum_06_input = jsCreateListCopy(v);
            
                if (v->length == 1) {
                    if (v[0] < this->minimum_06_right) {
                        this->minimum_06_index_set(0);
                        this->minimum_06_out_set(v[0]);
                    } else {
                        this->minimum_06_index_set(1);
                        this->minimum_06_out_set(this->minimum_06_right);
                    }
                } else if (v->length > 0) {
                    int idx = 0;
                    number minimum = v[0];
            
                    for (Index i = 1; i < v->length; i++) {
                        if (v[(Index)i] < minimum) {
                            minimum = v[(Index)i];
                            idx = i;
                        }
                    }
            
                    this->minimum_06_index_set(idx);
                    this->minimum_06_out_set(minimum);
                }
            }
            
            void message_35_out_set(const list& v) {
                this->minimum_06_input_set(v);
            }
            
            void message_35_trigger_bang() {
                this->message_35_out_set(this->message_35_set);
            }
            
            void pak_10_out_set(const list& v) {
                this->message_35_set_set(v);
                this->message_35_trigger_bang();
            }
            
            void pak_10_in8_set(number v) {
                this->pak_10_in8 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_10_in1;
                array[1] = this->pak_10_in2;
                array[2] = this->pak_10_in3;
                array[3] = this->pak_10_in4;
                array[4] = this->pak_10_in5;
                array[5] = this->pak_10_in6;
                array[6] = this->pak_10_in7;
                array[7] = this->pak_10_in8;
                this->pak_10_out_set(array);
            }
            
            void numberobj_109_output_set(number v) {
                this->pak_10_in8_set(v);
            }
            
            void numberobj_109_value_set(number v) {
                this->numberobj_109_value_setter(v);
                v = this->numberobj_109_value;
                number localvalue = v;
            
                if (this->numberobj_109_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize/number_obj-27"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_109_output_set(localvalue);
            }
            
            void expr_92_out1_set(number v) {
                this->expr_92_out1 = v;
                this->numberobj_109_value_set(this->expr_92_out1);
            }
            
            void expr_92_in1_set(number in1) {
                this->expr_92_in1 = in1;
                this->expr_92_out1_set(rnbo_abs(this->expr_92_in1 - this->expr_92_in2));//#map:STUTTER/quantize/absdiff_obj-7:1
            }
            
            void unpack_06_out8_set(number v) {
                this->unpack_06_out8 = v;
                this->expr_92_in1_set(v);
            }
            
            void pak_10_in7_set(number v) {
                this->pak_10_in7 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_10_in1;
                array[1] = this->pak_10_in2;
                array[2] = this->pak_10_in3;
                array[3] = this->pak_10_in4;
                array[4] = this->pak_10_in5;
                array[5] = this->pak_10_in6;
                array[6] = this->pak_10_in7;
                array[7] = this->pak_10_in8;
                this->pak_10_out_set(array);
            }
            
            void numberobj_108_output_set(number v) {
                this->pak_10_in7_set(v);
            }
            
            void numberobj_108_value_set(number v) {
                this->numberobj_108_value_setter(v);
                v = this->numberobj_108_value;
                number localvalue = v;
            
                if (this->numberobj_108_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize/number_obj-25"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_108_output_set(localvalue);
            }
            
            void expr_91_out1_set(number v) {
                this->expr_91_out1 = v;
                this->numberobj_108_value_set(this->expr_91_out1);
            }
            
            void expr_91_in1_set(number in1) {
                this->expr_91_in1 = in1;
                this->expr_91_out1_set(rnbo_abs(this->expr_91_in1 - this->expr_91_in2));//#map:STUTTER/quantize/absdiff_obj-6:1
            }
            
            void unpack_06_out7_set(number v) {
                this->unpack_06_out7 = v;
                this->expr_91_in1_set(v);
            }
            
            void pak_10_in6_set(number v) {
                this->pak_10_in6 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_10_in1;
                array[1] = this->pak_10_in2;
                array[2] = this->pak_10_in3;
                array[3] = this->pak_10_in4;
                array[4] = this->pak_10_in5;
                array[5] = this->pak_10_in6;
                array[6] = this->pak_10_in7;
                array[7] = this->pak_10_in8;
                this->pak_10_out_set(array);
            }
            
            void numberobj_107_output_set(number v) {
                this->pak_10_in6_set(v);
            }
            
            void numberobj_107_value_set(number v) {
                this->numberobj_107_value_setter(v);
                v = this->numberobj_107_value;
                number localvalue = v;
            
                if (this->numberobj_107_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize/number_obj-23"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_107_output_set(localvalue);
            }
            
            void expr_90_out1_set(number v) {
                this->expr_90_out1 = v;
                this->numberobj_107_value_set(this->expr_90_out1);
            }
            
            void expr_90_in1_set(number in1) {
                this->expr_90_in1 = in1;
                this->expr_90_out1_set(rnbo_abs(this->expr_90_in1 - this->expr_90_in2));//#map:STUTTER/quantize/absdiff_obj-5:1
            }
            
            void unpack_06_out6_set(number v) {
                this->unpack_06_out6 = v;
                this->expr_90_in1_set(v);
            }
            
            void pak_10_in5_set(number v) {
                this->pak_10_in5 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_10_in1;
                array[1] = this->pak_10_in2;
                array[2] = this->pak_10_in3;
                array[3] = this->pak_10_in4;
                array[4] = this->pak_10_in5;
                array[5] = this->pak_10_in6;
                array[6] = this->pak_10_in7;
                array[7] = this->pak_10_in8;
                this->pak_10_out_set(array);
            }
            
            void numberobj_106_output_set(number v) {
                this->pak_10_in5_set(v);
            }
            
            void numberobj_106_value_set(number v) {
                this->numberobj_106_value_setter(v);
                v = this->numberobj_106_value;
                number localvalue = v;
            
                if (this->numberobj_106_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize/number_obj-21"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_106_output_set(localvalue);
            }
            
            void expr_89_out1_set(number v) {
                this->expr_89_out1 = v;
                this->numberobj_106_value_set(this->expr_89_out1);
            }
            
            void expr_89_in1_set(number in1) {
                this->expr_89_in1 = in1;
                this->expr_89_out1_set(rnbo_abs(this->expr_89_in1 - this->expr_89_in2));//#map:STUTTER/quantize/absdiff_obj-4:1
            }
            
            void unpack_06_out5_set(number v) {
                this->unpack_06_out5 = v;
                this->expr_89_in1_set(v);
            }
            
            void pak_10_in4_set(number v) {
                this->pak_10_in4 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_10_in1;
                array[1] = this->pak_10_in2;
                array[2] = this->pak_10_in3;
                array[3] = this->pak_10_in4;
                array[4] = this->pak_10_in5;
                array[5] = this->pak_10_in6;
                array[6] = this->pak_10_in7;
                array[7] = this->pak_10_in8;
                this->pak_10_out_set(array);
            }
            
            void numberobj_105_output_set(number v) {
                this->pak_10_in4_set(v);
            }
            
            void numberobj_105_value_set(number v) {
                this->numberobj_105_value_setter(v);
                v = this->numberobj_105_value;
                number localvalue = v;
            
                if (this->numberobj_105_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize/number_obj-19"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_105_output_set(localvalue);
            }
            
            void expr_88_out1_set(number v) {
                this->expr_88_out1 = v;
                this->numberobj_105_value_set(this->expr_88_out1);
            }
            
            void expr_88_in1_set(number in1) {
                this->expr_88_in1 = in1;
                this->expr_88_out1_set(rnbo_abs(this->expr_88_in1 - this->expr_88_in2));//#map:STUTTER/quantize/absdiff_obj-3:1
            }
            
            void unpack_06_out4_set(number v) {
                this->unpack_06_out4 = v;
                this->expr_88_in1_set(v);
            }
            
            void pak_10_in3_set(number v) {
                this->pak_10_in3 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_10_in1;
                array[1] = this->pak_10_in2;
                array[2] = this->pak_10_in3;
                array[3] = this->pak_10_in4;
                array[4] = this->pak_10_in5;
                array[5] = this->pak_10_in6;
                array[6] = this->pak_10_in7;
                array[7] = this->pak_10_in8;
                this->pak_10_out_set(array);
            }
            
            void numberobj_104_output_set(number v) {
                this->pak_10_in3_set(v);
            }
            
            void numberobj_104_value_set(number v) {
                this->numberobj_104_value_setter(v);
                v = this->numberobj_104_value;
                number localvalue = v;
            
                if (this->numberobj_104_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize/number_obj-17"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_104_output_set(localvalue);
            }
            
            void expr_87_out1_set(number v) {
                this->expr_87_out1 = v;
                this->numberobj_104_value_set(this->expr_87_out1);
            }
            
            void expr_87_in1_set(number in1) {
                this->expr_87_in1 = in1;
                this->expr_87_out1_set(rnbo_abs(this->expr_87_in1 - this->expr_87_in2));//#map:STUTTER/quantize/absdiff_obj-2:1
            }
            
            void unpack_06_out3_set(number v) {
                this->unpack_06_out3 = v;
                this->expr_87_in1_set(v);
            }
            
            void pak_10_in2_set(number v) {
                this->pak_10_in2 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_10_in1;
                array[1] = this->pak_10_in2;
                array[2] = this->pak_10_in3;
                array[3] = this->pak_10_in4;
                array[4] = this->pak_10_in5;
                array[5] = this->pak_10_in6;
                array[6] = this->pak_10_in7;
                array[7] = this->pak_10_in8;
                this->pak_10_out_set(array);
            }
            
            void numberobj_103_output_set(number v) {
                this->pak_10_in2_set(v);
            }
            
            void numberobj_103_value_set(number v) {
                this->numberobj_103_value_setter(v);
                v = this->numberobj_103_value;
                number localvalue = v;
            
                if (this->numberobj_103_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize/number_obj-15"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_103_output_set(localvalue);
            }
            
            void expr_86_out1_set(number v) {
                this->expr_86_out1 = v;
                this->numberobj_103_value_set(this->expr_86_out1);
            }
            
            void expr_86_in1_set(number in1) {
                this->expr_86_in1 = in1;
                this->expr_86_out1_set(rnbo_abs(this->expr_86_in1 - this->expr_86_in2));//#map:STUTTER/quantize/absdiff_obj-1:1
            }
            
            void unpack_06_out2_set(number v) {
                this->unpack_06_out2 = v;
                this->expr_86_in1_set(v);
            }
            
            void pak_10_in1_set(number v) {
                this->pak_10_in1 = v;
                list array = list(0, 0, 0, 0, 0, 0, 0, 0);
                array[0] = this->pak_10_in1;
                array[1] = this->pak_10_in2;
                array[2] = this->pak_10_in3;
                array[3] = this->pak_10_in4;
                array[4] = this->pak_10_in5;
                array[5] = this->pak_10_in6;
                array[6] = this->pak_10_in7;
                array[7] = this->pak_10_in8;
                this->pak_10_out_set(array);
            }
            
            void numberobj_100_output_set(number v) {
                this->pak_10_in1_set(v);
            }
            
            void numberobj_100_value_set(number v) {
                this->numberobj_100_value_setter(v);
                v = this->numberobj_100_value;
                number localvalue = v;
            
                if (this->numberobj_100_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize/number_obj-13"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_100_output_set(localvalue);
            }
            
            void expr_85_out1_set(number v) {
                this->expr_85_out1 = v;
                this->numberobj_100_value_set(this->expr_85_out1);
            }
            
            void expr_85_in1_set(number in1) {
                this->expr_85_in1 = in1;
                this->expr_85_out1_set(rnbo_abs(this->expr_85_in1 - this->expr_85_in2));//#map:STUTTER/quantize/absdiff_obj-143:1
            }
            
            void unpack_06_out1_set(number v) {
                this->unpack_06_out1 = v;
                this->expr_85_in1_set(v);
            }
            
            void unpack_06_input_list_set(const list& v) {
                if (v->length > 7)
                    this->unpack_06_out8_set(v[7]);
            
                if (v->length > 6)
                    this->unpack_06_out7_set(v[6]);
            
                if (v->length > 5)
                    this->unpack_06_out6_set(v[5]);
            
                if (v->length > 4)
                    this->unpack_06_out5_set(v[4]);
            
                if (v->length > 3)
                    this->unpack_06_out4_set(v[3]);
            
                if (v->length > 2)
                    this->unpack_06_out3_set(v[2]);
            
                if (v->length > 1)
                    this->unpack_06_out2_set(v[1]);
            
                if (v->length > 0)
                    this->unpack_06_out1_set(v[0]);
            }
            
            void message_36_out_set(const list& v) {
                this->listlookup_06_lookup_set(v);
                this->unpack_06_input_list_set(v);
            }
            
            void message_36_trigger_bang() {
                this->message_36_out_set(this->message_36_set);
            }
            
            void eventinlet_41_out1_list_set(const list& v) {
                this->message_36_set_set(v);
                this->message_36_trigger_bang();
            }
            
            void expr_92_in2_set(number v) {
                this->expr_92_in2 = v;
                this->expr_92_in1_set(this->expr_92_in1);
            }
            
            void expr_91_in2_set(number v) {
                this->expr_91_in2 = v;
                this->expr_91_in1_set(this->expr_91_in1);
            }
            
            void expr_90_in2_set(number v) {
                this->expr_90_in2 = v;
                this->expr_90_in1_set(this->expr_90_in1);
            }
            
            void expr_89_in2_set(number v) {
                this->expr_89_in2 = v;
                this->expr_89_in1_set(this->expr_89_in1);
            }
            
            void expr_88_in2_set(number v) {
                this->expr_88_in2 = v;
                this->expr_88_in1_set(this->expr_88_in1);
            }
            
            void expr_87_in2_set(number v) {
                this->expr_87_in2 = v;
                this->expr_87_in1_set(this->expr_87_in1);
            }
            
            void expr_86_in2_set(number v) {
                this->expr_86_in2 = v;
                this->expr_86_in1_set(this->expr_86_in1);
            }
            
            void expr_85_in2_set(number v) {
                this->expr_85_in2 = v;
                this->expr_85_in1_set(this->expr_85_in1);
            }
            
            void numberobj_110_output_set(number v) {
                this->expr_92_in2_set(v);
                this->expr_91_in2_set(v);
                this->expr_90_in2_set(v);
                this->expr_89_in2_set(v);
                this->expr_88_in2_set(v);
                this->expr_87_in2_set(v);
                this->expr_86_in2_set(v);
                this->expr_85_in2_set(v);
            }
            
            void numberobj_110_value_set(number v) {
                this->numberobj_110_value_setter(v);
                v = this->numberobj_110_value;
                number localvalue = v;
            
                if (this->numberobj_110_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize/number_obj-11"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_110_output_set(localvalue);
            }
            
            void eventinlet_42_out1_number_set(number v) {
                this->numberobj_110_value_set(v);
            }
            
            void message_36_set_bang() {
                list v = this->message_36_set;
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("STUTTER/quantize/message_obj-138"),
                    v,
                    this->_currentTime
                );
            }
            
            void numberobj_110_value_bang() {
                number v = this->numberobj_110_value;
                number localvalue = v;
            
                if (this->numberobj_110_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("STUTTER/quantize/number_obj-11"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_110_output_set(localvalue);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_100_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_100_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_100_value = localvalue;
            }
            
            void numberobj_101_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_101_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_101_value = localvalue;
            }
            
            void numberobj_102_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_102_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_102_value = localvalue;
            }
            
            void numberobj_103_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_103_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_103_value = localvalue;
            }
            
            void numberobj_104_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_104_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_104_value = localvalue;
            }
            
            void numberobj_105_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_105_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_105_value = localvalue;
            }
            
            void numberobj_106_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_106_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_106_value = localvalue;
            }
            
            void numberobj_107_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_107_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_107_value = localvalue;
            }
            
            void numberobj_108_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_108_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_108_value = localvalue;
            }
            
            void numberobj_109_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_109_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_109_value = localvalue;
            }
            
            void numberobj_110_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_110_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_110_value = localvalue;
            }
            
            void message_35_init() {
                this->message_35_set_set({
                    1176.718069,
                    176.718069,
                    323.281931,
                    573.281931,
                    698.281931,
                    760.781931,
                    792.031931,
                    807.656931
                });
            }
            
            void numberobj_100_init() {
                this->numberobj_100_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/quantize/number_obj-13"), 1, this->_currentTime);
            }
            
            void numberobj_100_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_100_value;
            }
            
            void numberobj_100_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_100_value_set(preset["value"]);
            }
            
            void message_36_init() {
                this->message_36_set_set({2000, 1000, 500, 250, 125, 62.5, 31.25, 15.625});
            }
            
            void numberobj_101_init() {
                this->numberobj_101_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/quantize/number_obj-39"), 1, this->_currentTime);
            }
            
            void numberobj_101_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_101_value;
            }
            
            void numberobj_101_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_101_value_set(preset["value"]);
            }
            
            void numberobj_102_init() {
                this->numberobj_102_currentFormat = 0;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/quantize/number_obj-37"), 1, this->_currentTime);
            }
            
            void numberobj_102_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_102_value;
            }
            
            void numberobj_102_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_102_value_set(preset["value"]);
            }
            
            void numberobj_103_init() {
                this->numberobj_103_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/quantize/number_obj-15"), 1, this->_currentTime);
            }
            
            void numberobj_103_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_103_value;
            }
            
            void numberobj_103_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_103_value_set(preset["value"]);
            }
            
            void numberobj_104_init() {
                this->numberobj_104_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/quantize/number_obj-17"), 1, this->_currentTime);
            }
            
            void numberobj_104_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_104_value;
            }
            
            void numberobj_104_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_104_value_set(preset["value"]);
            }
            
            void numberobj_105_init() {
                this->numberobj_105_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/quantize/number_obj-19"), 1, this->_currentTime);
            }
            
            void numberobj_105_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_105_value;
            }
            
            void numberobj_105_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_105_value_set(preset["value"]);
            }
            
            void numberobj_106_init() {
                this->numberobj_106_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/quantize/number_obj-21"), 1, this->_currentTime);
            }
            
            void numberobj_106_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_106_value;
            }
            
            void numberobj_106_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_106_value_set(preset["value"]);
            }
            
            void numberobj_107_init() {
                this->numberobj_107_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/quantize/number_obj-23"), 1, this->_currentTime);
            }
            
            void numberobj_107_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_107_value;
            }
            
            void numberobj_107_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_107_value_set(preset["value"]);
            }
            
            void numberobj_108_init() {
                this->numberobj_108_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/quantize/number_obj-25"), 1, this->_currentTime);
            }
            
            void numberobj_108_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_108_value;
            }
            
            void numberobj_108_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_108_value_set(preset["value"]);
            }
            
            void numberobj_109_init() {
                this->numberobj_109_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/quantize/number_obj-27"), 1, this->_currentTime);
            }
            
            void numberobj_109_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_109_value;
            }
            
            void numberobj_109_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_109_value_set(preset["value"]);
            }
            
            void numberobj_110_init() {
                this->numberobj_110_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/quantize/number_obj-11"), 1, this->_currentTime);
            }
            
            void numberobj_110_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_110_value;
            }
            
            void numberobj_110_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_110_value_set(preset["value"]);
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                minimum_06_right = 0;
                minimum_06_out = 0;
                minimum_06_index = 0;
                pak_10_in1 = 0;
                pak_10_in2 = 0;
                pak_10_in3 = 0;
                pak_10_in4 = 0;
                pak_10_in5 = 0;
                pak_10_in6 = 0;
                pak_10_in7 = 0;
                pak_10_in8 = 0;
                numberobj_100_value = 0;
                numberobj_100_value_setter(numberobj_100_value);
                expr_85_in1 = 0;
                expr_85_in2 = 0;
                expr_85_out1 = 0;
                unpack_06_out1 = 0;
                unpack_06_out2 = 0;
                unpack_06_out3 = 0;
                unpack_06_out4 = 0;
                unpack_06_out5 = 0;
                unpack_06_out6 = 0;
                unpack_06_out7 = 0;
                unpack_06_out8 = 0;
                numberobj_101_value = 0;
                numberobj_101_value_setter(numberobj_101_value);
                numberobj_102_value = 0;
                numberobj_102_value_setter(numberobj_102_value);
                numberobj_103_value = 0;
                numberobj_103_value_setter(numberobj_103_value);
                expr_86_in1 = 0;
                expr_86_in2 = 0;
                expr_86_out1 = 0;
                numberobj_104_value = 0;
                numberobj_104_value_setter(numberobj_104_value);
                expr_87_in1 = 0;
                expr_87_in2 = 0;
                expr_87_out1 = 0;
                numberobj_105_value = 0;
                numberobj_105_value_setter(numberobj_105_value);
                expr_88_in1 = 0;
                expr_88_in2 = 0;
                expr_88_out1 = 0;
                numberobj_106_value = 0;
                numberobj_106_value_setter(numberobj_106_value);
                expr_89_in1 = 0;
                expr_89_in2 = 0;
                expr_89_out1 = 0;
                numberobj_107_value = 0;
                numberobj_107_value_setter(numberobj_107_value);
                expr_90_in1 = 0;
                expr_90_in2 = 0;
                expr_90_out1 = 0;
                numberobj_108_value = 0;
                numberobj_108_value_setter(numberobj_108_value);
                expr_91_in1 = 0;
                expr_91_in2 = 0;
                expr_91_out1 = 0;
                numberobj_109_value = 0;
                numberobj_109_value_setter(numberobj_109_value);
                expr_92_in1 = 0;
                expr_92_in2 = 0;
                expr_92_out1 = 0;
                numberobj_110_value = 0;
                numberobj_110_value_setter(numberobj_110_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_100_currentFormat = 6;
                numberobj_100_lastValue = 0;
                numberobj_101_currentFormat = 6;
                numberobj_101_lastValue = 0;
                numberobj_102_currentFormat = 6;
                numberobj_102_lastValue = 0;
                numberobj_103_currentFormat = 6;
                numberobj_103_lastValue = 0;
                numberobj_104_currentFormat = 6;
                numberobj_104_lastValue = 0;
                numberobj_105_currentFormat = 6;
                numberobj_105_lastValue = 0;
                numberobj_106_currentFormat = 6;
                numberobj_106_lastValue = 0;
                numberobj_107_currentFormat = 6;
                numberobj_107_lastValue = 0;
                numberobj_108_currentFormat = 6;
                numberobj_108_lastValue = 0;
                numberobj_109_currentFormat = 6;
                numberobj_109_lastValue = 0;
                numberobj_110_currentFormat = 6;
                numberobj_110_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                list minimum_06_input;
                number minimum_06_right;
                number minimum_06_out;
                number minimum_06_index;
                list message_35_set;
                number pak_10_in1;
                number pak_10_in2;
                number pak_10_in3;
                number pak_10_in4;
                number pak_10_in5;
                number pak_10_in6;
                number pak_10_in7;
                number pak_10_in8;
                number numberobj_100_value;
                number expr_85_in1;
                number expr_85_in2;
                number expr_85_out1;
                number unpack_06_out1;
                number unpack_06_out2;
                number unpack_06_out3;
                number unpack_06_out4;
                number unpack_06_out5;
                number unpack_06_out6;
                number unpack_06_out7;
                number unpack_06_out8;
                list message_36_set;
                number numberobj_101_value;
                number numberobj_102_value;
                list listlookup_06_input;
                list listlookup_06_lookup;
                number numberobj_103_value;
                number expr_86_in1;
                number expr_86_in2;
                number expr_86_out1;
                number numberobj_104_value;
                number expr_87_in1;
                number expr_87_in2;
                number expr_87_out1;
                number numberobj_105_value;
                number expr_88_in1;
                number expr_88_in2;
                number expr_88_out1;
                number numberobj_106_value;
                number expr_89_in1;
                number expr_89_in2;
                number expr_89_out1;
                number numberobj_107_value;
                number expr_90_in1;
                number expr_90_in2;
                number expr_90_out1;
                number numberobj_108_value;
                number expr_91_in1;
                number expr_91_in2;
                number expr_91_out1;
                number numberobj_109_value;
                number expr_92_in1;
                number expr_92_in2;
                number expr_92_out1;
                number numberobj_110_value;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_100_currentFormat;
                number numberobj_100_lastValue;
                Int numberobj_101_currentFormat;
                number numberobj_101_lastValue;
                Int numberobj_102_currentFormat;
                number numberobj_102_lastValue;
                Int numberobj_103_currentFormat;
                number numberobj_103_lastValue;
                Int numberobj_104_currentFormat;
                number numberobj_104_lastValue;
                Int numberobj_105_currentFormat;
                number numberobj_105_lastValue;
                Int numberobj_106_currentFormat;
                number numberobj_106_lastValue;
                Int numberobj_107_currentFormat;
                number numberobj_107_lastValue;
                Int numberobj_108_currentFormat;
                number numberobj_108_lastValue;
                Int numberobj_109_currentFormat;
                number numberobj_109_lastValue;
                Int numberobj_110_currentFormat;
                number numberobj_110_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_29()
    {
    }
    
    ~RNBOSubpatcher_29()
    {
        delete this->p_05;
        delete this->p_06;
        delete this->p_07;
        delete this->p_08;
        delete this->p_09;
        delete this->p_10;
        delete this->p_11;
        delete this->p_12;
        delete this->p_13;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -1987572531, false);
        getEngine()->flushClockEvents(this, 1935387534, false);
        getEngine()->flushClockEvents(this, 894770446, false);
        getEngine()->flushClockEvents(this, 1396722025, false);
        getEngine()->flushClockEvents(this, -62043057, false);
        getEngine()->flushClockEvents(this, -281953904, false);
        getEngine()->flushClockEvents(this, -1494586265, false);
        getEngine()->flushClockEvents(this, -1841075377, false);
        getEngine()->flushClockEvents(this, 2098551528, false);
        getEngine()->flushClockEvents(this, 1114681293, false);
        getEngine()->flushClockEvents(this, -1621164530, false);
    }
    
    inline number safemod(number f, number m) {
        if (m != 0) {
            Int f_trunc = (Int)(trunc(f));
            Int m_trunc = (Int)(trunc(m));
    
            if (f == f_trunc && m == m_trunc) {
                f = f_trunc % m_trunc;
            } else {
                if (m < 0) {
                    m = -m;
                }
    
                if (f >= m) {
                    if (f >= m * 2.0) {
                        number d = f / m;
                        Int i = (Int)(trunc(d));
                        d = d - i;
                        f = d * m;
                    } else {
                        f -= m;
                    }
                } else if (f <= -m) {
                    if (f <= -m * 2.0) {
                        number d = f / m;
                        Int i = (Int)(trunc(d));
                        d = d - i;
                        f = d * m;
                    } else {
                        f += m;
                    }
                }
            }
        } else {
            f = 0.0;
        }
    
        return f;
    }
    
    inline number safesqrt(number num) {
        return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return globalrandom() * range + low;
    }
    
    MillisecondTime currenttime() {
        return this->_currentTime;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out3 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out4 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        this->p_05_perform(this->signals[0], n);
        this->p_06_perform(this->signals[1], n);
        this->p_07_perform(this->signals[2], n);
        this->linetilde_03_perform(this->signals[3], n);
        this->xfade_tilde_02_perform(this->signals[3], this->signals[0], this->signals[2], this->signals[4], n);
        this->xfade_tilde_01_perform(this->signals[1], in1, this->signals[4], this->signals[2], n);
        this->numbertilde_01_perform(this->signals[3], this->dummyBuffer, n);
        this->linetilde_04_perform(this->signals[3], n);
        this->p_08_perform(this->signals[4], n);
        this->xfade_tilde_04_perform(this->signals[3], this->signals[1], this->signals[4], this->signals[0], n);
        this->p_09_perform(this->signals[3], n);
        this->linetilde_05_perform(this->signals[4], n);
        this->numbertilde_02_perform(this->signals[4], this->dummyBuffer, n);
        this->dspexpr_02_perform(this->signals[2], this->signals[4], this->signals[1], n);
        this->p_10_perform(this->signals[2], n);
        this->linetilde_06_perform(this->signals[5], n);
        this->xfade_tilde_05_perform(this->signals[5], this->signals[3], this->signals[2], this->signals[6], n);
        this->xfade_tilde_03_perform(this->signals[0], in2, this->signals[6], this->signals[2], n);
        this->dspexpr_01_perform(this->signals[2], this->signals[4], this->signals[0], n);
        this->numbertilde_03_perform(this->signals[5], this->dummyBuffer, n);
        this->linetilde_07_perform(this->signals[5], n);
        this->xfade_tilde_06_perform(this->signals[5], in1, this->signals[1], out3, n);
        this->p_11_perform(n);
        this->p_12_perform(n);
        this->linetilde_08_perform(this->signals[5], n);
        this->xfade_tilde_07_perform(this->signals[5], in2, this->signals[0], out4, n);
        this->p_13_perform(n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 7; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->numbertilde_01_dspsetup(forceDSPSetup);
        this->numbertilde_02_dspsetup(forceDSPSetup);
        this->numbertilde_03_dspsetup(forceDSPSetup);
        this->p_05->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_06->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_07->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_08->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_09->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_10->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_11->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_12->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_13->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->p_05->processTempoEvent(time, tempo);
        this->p_06->processTempoEvent(time, tempo);
        this->p_07->processTempoEvent(time, tempo);
        this->p_08->processTempoEvent(time, tempo);
        this->p_09->processTempoEvent(time, tempo);
        this->p_10->processTempoEvent(time, tempo);
        this->p_11->processTempoEvent(time, tempo);
        this->p_12->processTempoEvent(time, tempo);
        this->p_13->processTempoEvent(time, tempo);
        this->transport_01_onTempoChanged(tempo);
    }
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->p_05->processTransportEvent(time, state);
        this->p_06->processTransportEvent(time, state);
        this->p_07->processTransportEvent(time, state);
        this->p_08->processTransportEvent(time, state);
        this->p_09->processTransportEvent(time, state);
        this->p_10->processTransportEvent(time, state);
        this->p_11->processTransportEvent(time, state);
        this->p_12->processTransportEvent(time, state);
        this->p_13->processTransportEvent(time, state);
        this->transport_01_onTransportChanged(state);
        this->metro_01_onTransportChanged(state);
        this->metro_02_onTransportChanged(state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->p_05->processBeatTimeEvent(time, beattime);
        this->p_06->processBeatTimeEvent(time, beattime);
        this->p_07->processBeatTimeEvent(time, beattime);
        this->p_08->processBeatTimeEvent(time, beattime);
        this->p_09->processBeatTimeEvent(time, beattime);
        this->p_10->processBeatTimeEvent(time, beattime);
        this->p_11->processBeatTimeEvent(time, beattime);
        this->p_12->processBeatTimeEvent(time, beattime);
        this->p_13->processBeatTimeEvent(time, beattime);
        this->metro_01_onBeatTimeChanged(beattime);
        this->metro_02_onBeatTimeChanged(beattime);
    }
    
    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
        this->updateTime(time);
        this->p_05->processTimeSignatureEvent(time, numerator, denominator);
        this->p_06->processTimeSignatureEvent(time, numerator, denominator);
        this->p_07->processTimeSignatureEvent(time, numerator, denominator);
        this->p_08->processTimeSignatureEvent(time, numerator, denominator);
        this->p_09->processTimeSignatureEvent(time, numerator, denominator);
        this->p_10->processTimeSignatureEvent(time, numerator, denominator);
        this->p_11->processTimeSignatureEvent(time, numerator, denominator);
        this->p_12->processTimeSignatureEvent(time, numerator, denominator);
        this->p_13->processTimeSignatureEvent(time, numerator, denominator);
        this->transport_01_onTimeSignatureChanged(numerator, denominator);
    }
    
    void processBBUEvent(MillisecondTime time, number bars, number beats, number units) {
        this->updateTime(time);
        this->p_05->processBBUEvent(time, bars, beats, units);
        this->p_06->processBBUEvent(time, bars, beats, units);
        this->p_07->processBBUEvent(time, bars, beats, units);
        this->p_08->processBBUEvent(time, bars, beats, units);
        this->p_09->processBBUEvent(time, bars, beats, units);
        this->p_10->processBBUEvent(time, bars, beats, units);
        this->p_11->processBBUEvent(time, bars, beats, units);
        this->p_12->processBBUEvent(time, bars, beats, units);
        this->p_13->processBBUEvent(time, bars, beats, units);
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_05 = new RNBOSubpatcher_20();
        this->p_05->setEngineAndPatcher(this->getEngine(), this);
        this->p_05->initialize();
        this->p_05->setParameterOffset(this->getParameterOffset(this->p_05));
        this->p_06 = new RNBOSubpatcher_21();
        this->p_06->setEngineAndPatcher(this->getEngine(), this);
        this->p_06->initialize();
        this->p_06->setParameterOffset(this->getParameterOffset(this->p_06));
        this->p_07 = new RNBOSubpatcher_22();
        this->p_07->setEngineAndPatcher(this->getEngine(), this);
        this->p_07->initialize();
        this->p_07->setParameterOffset(this->getParameterOffset(this->p_07));
        this->p_08 = new RNBOSubpatcher_23();
        this->p_08->setEngineAndPatcher(this->getEngine(), this);
        this->p_08->initialize();
        this->p_08->setParameterOffset(this->getParameterOffset(this->p_08));
        this->p_09 = new RNBOSubpatcher_24();
        this->p_09->setEngineAndPatcher(this->getEngine(), this);
        this->p_09->initialize();
        this->p_09->setParameterOffset(this->getParameterOffset(this->p_09));
        this->p_10 = new RNBOSubpatcher_25();
        this->p_10->setEngineAndPatcher(this->getEngine(), this);
        this->p_10->initialize();
        this->p_10->setParameterOffset(this->getParameterOffset(this->p_10));
        this->p_11 = new RNBOSubpatcher_26();
        this->p_11->setEngineAndPatcher(this->getEngine(), this);
        this->p_11->initialize();
        this->p_11->setParameterOffset(this->getParameterOffset(this->p_11));
        this->p_12 = new RNBOSubpatcher_27();
        this->p_12->setEngineAndPatcher(this->getEngine(), this);
        this->p_12->initialize();
        this->p_12->setParameterOffset(this->getParameterOffset(this->p_12));
        this->p_13 = new RNBOSubpatcher_28();
        this->p_13->setEngineAndPatcher(this->getEngine(), this);
        this->p_13->initialize();
        this->p_13->setParameterOffset(this->getParameterOffset(this->p_13));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->p_05->getPreset(getSubState(getSubState(preset, "__sps"), "circ1l"));
        this->p_06->getPreset(getSubState(getSubState(preset, "__sps"), "likelihood[1]"));
        this->p_07->getPreset(getSubState(getSubState(preset, "__sps"), "circ2l"));
        this->p_08->getPreset(getSubState(getSubState(preset, "__sps"), "likelihood"));
        this->p_09->getPreset(getSubState(getSubState(preset, "__sps"), "cric1r"));
        this->p_10->getPreset(getSubState(getSubState(preset, "__sps"), "cric2r"));
        this->p_11->getPreset(getSubState(getSubState(preset, "__sps"), "stutter-withtempo"));
        this->p_12->getPreset(getSubState(getSubState(preset, "__sps"), "quantize[1]"));
        this->p_13->getPreset(getSubState(getSubState(preset, "__sps"), "quantize"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        RNBO_UNUSED(v);
        this->updateTime(time);
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_05->getNumParameters())
                this->p_05->setParameterValue(index, v, time);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                this->p_06->setParameterValue(index, v, time);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                this->p_07->setParameterValue(index, v, time);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                this->p_08->setParameterValue(index, v, time);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                this->p_09->setParameterValue(index, v, time);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                this->p_10->setParameterValue(index, v, time);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                this->p_11->setParameterValue(index, v, time);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                this->p_12->setParameterValue(index, v, time);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                this->p_13->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterValue(index);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterValue(index);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterValue(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterValue(index);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterValue(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterValue(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterValue(index);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterValue(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0 + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterName(index);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterName(index);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterName(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterName(index);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterName(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterName(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterName(index);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterName(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterId(index);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->getParameterId(index);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterId(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterId(index);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterId(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterId(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterId(index);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterId(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            default:
                {
                index -= 0;
    
                if (index < this->p_05->getNumParameters())
                    this->p_05->getParameterInfo(index, info);
    
                index -= this->p_05->getNumParameters();
    
                if (index < this->p_06->getNumParameters())
                    this->p_06->getParameterInfo(index, info);
    
                index -= this->p_06->getNumParameters();
    
                if (index < this->p_07->getNumParameters())
                    this->p_07->getParameterInfo(index, info);
    
                index -= this->p_07->getNumParameters();
    
                if (index < this->p_08->getNumParameters())
                    this->p_08->getParameterInfo(index, info);
    
                index -= this->p_08->getNumParameters();
    
                if (index < this->p_09->getNumParameters())
                    this->p_09->getParameterInfo(index, info);
    
                index -= this->p_09->getNumParameters();
    
                if (index < this->p_10->getNumParameters())
                    this->p_10->getParameterInfo(index, info);
    
                index -= this->p_10->getNumParameters();
    
                if (index < this->p_11->getNumParameters())
                    this->p_11->getParameterInfo(index, info);
    
                index -= this->p_11->getNumParameters();
    
                if (index < this->p_12->getNumParameters())
                    this->p_12->getParameterInfo(index, info);
    
                index -= this->p_12->getNumParameters();
    
                if (index < this->p_13->getNumParameters())
                    this->p_13->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_05)
            return 0;
    
        if (subpatcher == this->p_06)
            return 0 + this->p_05->getNumParameters();
    
        if (subpatcher == this->p_07)
            return 0 + this->p_05->getNumParameters() + this->p_06->getNumParameters();
    
        if (subpatcher == this->p_08)
            return 0 + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters();
    
        if (subpatcher == this->p_09)
            return 0 + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters();
    
        if (subpatcher == this->p_10)
            return 0 + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters() + this->p_09->getNumParameters();
    
        if (subpatcher == this->p_11)
            return 0 + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters();
    
        if (subpatcher == this->p_12)
            return 0 + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters();
    
        if (subpatcher == this->p_13)
            return 0 + this->p_05->getNumParameters() + this->p_06->getNumParameters() + this->p_07->getNumParameters() + this->p_08->getNumParameters() + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->constrainParameterValue(index, value);
    
            index -= this->p_05->getNumParameters();
    
            if (index < this->p_06->getNumParameters())
                return this->p_06->constrainParameterValue(index, value);
    
            index -= this->p_06->getNumParameters();
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->constrainParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->constrainParameterValue(index, value);
    
            index -= this->p_08->getNumParameters();
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->constrainParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->constrainParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->constrainParameterValue(index, value);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->constrainParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -1987572531:
            {
            this->metro_01_tick_bang();
            break;
            }
        case 1935387534:
            {
            this->metro_02_tick_bang();
            break;
            }
        case 894770446:
            {
            this->linetilde_03_target_bang();
            break;
            }
        case 1396722025:
            {
            this->numbertilde_01_value_set(value);
            break;
            }
        case -62043057:
            {
            this->linetilde_04_target_bang();
            break;
            }
        case -281953904:
            {
            this->linetilde_05_target_bang();
            break;
            }
        case -1494586265:
            {
            this->numbertilde_02_value_set(value);
            break;
            }
        case -1841075377:
            {
            this->linetilde_06_target_bang();
            break;
            }
        case 2098551528:
            {
            this->numbertilde_03_value_set(value);
            break;
            }
        case 1114681293:
            {
            this->linetilde_07_target_bang();
            break;
            }
        case -1621164530:
            {
            this->linetilde_08_target_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("STUTTER/toggle_obj-149") == objectId)
                this->toggle_01_valin_set(payload);
    
            if (TAG("STUTTER/number_obj-24") == objectId)
                this->numberobj_111_valin_set(payload);
    
            if (TAG("STUTTER/number_obj-32") == objectId)
                this->numberobj_112_valin_set(payload);
    
            if (TAG("STUTTER/toggle_obj-17") == objectId)
                this->toggle_02_valin_set(payload);
    
            if (TAG("STUTTER/number_obj-50") == objectId)
                this->numberobj_113_valin_set(payload);
    
            if (TAG("STUTTER/number_obj-131") == objectId)
                this->numberobj_114_valin_set(payload);
    
            if (TAG("STUTTER/number_obj-63") == objectId)
                this->numberobj_115_valin_set(payload);
    
            if (TAG("STUTTER/toggle_obj-65") == objectId)
                this->toggle_03_valin_set(payload);
    
            if (TAG("STUTTER/toggle_obj-133") == objectId)
                this->toggle_04_valin_set(payload);
    
            if (TAG("STUTTER/number_obj-100") == objectId)
                this->numberobj_116_valin_set(payload);
    
            if (TAG("STUTTER/number_obj-70") == objectId)
                this->numberobj_117_valin_set(payload);
    
            if (TAG("STUTTER/number_obj-72") == objectId)
                this->numberobj_118_valin_set(payload);
    
            if (TAG("STUTTER/number_obj-92") == objectId)
                this->numberobj_119_valin_set(payload);
    
            if (TAG("STUTTER/toggle_obj-90") == objectId)
                this->toggle_05_valin_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("STUTTER/message_obj-117") == objectId)
                this->message_37_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-122") == objectId)
                this->message_38_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-29") == objectId)
                this->message_39_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-118") == objectId)
                this->message_40_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-27") == objectId)
                this->message_41_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-120") == objectId)
                this->message_42_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-26") == objectId)
                this->message_43_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-49") == objectId)
                this->message_44_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-43") == objectId)
                this->message_45_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-80") == objectId)
                this->message_46_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-86") == objectId)
                this->message_47_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-138") == objectId)
                this->message_48_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-136") == objectId)
                this->message_49_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-141") == objectId)
                this->message_50_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-143") == objectId)
                this->message_51_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-106") == objectId)
                this->message_52_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-45") == objectId)
                this->message_53_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-108") == objectId)
                this->message_54_listin_number_set(payload);
    
            if (TAG("STUTTER/message_obj-61") == objectId)
                this->message_55_listin_number_set(payload);
    
            break;
            }
        case TAG("sig"):
            {
            if (TAG("STUTTER/number~_obj-151") == objectId)
                this->numbertilde_01_sig_number_set(payload);
    
            if (TAG("STUTTER/number~_obj-44") == objectId)
                this->numbertilde_02_sig_number_set(payload);
    
            if (TAG("STUTTER/number~_obj-22") == objectId)
                this->numbertilde_03_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("STUTTER/number~_obj-151") == objectId)
                this->numbertilde_01_mode_set(payload);
    
            if (TAG("STUTTER/number~_obj-44") == objectId)
                this->numbertilde_02_mode_set(payload);
    
            if (TAG("STUTTER/number~_obj-22") == objectId)
                this->numbertilde_03_mode_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("STUTTER/number_obj-24") == objectId)
                this->numberobj_111_format_set(payload);
    
            if (TAG("STUTTER/number_obj-32") == objectId)
                this->numberobj_112_format_set(payload);
    
            if (TAG("STUTTER/number_obj-50") == objectId)
                this->numberobj_113_format_set(payload);
    
            if (TAG("STUTTER/number_obj-131") == objectId)
                this->numberobj_114_format_set(payload);
    
            if (TAG("STUTTER/number_obj-63") == objectId)
                this->numberobj_115_format_set(payload);
    
            if (TAG("STUTTER/number_obj-100") == objectId)
                this->numberobj_116_format_set(payload);
    
            if (TAG("STUTTER/number_obj-70") == objectId)
                this->numberobj_117_format_set(payload);
    
            if (TAG("STUTTER/number_obj-72") == objectId)
                this->numberobj_118_format_set(payload);
    
            if (TAG("STUTTER/number_obj-92") == objectId)
                this->numberobj_119_format_set(payload);
    
            break;
            }
        }
    
        this->p_05->processNumMessage(tag, objectId, time, payload);
        this->p_06->processNumMessage(tag, objectId, time, payload);
        this->p_07->processNumMessage(tag, objectId, time, payload);
        this->p_08->processNumMessage(tag, objectId, time, payload);
        this->p_09->processNumMessage(tag, objectId, time, payload);
        this->p_10->processNumMessage(tag, objectId, time, payload);
        this->p_11->processNumMessage(tag, objectId, time, payload);
        this->p_12->processNumMessage(tag, objectId, time, payload);
        this->p_13->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("STUTTER/message_obj-117") == objectId)
                this->message_37_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-122") == objectId)
                this->message_38_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-29") == objectId)
                this->message_39_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-118") == objectId)
                this->message_40_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-27") == objectId)
                this->message_41_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-120") == objectId)
                this->message_42_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-26") == objectId)
                this->message_43_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-49") == objectId)
                this->message_44_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-43") == objectId)
                this->message_45_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-80") == objectId)
                this->message_46_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-86") == objectId)
                this->message_47_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-138") == objectId)
                this->message_48_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-136") == objectId)
                this->message_49_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-141") == objectId)
                this->message_50_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-143") == objectId)
                this->message_51_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-106") == objectId)
                this->message_52_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-45") == objectId)
                this->message_53_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-108") == objectId)
                this->message_54_listin_list_set(payload);
    
            if (TAG("STUTTER/message_obj-61") == objectId)
                this->message_55_listin_list_set(payload);
    
            break;
            }
        case TAG("sig"):
            {
            if (TAG("STUTTER/number~_obj-151") == objectId)
                this->numbertilde_01_sig_list_set(payload);
    
            if (TAG("STUTTER/number~_obj-44") == objectId)
                this->numbertilde_02_sig_list_set(payload);
    
            if (TAG("STUTTER/number~_obj-22") == objectId)
                this->numbertilde_03_sig_list_set(payload);
    
            break;
            }
        }
    
        this->p_05->processListMessage(tag, objectId, time, payload);
        this->p_06->processListMessage(tag, objectId, time, payload);
        this->p_07->processListMessage(tag, objectId, time, payload);
        this->p_08->processListMessage(tag, objectId, time, payload);
        this->p_09->processListMessage(tag, objectId, time, payload);
        this->p_10->processListMessage(tag, objectId, time, payload);
        this->p_11->processListMessage(tag, objectId, time, payload);
        this->p_12->processListMessage(tag, objectId, time, payload);
        this->p_13->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("bangin"):
            {
            if (TAG("STUTTER/button_obj-40") == objectId)
                this->button_08_bangin_bang();
    
            if (TAG("STUTTER/button_obj-11") == objectId)
                this->button_09_bangin_bang();
    
            if (TAG("STUTTER/button_obj-97") == objectId)
                this->button_10_bangin_bang();
    
            if (TAG("STUTTER/button_obj-52") == objectId)
                this->button_11_bangin_bang();
    
            if (TAG("STUTTER/button_obj-60") == objectId)
                this->button_12_bangin_bang();
    
            if (TAG("STUTTER/button_obj-93") == objectId)
                this->button_13_bangin_bang();
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("STUTTER/message_obj-117") == objectId)
                this->message_37_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-122") == objectId)
                this->message_38_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-29") == objectId)
                this->message_39_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-118") == objectId)
                this->message_40_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-27") == objectId)
                this->message_41_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-120") == objectId)
                this->message_42_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-26") == objectId)
                this->message_43_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-49") == objectId)
                this->message_44_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-43") == objectId)
                this->message_45_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-80") == objectId)
                this->message_46_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-86") == objectId)
                this->message_47_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-138") == objectId)
                this->message_48_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-136") == objectId)
                this->message_49_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-141") == objectId)
                this->message_50_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-143") == objectId)
                this->message_51_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-106") == objectId)
                this->message_52_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-45") == objectId)
                this->message_53_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-108") == objectId)
                this->message_54_listin_bang_bang();
    
            if (TAG("STUTTER/message_obj-61") == objectId)
                this->message_55_listin_bang_bang();
    
            break;
            }
        }
    
        this->p_05->processBangMessage(tag, objectId, time);
        this->p_06->processBangMessage(tag, objectId, time);
        this->p_07->processBangMessage(tag, objectId, time);
        this->p_08->processBangMessage(tag, objectId, time);
        this->p_09->processBangMessage(tag, objectId, time);
        this->p_10->processBangMessage(tag, objectId, time);
        this->p_11->processBangMessage(tag, objectId, time);
        this->p_12->processBangMessage(tag, objectId, time);
        this->p_13->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("STUTTER/button_obj-40"):
            {
            return "STUTTER/button_obj-40";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("STUTTER/toggle_obj-149"):
            {
            return "STUTTER/toggle_obj-149";
            }
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("STUTTER/message_obj-117"):
            {
            return "STUTTER/message_obj-117";
            }
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("STUTTER/number~_obj-151"):
            {
            return "STUTTER/number~_obj-151";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("STUTTER/message_obj-122"):
            {
            return "STUTTER/message_obj-122";
            }
        case TAG("STUTTER/number_obj-24"):
            {
            return "STUTTER/number_obj-24";
            }
        case TAG("STUTTER/button_obj-11"):
            {
            return "STUTTER/button_obj-11";
            }
        case TAG("STUTTER/button_obj-97"):
            {
            return "STUTTER/button_obj-97";
            }
        case TAG("STUTTER/number_obj-32"):
            {
            return "STUTTER/number_obj-32";
            }
        case TAG("STUTTER/message_obj-29"):
            {
            return "STUTTER/message_obj-29";
            }
        case TAG("STUTTER/number~_obj-44"):
            {
            return "STUTTER/number~_obj-44";
            }
        case TAG("STUTTER/toggle_obj-17"):
            {
            return "STUTTER/toggle_obj-17";
            }
        case TAG("STUTTER/message_obj-118"):
            {
            return "STUTTER/message_obj-118";
            }
        case TAG("STUTTER/message_obj-27"):
            {
            return "STUTTER/message_obj-27";
            }
        case TAG("STUTTER/message_obj-120"):
            {
            return "STUTTER/message_obj-120";
            }
        case TAG("STUTTER/number~_obj-22"):
            {
            return "STUTTER/number~_obj-22";
            }
        case TAG("STUTTER/button_obj-52"):
            {
            return "STUTTER/button_obj-52";
            }
        case TAG("STUTTER/number_obj-50"):
            {
            return "STUTTER/number_obj-50";
            }
        case TAG("STUTTER/message_obj-26"):
            {
            return "STUTTER/message_obj-26";
            }
        case TAG("STUTTER/message_obj-49"):
            {
            return "STUTTER/message_obj-49";
            }
        case TAG("STUTTER/message_obj-43"):
            {
            return "STUTTER/message_obj-43";
            }
        case TAG("STUTTER/number_obj-131"):
            {
            return "STUTTER/number_obj-131";
            }
        case TAG("STUTTER/number_obj-63"):
            {
            return "STUTTER/number_obj-63";
            }
        case TAG("STUTTER/button_obj-60"):
            {
            return "STUTTER/button_obj-60";
            }
        case TAG("STUTTER/message_obj-80"):
            {
            return "STUTTER/message_obj-80";
            }
        case TAG("STUTTER/toggle_obj-65"):
            {
            return "STUTTER/toggle_obj-65";
            }
        case TAG("STUTTER/message_obj-86"):
            {
            return "STUTTER/message_obj-86";
            }
        case TAG("STUTTER/message_obj-138"):
            {
            return "STUTTER/message_obj-138";
            }
        case TAG("STUTTER/toggle_obj-133"):
            {
            return "STUTTER/toggle_obj-133";
            }
        case TAG("STUTTER/number_obj-100"):
            {
            return "STUTTER/number_obj-100";
            }
        case TAG("STUTTER/number_obj-70"):
            {
            return "STUTTER/number_obj-70";
            }
        case TAG("STUTTER/message_obj-136"):
            {
            return "STUTTER/message_obj-136";
            }
        case TAG("STUTTER/message_obj-141"):
            {
            return "STUTTER/message_obj-141";
            }
        case TAG("STUTTER/number_obj-72"):
            {
            return "STUTTER/number_obj-72";
            }
        case TAG("STUTTER/message_obj-143"):
            {
            return "STUTTER/message_obj-143";
            }
        case TAG("STUTTER/message_obj-106"):
            {
            return "STUTTER/message_obj-106";
            }
        case TAG("STUTTER/number_obj-92"):
            {
            return "STUTTER/number_obj-92";
            }
        case TAG("STUTTER/button_obj-93"):
            {
            return "STUTTER/button_obj-93";
            }
        case TAG("STUTTER/message_obj-45"):
            {
            return "STUTTER/message_obj-45";
            }
        case TAG("STUTTER/message_obj-108"):
            {
            return "STUTTER/message_obj-108";
            }
        case TAG("STUTTER/message_obj-61"):
            {
            return "STUTTER/message_obj-61";
            }
        case TAG("STUTTER/toggle_obj-90"):
            {
            return "STUTTER/toggle_obj-90";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        auto subpatchResult_0 = this->p_05->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_06->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        auto subpatchResult_2 = this->p_07->resolveTag(tag);
    
        if (subpatchResult_2)
            return subpatchResult_2;
    
        auto subpatchResult_3 = this->p_08->resolveTag(tag);
    
        if (subpatchResult_3)
            return subpatchResult_3;
    
        auto subpatchResult_4 = this->p_09->resolveTag(tag);
    
        if (subpatchResult_4)
            return subpatchResult_4;
    
        auto subpatchResult_5 = this->p_10->resolveTag(tag);
    
        if (subpatchResult_5)
            return subpatchResult_5;
    
        auto subpatchResult_6 = this->p_11->resolveTag(tag);
    
        if (subpatchResult_6)
            return subpatchResult_6;
    
        auto subpatchResult_7 = this->p_12->resolveTag(tag);
    
        if (subpatchResult_7)
            return subpatchResult_7;
    
        auto subpatchResult_8 = this->p_13->resolveTag(tag);
    
        if (subpatchResult_8)
            return subpatchResult_8;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->p_05->processDataViewUpdate(index, time);
        this->p_06->processDataViewUpdate(index, time);
        this->p_07->processDataViewUpdate(index, time);
        this->p_08->processDataViewUpdate(index, time);
        this->p_09->processDataViewUpdate(index, time);
        this->p_10->processDataViewUpdate(index, time);
        this->p_11->processDataViewUpdate(index, time);
        this->p_12->processDataViewUpdate(index, time);
        this->p_13->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void button_08_bangin_bang() {
        this->button_08_bangval_bang();
    }
    
    void toggle_01_valin_set(number v) {
        this->toggle_01_value_number_set(v);
    }
    
    void message_37_listin_list_set(const list& v) {
        this->message_37_set_set(v);
    }
    
    void message_37_listin_number_set(number v) {
        this->message_37_set_set(v);
    }
    
    void message_37_listin_bang_bang() {
        this->message_37_trigger_bang();
    }
    
    void numbertilde_01_sig_number_set(number v) {
        this->numbertilde_01_outValue = v;
    }
    
    void numbertilde_01_sig_list_set(const list& v) {
        this->numbertilde_01_outValue = v[0];
    }
    
    void numbertilde_01_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_01_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_01_currentMode = 1;
        }
    }
    
    void message_38_listin_list_set(const list& v) {
        this->message_38_set_set(v);
    }
    
    void message_38_listin_number_set(number v) {
        this->message_38_set_set(v);
    }
    
    void message_38_listin_bang_bang() {
        this->message_38_trigger_bang();
    }
    
    void numberobj_111_valin_set(number v) {
        this->numberobj_111_value_set(v);
    }
    
    void numberobj_111_format_set(number v) {
        this->numberobj_111_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_09_bangin_bang() {
        this->button_09_bangval_bang();
    }
    
    void button_10_bangin_bang() {
        this->button_10_bangval_bang();
    }
    
    void numberobj_112_valin_set(number v) {
        this->numberobj_112_value_set(v);
    }
    
    void numberobj_112_format_set(number v) {
        this->numberobj_112_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_39_listin_list_set(const list& v) {
        this->message_39_set_set(v);
    }
    
    void message_39_listin_number_set(number v) {
        this->message_39_set_set(v);
    }
    
    void message_39_listin_bang_bang() {
        this->message_39_trigger_bang();
    }
    
    void numbertilde_02_sig_number_set(number v) {
        this->numbertilde_02_outValue = v;
    }
    
    void numbertilde_02_sig_list_set(const list& v) {
        this->numbertilde_02_outValue = v[0];
    }
    
    void numbertilde_02_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_02_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_02_currentMode = 1;
        }
    }
    
    void toggle_02_valin_set(number v) {
        this->toggle_02_value_number_set(v);
    }
    
    void message_40_listin_list_set(const list& v) {
        this->message_40_set_set(v);
    }
    
    void message_40_listin_number_set(number v) {
        this->message_40_set_set(v);
    }
    
    void message_40_listin_bang_bang() {
        this->message_40_trigger_bang();
    }
    
    void message_41_listin_list_set(const list& v) {
        this->message_41_set_set(v);
    }
    
    void message_41_listin_number_set(number v) {
        this->message_41_set_set(v);
    }
    
    void message_41_listin_bang_bang() {
        this->message_41_trigger_bang();
    }
    
    void message_42_listin_list_set(const list& v) {
        this->message_42_set_set(v);
    }
    
    void message_42_listin_number_set(number v) {
        this->message_42_set_set(v);
    }
    
    void message_42_listin_bang_bang() {
        this->message_42_trigger_bang();
    }
    
    void numbertilde_03_sig_number_set(number v) {
        this->numbertilde_03_outValue = v;
    }
    
    void numbertilde_03_sig_list_set(const list& v) {
        this->numbertilde_03_outValue = v[0];
    }
    
    void numbertilde_03_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_03_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_03_currentMode = 1;
        }
    }
    
    void button_11_bangin_bang() {
        this->button_11_bangval_bang();
    }
    
    void numberobj_113_valin_set(number v) {
        this->numberobj_113_value_set(v);
    }
    
    void numberobj_113_format_set(number v) {
        this->numberobj_113_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_43_listin_list_set(const list& v) {
        this->message_43_set_set(v);
    }
    
    void message_43_listin_number_set(number v) {
        this->message_43_set_set(v);
    }
    
    void message_43_listin_bang_bang() {
        this->message_43_trigger_bang();
    }
    
    void message_44_listin_list_set(const list& v) {
        this->message_44_set_set(v);
    }
    
    void message_44_listin_number_set(number v) {
        this->message_44_set_set(v);
    }
    
    void message_44_listin_bang_bang() {
        this->message_44_trigger_bang();
    }
    
    void message_45_listin_list_set(const list& v) {
        this->message_45_set_set(v);
    }
    
    void message_45_listin_number_set(number v) {
        this->message_45_set_set(v);
    }
    
    void message_45_listin_bang_bang() {
        this->message_45_trigger_bang();
    }
    
    void numberobj_114_valin_set(number v) {
        this->numberobj_114_value_set(v);
    }
    
    void numberobj_114_format_set(number v) {
        this->numberobj_114_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_115_valin_set(number v) {
        this->numberobj_115_value_set(v);
    }
    
    void numberobj_115_format_set(number v) {
        this->numberobj_115_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_12_bangin_bang() {
        this->button_12_bangval_bang();
    }
    
    void message_46_listin_list_set(const list& v) {
        this->message_46_set_set(v);
    }
    
    void message_46_listin_number_set(number v) {
        this->message_46_set_set(v);
    }
    
    void message_46_listin_bang_bang() {
        this->message_46_trigger_bang();
    }
    
    void toggle_03_valin_set(number v) {
        this->toggle_03_value_number_set(v);
    }
    
    void metro_01_tick_bang() {
        this->metro_01_tickout_bang();
        this->getEngine()->flushClockEvents(this, -1987572531, false);;
    
        if ((bool)(this->metro_01_on)) {
            this->metro_01_last = this->currenttime();
    
            {
                this->metro_01_next = this->metro_01_last + this->metro_01_interval;
                this->getEngine()->scheduleClockEvent(this, -1987572531, this->metro_01_interval + this->_currentTime);;
            }
        }
    }
    
    void message_47_listin_list_set(const list& v) {
        this->message_47_set_set(v);
    }
    
    void message_47_listin_number_set(number v) {
        this->message_47_set_set(v);
    }
    
    void message_47_listin_bang_bang() {
        this->message_47_trigger_bang();
    }
    
    void message_48_listin_list_set(const list& v) {
        this->message_48_set_set(v);
    }
    
    void message_48_listin_number_set(number v) {
        this->message_48_set_set(v);
    }
    
    void message_48_listin_bang_bang() {
        this->message_48_trigger_bang();
    }
    
    void toggle_04_valin_set(number v) {
        this->toggle_04_value_number_set(v);
    }
    
    void numberobj_116_valin_set(number v) {
        this->numberobj_116_value_set(v);
    }
    
    void numberobj_116_format_set(number v) {
        this->numberobj_116_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_117_valin_set(number v) {
        this->numberobj_117_value_set(v);
    }
    
    void numberobj_117_format_set(number v) {
        this->numberobj_117_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_49_listin_list_set(const list& v) {
        this->message_49_set_set(v);
    }
    
    void message_49_listin_number_set(number v) {
        this->message_49_set_set(v);
    }
    
    void message_49_listin_bang_bang() {
        this->message_49_trigger_bang();
    }
    
    void message_50_listin_list_set(const list& v) {
        this->message_50_set_set(v);
    }
    
    void message_50_listin_number_set(number v) {
        this->message_50_set_set(v);
    }
    
    void message_50_listin_bang_bang() {
        this->message_50_trigger_bang();
    }
    
    void numberobj_118_valin_set(number v) {
        this->numberobj_118_value_set(v);
    }
    
    void numberobj_118_format_set(number v) {
        this->numberobj_118_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_51_listin_list_set(const list& v) {
        this->message_51_set_set(v);
    }
    
    void message_51_listin_number_set(number v) {
        this->message_51_set_set(v);
    }
    
    void message_51_listin_bang_bang() {
        this->message_51_trigger_bang();
    }
    
    void message_52_listin_list_set(const list& v) {
        this->message_52_set_set(v);
    }
    
    void message_52_listin_number_set(number v) {
        this->message_52_set_set(v);
    }
    
    void message_52_listin_bang_bang() {
        this->message_52_trigger_bang();
    }
    
    void numberobj_119_valin_set(number v) {
        this->numberobj_119_value_set(v);
    }
    
    void numberobj_119_format_set(number v) {
        this->numberobj_119_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_13_bangin_bang() {
        this->button_13_bangval_bang();
    }
    
    void message_53_listin_list_set(const list& v) {
        this->message_53_set_set(v);
    }
    
    void message_53_listin_number_set(number v) {
        this->message_53_set_set(v);
    }
    
    void message_53_listin_bang_bang() {
        this->message_53_trigger_bang();
    }
    
    void message_54_listin_list_set(const list& v) {
        this->message_54_set_set(v);
    }
    
    void message_54_listin_number_set(number v) {
        this->message_54_set_set(v);
    }
    
    void message_54_listin_bang_bang() {
        this->message_54_trigger_bang();
    }
    
    void message_55_listin_list_set(const list& v) {
        this->message_55_set_set(v);
    }
    
    void message_55_listin_number_set(number v) {
        this->message_55_set_set(v);
    }
    
    void message_55_listin_bang_bang() {
        this->message_55_trigger_bang();
    }
    
    void toggle_05_valin_set(number v) {
        this->toggle_05_value_number_set(v);
    }
    
    void metro_02_tick_bang() {
        this->metro_02_tickout_bang();
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(this->metro_02_on)) {
            this->metro_02_last = this->currenttime();
    
            {
                this->metro_02_next = this->metro_02_last + this->metro_02_interval;
                this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_02_interval + this->_currentTime);;
            }
        }
    }
    
    void linetilde_03_target_bang() {}
    
    void numbertilde_01_value_set(number ) {}
    
    void linetilde_04_target_bang() {}
    
    void linetilde_05_target_bang() {}
    
    void numbertilde_02_value_set(number ) {}
    
    void linetilde_06_target_bang() {}
    
    void numbertilde_03_value_set(number ) {}
    
    void linetilde_07_target_bang() {}
    
    void linetilde_08_target_bang() {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->message_37_init();
        this->numbertilde_01_init();
        this->message_38_init();
        this->numberobj_111_init();
        this->numberobj_112_init();
        this->message_39_init();
        this->numbertilde_02_init();
        this->message_40_init();
        this->message_41_init();
        this->message_42_init();
        this->numbertilde_03_init();
        this->numberobj_113_init();
        this->message_43_init();
        this->message_44_init();
        this->message_45_init();
        this->numberobj_114_init();
        this->numberobj_115_init();
        this->random_07_nz_init();
        this->message_46_init();
        this->message_47_init();
        this->message_48_init();
        this->numberobj_116_init();
        this->numberobj_117_init();
        this->message_49_init();
        this->message_50_init();
        this->numberobj_118_init();
        this->message_51_init();
        this->message_52_init();
        this->numberobj_119_init();
        this->random_08_nz_init();
        this->message_53_init();
        this->message_54_init();
        this->message_55_init();
        this->p_05->initializeObjects();
        this->p_06->initializeObjects();
        this->p_07->initializeObjects();
        this->p_08->initializeObjects();
        this->p_09->initializeObjects();
        this->p_10->initializeObjects();
        this->p_11->initializeObjects();
        this->p_12->initializeObjects();
        this->p_13->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_05->startup();
        this->p_06->startup();
        this->p_07->startup();
        this->p_08->startup();
        this->p_09->startup();
        this->p_10->startup();
        this->p_11->startup();
        this->p_12->startup();
        this->p_13->startup();
    
        if ((bool)(this->metro_01_on))
            this->metro_01_on_set(1);
    
        if ((bool)(this->metro_02_on))
            this->metro_02_on_set(1);
    }
    
    void allocateDataRefs() {
        this->p_05->allocateDataRefs();
        this->p_06->allocateDataRefs();
        this->p_07->allocateDataRefs();
        this->p_08->allocateDataRefs();
        this->p_09->allocateDataRefs();
        this->p_10->allocateDataRefs();
        this->p_11->allocateDataRefs();
        this->p_12->allocateDataRefs();
        this->p_13->allocateDataRefs();
    }
    
    void linetilde_08_time_set(number v) {
        this->linetilde_08_time = v;
    }
    
    void linetilde_08_segments_set(const list& v) {
        this->linetilde_08_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_08_time == 0) {
                this->linetilde_08_activeRamps->length = 0;
                this->linetilde_08_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_08_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_08_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_08_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_08_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_08_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_08_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_08_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_08_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_08_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_08_activeRamps->push(lastRampValue);
                    this->linetilde_08_activeRamps->push(0);
                    this->linetilde_08_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_08_keepramp)) {
                            this->linetilde_08_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_08_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_08_activeRamps->push(destinationValue);
                    this->linetilde_08_activeRamps->push(inc);
                    this->linetilde_08_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void linetilde_07_time_set(number v) {
        this->linetilde_07_time = v;
    }
    
    void linetilde_07_segments_set(const list& v) {
        this->linetilde_07_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_07_time == 0) {
                this->linetilde_07_activeRamps->length = 0;
                this->linetilde_07_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_07_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_07_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_07_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_07_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_07_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_07_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_07_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_07_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_07_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_07_activeRamps->push(lastRampValue);
                    this->linetilde_07_activeRamps->push(0);
                    this->linetilde_07_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_07_keepramp)) {
                            this->linetilde_07_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_07_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_07_activeRamps->push(destinationValue);
                    this->linetilde_07_activeRamps->push(inc);
                    this->linetilde_07_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void message_53_out_set(const list& v) {
        this->linetilde_08_segments_set(v);
        this->linetilde_07_segments_set(v);
    }
    
    void message_53_trigger_bang() {
        this->message_53_out_set(this->message_53_set);
    }
    
    void select_19_match1_bang() {
        this->message_53_trigger_bang();
    }
    
    void message_55_out_set(const list& v) {
        this->linetilde_08_segments_set(v);
        this->linetilde_07_segments_set(v);
    }
    
    void message_55_trigger_bang() {
        this->message_55_out_set(this->message_55_set);
    }
    
    void select_19_match2_bang() {
        this->message_55_trigger_bang();
    }
    
    void select_19_nomatch_number_set(number ) {}
    
    void select_19_input_number_set(number v) {
        if (v == this->select_19_test1)
            this->select_19_match1_bang();
        else if (v == this->select_19_test2)
            this->select_19_match2_bang();
        else
            this->select_19_nomatch_number_set(v);
    }
    
    void receive_24_output_number_set(number v) {
        this->receive_24_output_number = v;
        this->select_19_input_number_set(v);
    }
    
    void p_09_target_stutterstereo_number_set(number v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->receive_12_output_number_set(v);
    }
    
    void p_10_target_stutterstereo_number_set(number v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->receive_14_output_number_set(v);
    }
    
    void switchobj_10_onoff_set(number v) {
        this->switchobj_10_onoff = v;
    }
    
    void p_10_in1_number_set(number v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_30_out1_number_set(v);
    }
    
    void p_09_in1_number_set(number v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_19_out1_number_set(v);
    }
    
    void numberobj_116_output_set(number v) {
        this->switchobj_10_onoff_set(v);
        this->p_10_in1_number_set(v);
        this->p_09_in1_number_set(v);
    }
    
    void numberobj_116_value_set(number v) {
        this->numberobj_116_value_setter(v);
        v = this->numberobj_116_value;
        number localvalue = v;
    
        if (this->numberobj_116_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("STUTTER/number_obj-100"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_116_output_set(localvalue);
    }
    
    void message_46_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_116_value_set(converted);
        }
    }
    
    void message_46_trigger_bang() {
        this->message_46_out_set(this->message_46_set);
    }
    
    void select_16_match1_bang() {
        this->message_46_trigger_bang();
    }
    
    void message_47_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_116_value_set(converted);
        }
    }
    
    void message_47_trigger_bang() {
        this->message_47_out_set(this->message_47_set);
    }
    
    void select_16_match2_bang() {
        this->message_47_trigger_bang();
    }
    
    void select_16_nomatch_number_set(number ) {}
    
    void select_16_input_number_set(number v) {
        if (v == this->select_16_test1)
            this->select_16_match1_bang();
        else if (v == this->select_16_test2)
            this->select_16_match2_bang();
        else
            this->select_16_nomatch_number_set(v);
    }
    
    void linetilde_05_time_set(number v) {
        this->linetilde_05_time = v;
    }
    
    void linetilde_05_segments_set(const list& v) {
        this->linetilde_05_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_05_time == 0) {
                this->linetilde_05_activeRamps->length = 0;
                this->linetilde_05_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_05_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_05_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_05_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_05_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_05_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_05_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_05_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_05_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_05_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_05_activeRamps->push(lastRampValue);
                    this->linetilde_05_activeRamps->push(0);
                    this->linetilde_05_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_05_keepramp)) {
                            this->linetilde_05_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_05_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_05_activeRamps->push(destinationValue);
                    this->linetilde_05_activeRamps->push(inc);
                    this->linetilde_05_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void message_39_out_set(const list& v) {
        this->linetilde_05_segments_set(v);
    }
    
    void message_39_trigger_bang() {
        this->message_39_out_set(this->message_39_set);
    }
    
    void button_11_output_bang() {
        this->message_39_trigger_bang();
    }
    
    void button_11_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("STUTTER/button_obj-52"), this->_currentTime);;
        this->button_11_output_bang();
    }
    
    void numberobj_113_output_set(number v) {
        RNBO_UNUSED(v);
        this->button_11_bangval_bang();
    }
    
    void numberobj_113_value_set(number v) {
        this->numberobj_113_value_setter(v);
        v = this->numberobj_113_value;
        number localvalue = v;
    
        if (this->numberobj_113_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("STUTTER/number_obj-50"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_113_output_set(localvalue);
    }
    
    void linetilde_04_time_set(number v) {
        this->linetilde_04_time = v;
    }
    
    void linetilde_04_segments_set(const list& v) {
        this->linetilde_04_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_04_time == 0) {
                this->linetilde_04_activeRamps->length = 0;
                this->linetilde_04_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_04_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_04_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_04_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_04_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_04_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_04_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_04_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_04_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_04_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_04_activeRamps->push(lastRampValue);
                    this->linetilde_04_activeRamps->push(0);
                    this->linetilde_04_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_04_keepramp)) {
                            this->linetilde_04_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_04_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_04_activeRamps->push(destinationValue);
                    this->linetilde_04_activeRamps->push(inc);
                    this->linetilde_04_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_114_output_set(number v) {
        this->numberobj_113_value_set(v);
    
        {
            list converted = {v};
            this->linetilde_04_segments_set(converted);
        }
    }
    
    void numberobj_114_value_set(number v) {
        this->numberobj_114_value_setter(v);
        v = this->numberobj_114_value;
        number localvalue = v;
    
        if (this->numberobj_114_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("STUTTER/number_obj-131"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_114_output_set(localvalue);
    }
    
    void receive_20_output_number_set(number v) {
        this->receive_20_output_number = v;
        this->select_16_input_number_set(v);
        this->numberobj_114_value_set(v);
    }
    
    void p_06_target_stuttermode_number_set(number v) {
        this->p_06->updateTime(this->_currentTime);
        this->p_06->receive_03_output_number_set(v);
    }
    
    void p_08_target_stuttermode_number_set(number v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->receive_08_output_number_set(v);
    }
    
    void gate_08_onoff_set(number v) {
        this->gate_08_onoff = v;
    }
    
    void gate_08_out1_number_set(number v) {
        this->gate_08_out1_number = v;
    }
    
    void metro_02_on_set(number v) {
        this->metro_02_on = v;
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(v)) {
            {
                this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
            }
        }
    }
    
    void toggle_05_output_set(number v) {
        this->metro_02_on_set(v);
    }
    
    void toggle_05_value_number_set(number v) {
        this->toggle_05_value_number_setter(v);
        v = this->toggle_05_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("STUTTER/toggle_obj-90"), v, this->_currentTime);
        this->toggle_05_output_set(v);
    }
    
    void metro_01_on_set(number v) {
        this->metro_01_on = v;
        this->getEngine()->flushClockEvents(this, -1987572531, false);;
    
        if ((bool)(v)) {
            {
                this->getEngine()->scheduleClockEvent(this, -1987572531, 0 + this->_currentTime);;
            }
        }
    }
    
    void toggle_03_output_set(number v) {
        this->metro_01_on_set(v);
    }
    
    void toggle_03_value_number_set(number v) {
        this->toggle_03_value_number_setter(v);
        v = this->toggle_03_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("STUTTER/toggle_obj-65"), v, this->_currentTime);
        this->toggle_03_output_set(v);
    }
    
    void gate_08_out2_number_set(number v) {
        this->gate_08_out2_number = v;
        this->toggle_05_value_number_set(v);
        this->toggle_03_value_number_set(v);
    }
    
    void gate_08_input_number_set(number v) {
        if (this->gate_08_onoff == 1)
            this->gate_08_out1_number_set(v);
        else if (this->gate_08_onoff == 2)
            this->gate_08_out2_number_set(v);
    }
    
    void message_50_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_08_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_08_onoff_set(converted);
        }
    }
    
    void message_50_trigger_bang() {
        this->message_50_out_set(this->message_50_set);
    }
    
    void message_44_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_05_value_number_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_03_value_number_set(converted);
        }
    }
    
    void message_44_trigger_bang() {
        this->message_44_out_set(this->message_44_set);
    }
    
    void gate_07_onoff_set(number v) {
        this->gate_07_onoff = v;
    }
    
    void linetilde_06_time_set(number v) {
        this->linetilde_06_time = v;
    }
    
    void linetilde_06_segments_set(const list& v) {
        this->linetilde_06_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_06_time == 0) {
                this->linetilde_06_activeRamps->length = 0;
                this->linetilde_06_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_06_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_06_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_06_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_06_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_06_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_06_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_06_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_06_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_06_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_06_activeRamps->push(lastRampValue);
                    this->linetilde_06_activeRamps->push(0);
                    this->linetilde_06_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_06_keepramp)) {
                            this->linetilde_06_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_06_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_06_activeRamps->push(destinationValue);
                    this->linetilde_06_activeRamps->push(inc);
                    this->linetilde_06_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void message_43_out_set(const list& v) {
        this->linetilde_06_segments_set(v);
    }
    
    void message_43_trigger_bang() {
        this->message_43_out_set(this->message_43_set);
    }
    
    void p_09_in9_bang_bang() {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_27_out1_bang_bang();
    }
    
    void select_13_match1_bang() {
        this->message_43_trigger_bang();
        this->p_09_in9_bang_bang();
    }
    
    void message_41_out_set(const list& v) {
        this->linetilde_06_segments_set(v);
    }
    
    void message_41_trigger_bang() {
        this->message_41_out_set(this->message_41_set);
    }
    
    void p_10_in9_bang_bang() {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_38_out1_bang_bang();
    }
    
    void select_13_match2_bang() {
        this->message_41_trigger_bang();
        this->p_10_in9_bang_bang();
    }
    
    void select_13_nomatch_number_set(number ) {}
    
    void select_13_input_number_set(number v) {
        if (v == this->select_13_test1)
            this->select_13_match1_bang();
        else if (v == this->select_13_test2)
            this->select_13_match2_bang();
        else
            this->select_13_nomatch_number_set(v);
    }
    
    void toggle_02_output_set(number v) {
        this->select_13_input_number_set(v);
    }
    
    void toggle_02_value_number_set(number v) {
        this->toggle_02_value_number_setter(v);
        v = this->toggle_02_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("STUTTER/toggle_obj-17"), v, this->_currentTime);
        this->toggle_02_output_set(v);
    }
    
    void toggle_02_value_bang_bang() {
        number val = (this->toggle_02_value_number == 1 ? 0 : 1);
        this->toggle_02_value_number_set(val);
    }
    
    void p_08_in1_bang_bang() {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->eventinlet_16_out1_bang_bang();
    }
    
    void button_09_output_bang() {
        this->p_08_in1_bang_bang();
    }
    
    void button_09_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("STUTTER/button_obj-11"), this->_currentTime);;
        this->button_09_output_bang();
    }
    
    void switchobj_10_out_bang_bang() {
        this->toggle_02_value_bang_bang();
        this->button_09_bangval_bang();
    }
    
    void switchobj_10_in2_bang_bang() {
        if (this->switchobj_10_onoff == 2) {
            this->switchobj_10_out_bang_bang();
        }
    }
    
    void send_02_input_bang_bang() {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_14_source_stutrateright_bang_bang();
    }
    
    void button_10_output_bang() {
        this->switchobj_10_in2_bang_bang();
        this->send_02_input_bang_bang();
    }
    
    void button_10_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("STUTTER/button_obj-97"), this->_currentTime);;
        this->button_10_output_bang();
    }
    
    void p_10_in2_bang_bang() {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_31_out1_bang_bang();
    }
    
    void p_09_in2_bang_bang() {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_20_out1_bang_bang();
    }
    
    void switchobj_10_out_number_set(number v) {
        this->toggle_02_value_number_set(v);
        this->button_09_bangval_bang();
    }
    
    void switchobj_10_in1_number_set(number v) {
        if (this->switchobj_10_onoff == 1) {
            this->switchobj_10_out_number_set(v);
        }
    }
    
    void linetilde_03_time_set(number v) {
        this->linetilde_03_time = v;
    }
    
    void linetilde_03_segments_set(const list& v) {
        this->linetilde_03_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_03_time == 0) {
                this->linetilde_03_activeRamps->length = 0;
                this->linetilde_03_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_03_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_03_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_03_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_03_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_03_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_03_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_03_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_03_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_03_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_03_activeRamps->push(lastRampValue);
                    this->linetilde_03_activeRamps->push(0);
                    this->linetilde_03_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_03_keepramp)) {
                            this->linetilde_03_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_03_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_03_activeRamps->push(destinationValue);
                    this->linetilde_03_activeRamps->push(inc);
                    this->linetilde_03_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void message_38_out_set(const list& v) {
        this->linetilde_03_segments_set(v);
    }
    
    void message_38_trigger_bang() {
        this->message_38_out_set(this->message_38_set);
    }
    
    void p_09_in4_list_set(const list& v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_22_out1_list_set(v);
    }
    
    void p_05_out4_list_set(const list& v) {
        this->p_09_in4_list_set(v);
    }
    
    void p_09_in3_list_set(const list& v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_21_out1_list_set(v);
    }
    
    void p_05_out3_list_set(const list& v) {
        this->p_09_in3_list_set(v);
    }
    
    void p_05_out1_bang_bang() {}
    
    void p_05_in1_bang_bang() {
        this->p_05->updateTime(this->_currentTime);
        this->p_05->eventinlet_03_out1_bang_bang();
    }
    
    void select_12_match1_bang() {
        this->message_38_trigger_bang();
        this->p_05_in1_bang_bang();
    }
    
    void message_37_out_set(const list& v) {
        this->linetilde_03_segments_set(v);
    }
    
    void message_37_trigger_bang() {
        this->message_37_out_set(this->message_37_set);
    }
    
    void p_10_in4_list_set(const list& v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_33_out1_list_set(v);
    }
    
    void p_07_out4_list_set(const list& v) {
        this->p_10_in4_list_set(v);
    }
    
    void p_10_in3_list_set(const list& v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_32_out1_list_set(v);
    }
    
    void p_07_out3_list_set(const list& v) {
        this->p_10_in3_list_set(v);
    }
    
    void p_07_out1_bang_bang() {}
    
    void p_07_in1_bang_bang() {
        this->p_07->updateTime(this->_currentTime);
        this->p_07->eventinlet_11_out1_bang_bang();
    }
    
    void select_12_match2_bang() {
        this->message_37_trigger_bang();
        this->p_07_in1_bang_bang();
    }
    
    void select_12_nomatch_number_set(number ) {}
    
    void select_12_input_number_set(number v) {
        if (v == this->select_12_test1)
            this->select_12_match1_bang();
        else if (v == this->select_12_test2)
            this->select_12_match2_bang();
        else
            this->select_12_nomatch_number_set(v);
    }
    
    void toggle_01_output_set(number v) {
        this->switchobj_10_in1_number_set(v);
        this->select_12_input_number_set(v);
    }
    
    void toggle_01_value_number_set(number v) {
        this->toggle_01_value_number_setter(v);
        v = this->toggle_01_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("STUTTER/toggle_obj-149"), v, this->_currentTime);
        this->toggle_01_output_set(v);
    }
    
    void toggle_01_value_bang_bang() {
        number val = (this->toggle_01_value_number == 1 ? 0 : 1);
        this->toggle_01_value_number_set(val);
    }
    
    void p_06_in1_bang_bang() {
        this->p_06->updateTime(this->_currentTime);
        this->p_06->eventinlet_08_out1_bang_bang();
    }
    
    void send_01_input_bang_bang() {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_14_source_stutrateleft_bang_bang();
    }
    
    void button_08_output_bang() {
        this->p_10_in2_bang_bang();
        this->p_09_in2_bang_bang();
        this->toggle_01_value_bang_bang();
        this->p_06_in1_bang_bang();
        this->send_01_input_bang_bang();
    }
    
    void button_08_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("STUTTER/button_obj-40"), this->_currentTime);;
        this->button_08_output_bang();
    }
    
    void gate_07_out1_number_set(number v) {
        this->gate_07_out1_number = v;
        this->button_10_bangval_bang();
        this->button_08_bangval_bang();
    }
    
    void gate_07_out2_number_set(number v) {
        this->gate_07_out2_number = v;
    }
    
    void gate_07_input_number_set(number v) {
        if (this->gate_07_onoff == 1)
            this->gate_07_out1_number_set(v);
        else if (this->gate_07_onoff == 2)
            this->gate_07_out2_number_set(v);
    }
    
    void message_40_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_07_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_07_onoff_set(converted);
        }
    }
    
    void message_40_trigger_bang() {
        this->message_40_out_set(this->message_40_set);
    }
    
    void select_15_match1_bang() {
        this->message_50_trigger_bang();
        this->message_44_trigger_bang();
        this->message_40_trigger_bang();
    }
    
    void message_51_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_08_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_08_onoff_set(converted);
        }
    }
    
    void message_51_trigger_bang() {
        this->message_51_out_set(this->message_51_set);
    }
    
    void message_45_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_05_value_number_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_03_value_number_set(converted);
        }
    }
    
    void message_45_trigger_bang() {
        this->message_45_out_set(this->message_45_set);
    }
    
    void message_42_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_07_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_07_onoff_set(converted);
        }
    }
    
    void message_42_trigger_bang() {
        this->message_42_out_set(this->message_42_set);
    }
    
    void select_15_match2_bang() {
        this->message_51_trigger_bang();
        this->message_45_trigger_bang();
        this->message_42_trigger_bang();
    }
    
    void select_15_nomatch_number_set(number ) {}
    
    void select_15_input_number_set(number v) {
        if (v == this->select_15_test1)
            this->select_15_match1_bang();
        else if (v == this->select_15_test2)
            this->select_15_match2_bang();
        else
            this->select_15_nomatch_number_set(v);
    }
    
    void receive_19_output_number_set(number v) {
        this->receive_19_output_number = v;
        this->select_15_input_number_set(v);
    }
    
    void switchobj_12_onoff_set(number v) {
        this->switchobj_12_onoff = v;
    }
    
    void switchobj_11_onoff_set(number v) {
        this->switchobj_11_onoff = v;
    }
    
    void p_10_in8_list_set(const list& v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_37_out1_list_set(v);
    }
    
    void p_09_in8_list_set(const list& v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_26_out1_list_set(v);
    }
    
    void p_07_in5_list_set(const list& v) {
        this->p_07->updateTime(this->_currentTime);
        this->p_07->eventinlet_15_out1_list_set(v);
    }
    
    void p_05_in5_list_set(const list& v) {
        this->p_05->updateTime(this->_currentTime);
        this->p_05->eventinlet_07_out1_list_set(v);
    }
    
    void metro_02_interval_set(number v) {
        this->metro_02_interval_setter(v);
        v = this->metro_02_interval;
    }
    
    void switchobj_12_out_number_set(number v) {
        this->metro_02_interval_set(v);
    }
    
    void switchobj_12_in1_number_set(number v) {
        if (this->switchobj_12_onoff == 1) {
            this->switchobj_12_out_number_set(v);
        }
    }
    
    void switchobj_12_in2_number_set(number v) {
        if (this->switchobj_12_onoff == 2) {
            this->switchobj_12_out_number_set(v);
        }
    }
    
    void metro_01_interval_set(number v) {
        this->metro_01_interval_setter(v);
        v = this->metro_01_interval;
    }
    
    void switchobj_11_out_number_set(number v) {
        this->metro_01_interval_set(v);
    }
    
    void switchobj_11_in1_number_set(number v) {
        if (this->switchobj_11_onoff == 1) {
            this->switchobj_11_out_number_set(v);
        }
    }
    
    void switchobj_11_in2_number_set(number v) {
        if (this->switchobj_11_onoff == 2) {
            this->switchobj_11_out_number_set(v);
        }
    }
    
    void message_52_out_set(const list& v) {
        {
            if (v->length > 2)
                this->switchobj_12_in2_number_set(v[2]);
    
            if (v->length > 1)
                this->switchobj_12_in1_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->switchobj_12_onoff_set(converted);
        }
    
        {
            if (v->length > 2)
                this->switchobj_11_in2_number_set(v[2]);
    
            if (v->length > 1)
                this->switchobj_11_in1_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->switchobj_11_onoff_set(converted);
        }
    
        this->p_10_in8_list_set(v);
        this->p_09_in8_list_set(v);
        this->p_07_in5_list_set(v);
        this->p_05_in5_list_set(v);
    }
    
    void message_52_trigger_bang() {
        this->message_52_out_set(this->message_52_set);
    }
    
    void select_18_match1_bang() {
        this->message_52_trigger_bang();
    }
    
    void message_54_out_set(const list& v) {
        {
            if (v->length > 2)
                this->switchobj_12_in2_number_set(v[2]);
    
            if (v->length > 1)
                this->switchobj_12_in1_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->switchobj_12_onoff_set(converted);
        }
    
        {
            if (v->length > 2)
                this->switchobj_11_in2_number_set(v[2]);
    
            if (v->length > 1)
                this->switchobj_11_in1_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->switchobj_11_onoff_set(converted);
        }
    
        this->p_10_in8_list_set(v);
        this->p_09_in8_list_set(v);
        this->p_07_in5_list_set(v);
        this->p_05_in5_list_set(v);
    }
    
    void message_54_trigger_bang() {
        this->message_54_out_set(this->message_54_set);
    }
    
    void select_18_match2_bang() {
        this->message_54_trigger_bang();
    }
    
    void select_18_nomatch_number_set(number ) {}
    
    void select_18_input_number_set(number v) {
        if (v == this->select_18_test1)
            this->select_18_match1_bang();
        else if (v == this->select_18_test2)
            this->select_18_match2_bang();
        else
            this->select_18_nomatch_number_set(v);
    }
    
    void receive_23_output_number_set(number v) {
        this->receive_23_output_number = v;
        this->select_18_input_number_set(v);
    }
    
    void p_13_out1_number_set(number v) {
        this->switchobj_12_in2_number_set(v);
    }
    
    void p_13_in1_list_set(const list& v) {
        this->p_13->updateTime(this->_currentTime);
        this->p_13->eventinlet_41_out1_list_set(v);
    }
    
    void p_12_out1_number_set(number v) {
        this->switchobj_11_in2_number_set(v);
    }
    
    void p_12_in1_list_set(const list& v) {
        this->p_12->updateTime(this->_currentTime);
        this->p_12->eventinlet_39_out1_list_set(v);
    }
    
    void p_10_in7_list_set(const list& v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_36_out1_list_set(v);
    }
    
    void p_09_in7_list_set(const list& v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_25_out1_list_set(v);
    }
    
    void p_07_in4_list_set(const list& v) {
        this->p_07->updateTime(this->_currentTime);
        this->p_07->eventinlet_14_out1_list_set(v);
    }
    
    void p_05_in4_list_set(const list& v) {
        this->p_05->updateTime(this->_currentTime);
        this->p_05->eventinlet_06_out1_list_set(v);
    }
    
    void p_11_out1_list_set(const list& v) {
        this->p_13_in1_list_set(v);
        this->p_12_in1_list_set(v);
        this->p_10_in7_list_set(v);
        this->p_09_in7_list_set(v);
        this->p_07_in4_list_set(v);
        this->p_05_in4_list_set(v);
    }
    
    void p_11_target_stutterquantmode_number_set(number v) {
        this->p_11->updateTime(this->_currentTime);
        this->p_11->receive_15_output_number_set(v);
    }
    
    void p_06_target_stuttertrigger_number_set(number v) {
        this->p_06->updateTime(this->_currentTime);
        this->p_06->receive_04_output_number_set(v);
    }
    
    void p_08_target_stuttertrigger_number_set(number v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->receive_09_output_number_set(v);
    }
    
    void gate_07_out1_bang_bang() {
        this->button_10_bangval_bang();
        this->button_08_bangval_bang();
    }
    
    void gate_07_out2_bang_bang() {}
    
    void gate_07_input_bang_bang() {
        if (this->gate_07_onoff == 1)
            this->gate_07_out1_bang_bang();
        else if (this->gate_07_onoff == 2)
            this->gate_07_out2_bang_bang();
    }
    
    void select_14_match1_bang() {
        this->gate_07_input_bang_bang();
    }
    
    void select_14_match2_bang() {}
    
    void select_14_nomatch_number_set(number ) {}
    
    void select_14_input_number_set(number v) {
        if (v == this->select_14_test1)
            this->select_14_match1_bang();
        else if (v == this->select_14_test2)
            this->select_14_match2_bang();
        else
            this->select_14_nomatch_number_set(v);
    }
    
    void receive_18_output_number_set(number v) {
        this->receive_18_output_number = v;
        this->select_14_input_number_set(v);
    }
    
    void p_10_in5_number_set(number v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_34_out1_number_set(v);
    }
    
    void p_09_in5_number_set(number v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_23_out1_number_set(v);
    }
    
    void p_07_in2_number_set(number v) {
        this->p_07->updateTime(this->_currentTime);
        this->p_07->eventinlet_12_out1_number_set(v);
    }
    
    void p_05_in2_number_set(number v) {
        this->p_05->updateTime(this->_currentTime);
        this->p_05->eventinlet_04_out1_number_set(v);
    }
    
    void numberobj_111_output_set(number v) {
        this->p_10_in5_number_set(v);
        this->p_09_in5_number_set(v);
        this->p_07_in2_number_set(v);
        this->p_05_in2_number_set(v);
    }
    
    void numberobj_111_value_set(number v) {
        this->numberobj_111_value_setter(v);
        v = this->numberobj_111_value;
        number localvalue = v;
    
        if (this->numberobj_111_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("STUTTER/number_obj-24"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_111_output_set(localvalue);
    }
    
    void receive_16_output_number_set(number v) {
        this->receive_16_output_number = v;
        this->numberobj_111_value_set(v);
    }
    
    void p_10_in6_number_set(number v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->eventinlet_35_out1_number_set(v);
    }
    
    void p_09_in6_number_set(number v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->eventinlet_24_out1_number_set(v);
    }
    
    void p_07_in3_number_set(number v) {
        this->p_07->updateTime(this->_currentTime);
        this->p_07->eventinlet_13_out1_number_set(v);
    }
    
    void p_05_in3_number_set(number v) {
        this->p_05->updateTime(this->_currentTime);
        this->p_05->eventinlet_05_out1_number_set(v);
    }
    
    void numberobj_112_output_set(number v) {
        this->p_10_in6_number_set(v);
        this->p_09_in6_number_set(v);
        this->p_07_in3_number_set(v);
        this->p_05_in3_number_set(v);
    }
    
    void numberobj_112_value_set(number v) {
        this->numberobj_112_value_setter(v);
        v = this->numberobj_112_value;
        number localvalue = v;
    
        if (this->numberobj_112_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("STUTTER/number_obj-32"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_112_output_set(localvalue);
    }
    
    void receive_17_output_number_set(number v) {
        this->receive_17_output_number = v;
        this->numberobj_112_value_set(v);
    }
    
    void p_06_target_stutterlikeli_number_set(number v) {
        this->p_06->updateTime(this->_currentTime);
        this->p_06->receive_02_output_number_set(v);
    }
    
    void p_08_target_stutterlikeli_number_set(number v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->receive_07_output_number_set(v);
    }
    
    void scale_06_outlow_set(number v) {
        this->scale_06_outlow = v;
    }
    
    void scale_05_outlow_set(number v) {
        this->scale_05_outlow = v;
    }
    
    void numberobj_117_output_set(number v) {
        this->scale_06_outlow_set(v);
        this->scale_05_outlow_set(v);
    }
    
    void numberobj_117_value_set(number v) {
        this->numberobj_117_value_setter(v);
        v = this->numberobj_117_value;
        number localvalue = v;
    
        if (this->numberobj_117_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("STUTTER/number_obj-70"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_117_output_set(localvalue);
    }
    
    void receive_21_output_number_set(number v) {
        this->receive_21_output_number = v;
        this->numberobj_117_value_set(v);
    }
    
    void scale_06_outhigh_set(number v) {
        this->scale_06_outhigh = v;
    }
    
    void scale_05_outhigh_set(number v) {
        this->scale_05_outhigh = v;
    }
    
    void numberobj_118_output_set(number v) {
        this->scale_06_outhigh_set(v);
        this->scale_05_outhigh_set(v);
    }
    
    void numberobj_118_value_set(number v) {
        this->numberobj_118_value_setter(v);
        v = this->numberobj_118_value;
        number localvalue = v;
    
        if (this->numberobj_118_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("STUTTER/number_obj-72"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_118_output_set(localvalue);
    }
    
    void receive_22_output_number_set(number v) {
        this->receive_22_output_number = v;
        this->numberobj_118_value_set(v);
    }
    
    void p_05_target_buff1_number_set(number v) {
        this->p_05->updateTime(this->_currentTime);
        this->p_05->receive_01_output_number_set(v);
    }
    
    void p_07_target_buff1_number_set(number v) {
        this->p_07->updateTime(this->_currentTime);
        this->p_07->receive_06_output_number_set(v);
    }
    
    void p_09_target_buff2_number_set(number v) {
        this->p_09->updateTime(this->_currentTime);
        this->p_09->receive_11_output_number_set(v);
    }
    
    void p_10_target_buff2_number_set(number v) {
        this->p_10->updateTime(this->_currentTime);
        this->p_10->receive_13_output_number_set(v);
    }
    
    void message_37_set_set(const list& v) {
        this->message_37_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-117"), v, this->_currentTime);
    }
    
    void message_38_set_set(const list& v) {
        this->message_38_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-122"), v, this->_currentTime);
    }
    
    void message_39_set_set(const list& v) {
        this->message_39_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-29"), v, this->_currentTime);
    }
    
    void message_40_set_set(const list& v) {
        this->message_40_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-118"), v, this->_currentTime);
    }
    
    void message_41_set_set(const list& v) {
        this->message_41_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-27"), v, this->_currentTime);
    }
    
    void message_42_set_set(const list& v) {
        this->message_42_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-120"), v, this->_currentTime);
    }
    
    void message_43_set_set(const list& v) {
        this->message_43_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-26"), v, this->_currentTime);
    }
    
    void message_44_set_set(const list& v) {
        this->message_44_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-49"), v, this->_currentTime);
    }
    
    void message_45_set_set(const list& v) {
        this->message_45_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-43"), v, this->_currentTime);
    }
    
    void p_12_in2_number_set(number v) {
        this->p_12->updateTime(this->_currentTime);
        this->p_12->eventinlet_40_out1_number_set(v);
    }
    
    void numberobj_115_output_set(number v) {
        this->p_12_in2_number_set(v);
        this->switchobj_11_in1_number_set(v);
    }
    
    void numberobj_115_value_set(number v) {
        this->numberobj_115_value_setter(v);
        v = this->numberobj_115_value;
        number localvalue = v;
    
        if (this->numberobj_115_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("STUTTER/number_obj-63"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_115_output_set(localvalue);
    }
    
    void scale_05_out_set(const list& v) {
        this->scale_05_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_115_value_set(converted);
        }
    }
    
    void scale_05_input_set(const list& v) {
        this->scale_05_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_05_inlow,
                this->scale_05_inhigh,
                this->scale_05_outlow,
                this->scale_05_outhigh,
                this->scale_05_power
            ));
        }
    
        this->scale_05_out_set(tmp);
    }
    
    void random_07_result_set(number v) {
        {
            list converted = {v};
            this->scale_05_input_set(converted);
        }
    }
    
    void random_07_trigger_bang() {
        this->random_07_result_set(rnbo_abs(this->random_07_nz_next()) * this->random_07_limit);
    }
    
    void button_12_output_bang() {
        this->random_07_trigger_bang();
    }
    
    void button_12_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("STUTTER/button_obj-60"), this->_currentTime);;
        this->button_12_output_bang();
    }
    
    void message_46_set_set(const list& v) {
        this->message_46_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-80"), v, this->_currentTime);
    }
    
    void metro_01_tickout_bang() {
        this->button_12_bangval_bang();
        this->button_08_bangval_bang();
    }
    
    void message_47_set_set(const list& v) {
        this->message_47_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-86"), v, this->_currentTime);
    }
    
    void message_48_set_set(const list& v) {
        this->message_48_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-138"), v, this->_currentTime);
    }
    
    void gate_08_out1_list_set(const list& v) {
        this->gate_08_out1_list = jsCreateListCopy(v);
    }
    
    void gate_08_out2_list_set(const list& v) {
        this->gate_08_out2_list = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_05_value_number_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_03_value_number_set(converted);
        }
    }
    
    void gate_08_input_list_set(const list& v) {
        if (this->gate_08_onoff == 1)
            this->gate_08_out1_list_set(v);
        else if (this->gate_08_onoff == 2)
            this->gate_08_out2_list_set(v);
    }
    
    void message_48_out_set(const list& v) {
        this->gate_08_input_list_set(v);
    }
    
    void message_48_trigger_bang() {
        this->message_48_out_set(this->message_48_set);
    }
    
    void select_17_match1_bang() {
        this->message_48_trigger_bang();
    }
    
    void message_49_out_set(const list& v) {
        this->gate_08_input_list_set(v);
    }
    
    void message_49_trigger_bang() {
        this->message_49_out_set(this->message_49_set);
    }
    
    void select_17_match2_bang() {
        this->message_49_trigger_bang();
    }
    
    void select_17_nomatch_number_set(number ) {}
    
    void select_17_input_number_set(number v) {
        if (v == this->select_17_test1)
            this->select_17_match1_bang();
        else if (v == this->select_17_test2)
            this->select_17_match2_bang();
        else
            this->select_17_nomatch_number_set(v);
    }
    
    void p_06_target_transport_number_set(number v) {
        this->p_06->updateTime(this->_currentTime);
        this->p_06->receive_05_output_number_set(v);
    }
    
    void p_08_target_transport_number_set(number v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->receive_10_output_number_set(v);
    }
    
    void send_03_input_number_set(number v) {
        this->send_03_input_number = v;
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_14_source_transport_number_set(v);
        this->p_06_target_transport_number_set(v);
        this->p_08_target_transport_number_set(v);
    }
    
    void toggle_04_output_set(number v) {
        this->select_17_input_number_set(v);
        this->send_03_input_number_set(v);
    }
    
    void toggle_04_value_number_set(number v) {
        this->toggle_04_value_number_setter(v);
        v = this->toggle_04_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("STUTTER/toggle_obj-133"), v, this->_currentTime);
        this->toggle_04_output_set(v);
    }
    
    void message_49_set_set(const list& v) {
        this->message_49_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-136"), v, this->_currentTime);
    }
    
    void message_50_set_set(const list& v) {
        this->message_50_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-141"), v, this->_currentTime);
    }
    
    void message_51_set_set(const list& v) {
        this->message_51_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-143"), v, this->_currentTime);
    }
    
    void message_52_set_set(const list& v) {
        this->message_52_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-106"), v, this->_currentTime);
    }
    
    void p_13_in2_number_set(number v) {
        this->p_13->updateTime(this->_currentTime);
        this->p_13->eventinlet_42_out1_number_set(v);
    }
    
    void numberobj_119_output_set(number v) {
        this->switchobj_12_in1_number_set(v);
        this->p_13_in2_number_set(v);
    }
    
    void numberobj_119_value_set(number v) {
        this->numberobj_119_value_setter(v);
        v = this->numberobj_119_value;
        number localvalue = v;
    
        if (this->numberobj_119_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("STUTTER/number_obj-92"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_119_output_set(localvalue);
    }
    
    void scale_06_out_set(const list& v) {
        this->scale_06_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_119_value_set(converted);
        }
    }
    
    void scale_06_input_set(const list& v) {
        this->scale_06_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_06_inlow,
                this->scale_06_inhigh,
                this->scale_06_outlow,
                this->scale_06_outhigh,
                this->scale_06_power
            ));
        }
    
        this->scale_06_out_set(tmp);
    }
    
    void random_08_result_set(number v) {
        {
            list converted = {v};
            this->scale_06_input_set(converted);
        }
    }
    
    void random_08_trigger_bang() {
        this->random_08_result_set(rnbo_abs(this->random_08_nz_next()) * this->random_08_limit);
    }
    
    void button_13_output_bang() {
        this->random_08_trigger_bang();
    }
    
    void button_13_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("STUTTER/button_obj-93"), this->_currentTime);;
        this->button_13_output_bang();
    }
    
    void message_53_set_set(const list& v) {
        this->message_53_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-45"), v, this->_currentTime);
    }
    
    void message_54_set_set(const list& v) {
        this->message_54_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-108"), v, this->_currentTime);
    }
    
    void message_55_set_set(const list& v) {
        this->message_55_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("STUTTER/message_obj-61"), v, this->_currentTime);
    }
    
    void metro_02_tickout_bang() {
        this->button_13_bangval_bang();
        this->button_10_bangval_bang();
    }
    
    void transport_01_outtempo_set(number ) {}
    
    void transport_01_state_set(number v) {
        this->toggle_04_value_number_set(v);
    }
    
    void transport_01_outtimesig_set(const list& ) {}
    
    void p_05_perform(SampleValue * out2, Index n) {
        // subpatcher: circ1l
        SampleArray<1> outs = {out2};
    
        this->p_05->process(nullptr, 0, outs, 1, n);
    }
    
    void p_06_perform(SampleValue * out1, Index n) {
        // subpatcher: likelihood
        SampleArray<1> outs = {out1};
    
        this->p_06->process(nullptr, 0, outs, 1, n);
    }
    
    void p_07_perform(SampleValue * out2, Index n) {
        // subpatcher: circ2l
        SampleArray<1> outs = {out2};
    
        this->p_07->process(nullptr, 0, outs, 1, n);
    }
    
    void linetilde_03_perform(SampleValue * out, Index n) {
        auto __linetilde_03_time = this->linetilde_03_time;
        auto __linetilde_03_keepramp = this->linetilde_03_keepramp;
        auto __linetilde_03_currentValue = this->linetilde_03_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_03_activeRamps->length)) {
            while ((bool)(this->linetilde_03_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_03_activeRamps[0];
                number inc = this->linetilde_03_activeRamps[1];
                number rampTimeInSamples = this->linetilde_03_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_03_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_03_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_03_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            894770446,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_03_keepramp))) {
                            __linetilde_03_time = 0;
                        }
                    }
                }
    
                __linetilde_03_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_03_currentValue;
            i++;
        }
    
        this->linetilde_03_currentValue = __linetilde_03_currentValue;
        this->linetilde_03_time = __linetilde_03_time;
    }
    
    void xfade_tilde_02_perform(
        const Sample * pos,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] * this->xfade_tilde_02_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_02_func_next(pos[(Index)i], 1);
        }
    }
    
    void xfade_tilde_01_perform(
        const Sample * pos,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] * this->xfade_tilde_01_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_01_func_next(pos[(Index)i], 1);
        }
    }
    
    void numbertilde_01_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_01_currentIntervalInSamples = this->numbertilde_01_currentIntervalInSamples;
        auto __numbertilde_01_lastValue = this->numbertilde_01_lastValue;
        auto __numbertilde_01_currentInterval = this->numbertilde_01_currentInterval;
        auto __numbertilde_01_rampInSamples = this->numbertilde_01_rampInSamples;
        auto __numbertilde_01_outValue = this->numbertilde_01_outValue;
        auto __numbertilde_01_currentMode = this->numbertilde_01_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_01_currentMode == 0) {
                output[(Index)i] = this->numbertilde_01_smooth_next(
                    __numbertilde_01_outValue,
                    __numbertilde_01_rampInSamples,
                    __numbertilde_01_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_01_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_01_lastValue && __numbertilde_01_currentInterval <= 0) {
            __numbertilde_01_currentInterval = __numbertilde_01_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                1396722025,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_01_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("STUTTER/number~_obj-151"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_01_currentInterval = __numbertilde_01_currentInterval;
        this->numbertilde_01_lastValue = __numbertilde_01_lastValue;
    }
    
    void linetilde_04_perform(SampleValue * out, Index n) {
        auto __linetilde_04_time = this->linetilde_04_time;
        auto __linetilde_04_keepramp = this->linetilde_04_keepramp;
        auto __linetilde_04_currentValue = this->linetilde_04_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_04_activeRamps->length)) {
            while ((bool)(this->linetilde_04_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_04_activeRamps[0];
                number inc = this->linetilde_04_activeRamps[1];
                number rampTimeInSamples = this->linetilde_04_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_04_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_04_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_04_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -62043057,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_04_keepramp))) {
                            __linetilde_04_time = 0;
                        }
                    }
                }
    
                __linetilde_04_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_04_currentValue;
            i++;
        }
    
        this->linetilde_04_currentValue = __linetilde_04_currentValue;
        this->linetilde_04_time = __linetilde_04_time;
    }
    
    void p_08_perform(SampleValue * out1, Index n) {
        // subpatcher: likelihood
        SampleArray<1> outs = {out1};
    
        this->p_08->process(nullptr, 0, outs, 1, n);
    }
    
    void xfade_tilde_04_perform(
        const Sample * pos,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] * this->xfade_tilde_04_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_04_func_next(pos[(Index)i], 1);
        }
    }
    
    void p_09_perform(SampleValue * out1, Index n) {
        // subpatcher: cric1r
        SampleArray<1> outs = {out1};
    
        this->p_09->process(nullptr, 0, outs, 1, n);
    }
    
    void linetilde_05_perform(SampleValue * out, Index n) {
        auto __linetilde_05_time = this->linetilde_05_time;
        auto __linetilde_05_keepramp = this->linetilde_05_keepramp;
        auto __linetilde_05_currentValue = this->linetilde_05_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_05_activeRamps->length)) {
            while ((bool)(this->linetilde_05_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_05_activeRamps[0];
                number inc = this->linetilde_05_activeRamps[1];
                number rampTimeInSamples = this->linetilde_05_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_05_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_05_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_05_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -281953904,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_05_keepramp))) {
                            __linetilde_05_time = 0;
                        }
                    }
                }
    
                __linetilde_05_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_05_currentValue;
            i++;
        }
    
        this->linetilde_05_currentValue = __linetilde_05_currentValue;
        this->linetilde_05_time = __linetilde_05_time;
    }
    
    void numbertilde_02_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_02_currentIntervalInSamples = this->numbertilde_02_currentIntervalInSamples;
        auto __numbertilde_02_lastValue = this->numbertilde_02_lastValue;
        auto __numbertilde_02_currentInterval = this->numbertilde_02_currentInterval;
        auto __numbertilde_02_rampInSamples = this->numbertilde_02_rampInSamples;
        auto __numbertilde_02_outValue = this->numbertilde_02_outValue;
        auto __numbertilde_02_currentMode = this->numbertilde_02_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_02_currentMode == 0) {
                output[(Index)i] = this->numbertilde_02_smooth_next(
                    __numbertilde_02_outValue,
                    __numbertilde_02_rampInSamples,
                    __numbertilde_02_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_02_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_02_lastValue && __numbertilde_02_currentInterval <= 0) {
            __numbertilde_02_currentInterval = __numbertilde_02_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_02_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("STUTTER/number~_obj-44"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_02_currentInterval = __numbertilde_02_currentInterval;
        this->numbertilde_02_lastValue = __numbertilde_02_lastValue;
    }
    
    void dspexpr_02_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void p_10_perform(SampleValue * out1, Index n) {
        // subpatcher: cric2r
        SampleArray<1> outs = {out1};
    
        this->p_10->process(nullptr, 0, outs, 1, n);
    }
    
    void linetilde_06_perform(SampleValue * out, Index n) {
        auto __linetilde_06_time = this->linetilde_06_time;
        auto __linetilde_06_keepramp = this->linetilde_06_keepramp;
        auto __linetilde_06_currentValue = this->linetilde_06_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_06_activeRamps->length)) {
            while ((bool)(this->linetilde_06_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_06_activeRamps[0];
                number inc = this->linetilde_06_activeRamps[1];
                number rampTimeInSamples = this->linetilde_06_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_06_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_06_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_06_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -1841075377,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_06_keepramp))) {
                            __linetilde_06_time = 0;
                        }
                    }
                }
    
                __linetilde_06_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_06_currentValue;
            i++;
        }
    
        this->linetilde_06_currentValue = __linetilde_06_currentValue;
        this->linetilde_06_time = __linetilde_06_time;
    }
    
    void xfade_tilde_05_perform(
        const Sample * pos,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] * this->xfade_tilde_05_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_05_func_next(pos[(Index)i], 1);
        }
    }
    
    void xfade_tilde_03_perform(
        const Sample * pos,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] * this->xfade_tilde_03_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_03_func_next(pos[(Index)i], 1);
        }
    }
    
    void dspexpr_01_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void numbertilde_03_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_03_currentIntervalInSamples = this->numbertilde_03_currentIntervalInSamples;
        auto __numbertilde_03_lastValue = this->numbertilde_03_lastValue;
        auto __numbertilde_03_currentInterval = this->numbertilde_03_currentInterval;
        auto __numbertilde_03_rampInSamples = this->numbertilde_03_rampInSamples;
        auto __numbertilde_03_outValue = this->numbertilde_03_outValue;
        auto __numbertilde_03_currentMode = this->numbertilde_03_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_03_currentMode == 0) {
                output[(Index)i] = this->numbertilde_03_smooth_next(
                    __numbertilde_03_outValue,
                    __numbertilde_03_rampInSamples,
                    __numbertilde_03_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_03_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_03_lastValue && __numbertilde_03_currentInterval <= 0) {
            __numbertilde_03_currentInterval = __numbertilde_03_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                2098551528,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_03_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("STUTTER/number~_obj-22"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_03_currentInterval = __numbertilde_03_currentInterval;
        this->numbertilde_03_lastValue = __numbertilde_03_lastValue;
    }
    
    void linetilde_07_perform(SampleValue * out, Index n) {
        auto __linetilde_07_time = this->linetilde_07_time;
        auto __linetilde_07_keepramp = this->linetilde_07_keepramp;
        auto __linetilde_07_currentValue = this->linetilde_07_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_07_activeRamps->length)) {
            while ((bool)(this->linetilde_07_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_07_activeRamps[0];
                number inc = this->linetilde_07_activeRamps[1];
                number rampTimeInSamples = this->linetilde_07_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_07_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_07_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_07_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            1114681293,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_07_keepramp))) {
                            __linetilde_07_time = 0;
                        }
                    }
                }
    
                __linetilde_07_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_07_currentValue;
            i++;
        }
    
        this->linetilde_07_currentValue = __linetilde_07_currentValue;
        this->linetilde_07_time = __linetilde_07_time;
    }
    
    void xfade_tilde_06_perform(
        const Sample * pos,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] * this->xfade_tilde_06_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_06_func_next(pos[(Index)i], 1);
        }
    }
    
    void p_11_perform(Index n) {
        // subpatcher: stutter-withtempo
        this->p_11->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_12_perform(Index n) {
        // subpatcher: quantize
        this->p_12->process(nullptr, 0, nullptr, 0, n);
    }
    
    void linetilde_08_perform(SampleValue * out, Index n) {
        auto __linetilde_08_time = this->linetilde_08_time;
        auto __linetilde_08_keepramp = this->linetilde_08_keepramp;
        auto __linetilde_08_currentValue = this->linetilde_08_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_08_activeRamps->length)) {
            while ((bool)(this->linetilde_08_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_08_activeRamps[0];
                number inc = this->linetilde_08_activeRamps[1];
                number rampTimeInSamples = this->linetilde_08_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_08_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_08_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_08_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -1621164530,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_08_keepramp))) {
                            __linetilde_08_time = 0;
                        }
                    }
                }
    
                __linetilde_08_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_08_currentValue;
            i++;
        }
    
        this->linetilde_08_currentValue = __linetilde_08_currentValue;
        this->linetilde_08_time = __linetilde_08_time;
    }
    
    void xfade_tilde_07_perform(
        const Sample * pos,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] * this->xfade_tilde_07_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_07_func_next(pos[(Index)i], 1);
        }
    }
    
    void p_13_perform(Index n) {
        // subpatcher: quantize
        this->p_13->process(nullptr, 0, nullptr, 0, n);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void toggle_01_value_number_setter(number v) {
        this->toggle_01_value_number = (v != 0 ? 1 : 0);
    }
    
    void numberobj_111_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_111_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_111_value = localvalue;
    }
    
    void numberobj_112_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_112_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_112_value = localvalue;
    }
    
    void toggle_02_value_number_setter(number v) {
        this->toggle_02_value_number = (v != 0 ? 1 : 0);
    }
    
    void numberobj_113_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_113_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_113_value = localvalue;
    }
    
    void numberobj_114_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_114_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_114_value = localvalue;
    }
    
    void numberobj_115_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_115_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_115_value = localvalue;
    }
    
    void random_07_limit_setter(number v) {
        if (v >= 0)
            this->random_07_limit = v;
    }
    
    void toggle_03_value_number_setter(number v) {
        this->toggle_03_value_number = (v != 0 ? 1 : 0);
    }
    
    void metro_01_interval_setter(number v) {
        this->metro_01_interval = (v > 0 ? v : 0);
    }
    
    void toggle_04_value_number_setter(number v) {
        this->toggle_04_value_number = (v != 0 ? 1 : 0);
    }
    
    void numberobj_116_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_116_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_116_value = localvalue;
    }
    
    void numberobj_117_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_117_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_117_value = localvalue;
    }
    
    void numberobj_118_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_118_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_118_value = localvalue;
    }
    
    void numberobj_119_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_119_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_119_value = localvalue;
    }
    
    void random_08_limit_setter(number v) {
        if (v >= 0)
            this->random_08_limit = v;
    }
    
    void toggle_05_value_number_setter(number v) {
        this->toggle_05_value_number = (v != 0 ? 1 : 0);
    }
    
    void metro_02_interval_setter(number v) {
        this->metro_02_interval = (v > 0 ? v : 0);
    }
    
    number xfade_tilde_01_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    if (pos > nchan_1)
                        pos = nchan_1;
                    else if (pos < 0)
                        pos = 0;
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return this->safesqrt(1.0 - rnbo_abs(pos));
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void xfade_tilde_01_func_reset() {}
    
    number xfade_tilde_02_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    if (pos > nchan_1)
                        pos = nchan_1;
                    else if (pos < 0)
                        pos = 0;
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return this->safesqrt(1.0 - rnbo_abs(pos));
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void xfade_tilde_02_func_reset() {}
    
    void toggle_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_01_value_number;
    }
    
    void toggle_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_01_value_number_set(preset["value"]);
    }
    
    void message_37_init() {
        this->message_37_set_set({0, 0, 0, 15, 1, 15});
    }
    
    number numbertilde_01_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_01_smooth_d_prev);
        this->numbertilde_01_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_01_smooth_d_dspsetup() {
        this->numbertilde_01_smooth_d_reset();
    }
    
    void numbertilde_01_smooth_d_reset() {
        this->numbertilde_01_smooth_d_prev = 0;
    }
    
    number numbertilde_01_smooth_next(number x, number up, number down) {
        if (this->numbertilde_01_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_01_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_01_smooth_index = _up;
                this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _up;
            } else if (x < this->numbertilde_01_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_01_smooth_index = _down;
                this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_01_smooth_index > 0) {
            this->numbertilde_01_smooth_prev += this->numbertilde_01_smooth_increment;
            this->numbertilde_01_smooth_index -= 1;
        } else {
            this->numbertilde_01_smooth_prev = x;
        }
    
        return this->numbertilde_01_smooth_prev;
    }
    
    void numbertilde_01_smooth_reset() {
        this->numbertilde_01_smooth_prev = 0;
        this->numbertilde_01_smooth_index = 0;
        this->numbertilde_01_smooth_increment = 0;
        this->numbertilde_01_smooth_d_reset();
    }
    
    void numbertilde_01_init() {
        this->numbertilde_01_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/number~_obj-151"), 1, this->_currentTime);
    }
    
    void numbertilde_01_dspsetup(bool force) {
        if ((bool)(this->numbertilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_01_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_01_currentInterval = this->numbertilde_01_currentIntervalInSamples;
        this->numbertilde_01_rampInSamples = this->mstosamps(this->numbertilde_01_ramp);
        this->numbertilde_01_setupDone = true;
        this->numbertilde_01_smooth_d_dspsetup();
    }
    
    void message_38_init() {
        this->message_38_set_set({1, 0, 1, 15, 0, 15});
    }
    
    number xfade_tilde_03_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    if (pos > nchan_1)
                        pos = nchan_1;
                    else if (pos < 0)
                        pos = 0;
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return this->safesqrt(1.0 - rnbo_abs(pos));
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void xfade_tilde_03_func_reset() {}
    
    number xfade_tilde_04_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    if (pos > nchan_1)
                        pos = nchan_1;
                    else if (pos < 0)
                        pos = 0;
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return this->safesqrt(1.0 - rnbo_abs(pos));
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void xfade_tilde_04_func_reset() {}
    
    void numberobj_111_init() {
        this->numberobj_111_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/number_obj-24"), 1, this->_currentTime);
    }
    
    void numberobj_111_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_111_value;
    }
    
    void numberobj_111_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_111_value_set(preset["value"]);
    }
    
    void numberobj_112_init() {
        this->numberobj_112_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/number_obj-32"), 1, this->_currentTime);
    }
    
    void numberobj_112_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_112_value;
    }
    
    void numberobj_112_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_112_value_set(preset["value"]);
    }
    
    number xfade_tilde_05_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    if (pos > nchan_1)
                        pos = nchan_1;
                    else if (pos < 0)
                        pos = 0;
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return this->safesqrt(1.0 - rnbo_abs(pos));
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void xfade_tilde_05_func_reset() {}
    
    void message_39_init() {
        this->message_39_set_set({1, 0, 0, 10, 1, 10});
    }
    
    number numbertilde_02_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_02_smooth_d_prev);
        this->numbertilde_02_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_02_smooth_d_dspsetup() {
        this->numbertilde_02_smooth_d_reset();
    }
    
    void numbertilde_02_smooth_d_reset() {
        this->numbertilde_02_smooth_d_prev = 0;
    }
    
    number numbertilde_02_smooth_next(number x, number up, number down) {
        if (this->numbertilde_02_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_02_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_02_smooth_index = _up;
                this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _up;
            } else if (x < this->numbertilde_02_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_02_smooth_index = _down;
                this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_02_smooth_index > 0) {
            this->numbertilde_02_smooth_prev += this->numbertilde_02_smooth_increment;
            this->numbertilde_02_smooth_index -= 1;
        } else {
            this->numbertilde_02_smooth_prev = x;
        }
    
        return this->numbertilde_02_smooth_prev;
    }
    
    void numbertilde_02_smooth_reset() {
        this->numbertilde_02_smooth_prev = 0;
        this->numbertilde_02_smooth_index = 0;
        this->numbertilde_02_smooth_increment = 0;
        this->numbertilde_02_smooth_d_reset();
    }
    
    void numbertilde_02_init() {
        this->numbertilde_02_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/number~_obj-44"), 1, this->_currentTime);
    }
    
    void numbertilde_02_dspsetup(bool force) {
        if ((bool)(this->numbertilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_02_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_02_currentInterval = this->numbertilde_02_currentIntervalInSamples;
        this->numbertilde_02_rampInSamples = this->mstosamps(this->numbertilde_02_ramp);
        this->numbertilde_02_setupDone = true;
        this->numbertilde_02_smooth_d_dspsetup();
    }
    
    void toggle_02_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_02_value_number;
    }
    
    void toggle_02_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_02_value_number_set(preset["value"]);
    }
    
    void message_40_init() {
        this->message_40_set_set({1});
    }
    
    void message_41_init() {
        this->message_41_set_set({0, 0, 0, 15, 1, 15});
    }
    
    void message_42_init() {
        this->message_42_set_set({2});
    }
    
    number numbertilde_03_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_03_smooth_d_prev);
        this->numbertilde_03_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_03_smooth_d_dspsetup() {
        this->numbertilde_03_smooth_d_reset();
    }
    
    void numbertilde_03_smooth_d_reset() {
        this->numbertilde_03_smooth_d_prev = 0;
    }
    
    number numbertilde_03_smooth_next(number x, number up, number down) {
        if (this->numbertilde_03_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_03_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_03_smooth_index = _up;
                this->numbertilde_03_smooth_increment = (x - this->numbertilde_03_smooth_prev) / _up;
            } else if (x < this->numbertilde_03_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_03_smooth_index = _down;
                this->numbertilde_03_smooth_increment = (x - this->numbertilde_03_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_03_smooth_index > 0) {
            this->numbertilde_03_smooth_prev += this->numbertilde_03_smooth_increment;
            this->numbertilde_03_smooth_index -= 1;
        } else {
            this->numbertilde_03_smooth_prev = x;
        }
    
        return this->numbertilde_03_smooth_prev;
    }
    
    void numbertilde_03_smooth_reset() {
        this->numbertilde_03_smooth_prev = 0;
        this->numbertilde_03_smooth_index = 0;
        this->numbertilde_03_smooth_increment = 0;
        this->numbertilde_03_smooth_d_reset();
    }
    
    void numbertilde_03_init() {
        this->numbertilde_03_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/number~_obj-22"), 1, this->_currentTime);
    }
    
    void numbertilde_03_dspsetup(bool force) {
        if ((bool)(this->numbertilde_03_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_03_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_03_currentInterval = this->numbertilde_03_currentIntervalInSamples;
        this->numbertilde_03_rampInSamples = this->mstosamps(this->numbertilde_03_ramp);
        this->numbertilde_03_setupDone = true;
        this->numbertilde_03_smooth_d_dspsetup();
    }
    
    void numberobj_113_init() {
        this->numberobj_113_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/number_obj-50"), 1, this->_currentTime);
    }
    
    void numberobj_113_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_113_value;
    }
    
    void numberobj_113_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_113_value_set(preset["value"]);
    }
    
    void message_43_init() {
        this->message_43_set_set({1, 0, 1, 15, 0, 15});
    }
    
    void message_44_init() {
        this->message_44_set_set({0});
    }
    
    void message_45_init() {
        this->message_45_set_set({1});
    }
    
    void numberobj_114_init() {
        this->numberobj_114_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/number_obj-131"), 1, this->_currentTime);
    }
    
    void numberobj_114_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_114_value;
    }
    
    void numberobj_114_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_114_value_set(preset["value"]);
    }
    
    void numberobj_115_init() {
        this->numberobj_115_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/number_obj-63"), 1, this->_currentTime);
    }
    
    void numberobj_115_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_115_value;
    }
    
    void numberobj_115_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_115_value_set(preset["value"]);
    }
    
    void random_07_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_07_nz_state
        );
    }
    
    void random_07_nz_init() {
        this->random_07_nz_reset();
    }
    
    void random_07_nz_seed(number v) {
        xoshiro_reset(v, this->random_07_nz_state);
    }
    
    number random_07_nz_next() {
        return xoshiro_next(this->random_07_nz_state);
    }
    
    void message_46_init() {
        this->message_46_set_set({1});
    }
    
    void transport_01_onTempoChanged(number state) {
        this->transport_01_outtempo_set(state);
    }
    
    void transport_01_onTransportChanged(number state) {
        this->transport_01_state_set(state);
    }
    
    void transport_01_onTimeSignatureChanged(number numerator, number denominator) {
        this->transport_01_outtimesig_set({numerator, denominator});
    }
    
    void toggle_03_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_03_value_number;
    }
    
    void toggle_03_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_03_value_number_set(preset["value"]);
    }
    
    void metro_01_onTransportChanged(number ) {}
    
    void metro_01_onBeatTimeChanged(number ) {}
    
    void message_47_init() {
        this->message_47_set_set({2});
    }
    
    void message_48_init() {
        this->message_48_set_set({0});
    }
    
    void toggle_04_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_04_value_number;
    }
    
    void toggle_04_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_04_value_number_set(preset["value"]);
    }
    
    void numberobj_116_init() {
        this->numberobj_116_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/number_obj-100"), 1, this->_currentTime);
    }
    
    void numberobj_116_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_116_value;
    }
    
    void numberobj_116_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_116_value_set(preset["value"]);
    }
    
    void numberobj_117_init() {
        this->numberobj_117_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/number_obj-70"), 1, this->_currentTime);
    }
    
    void numberobj_117_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_117_value;
    }
    
    void numberobj_117_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_117_value_set(preset["value"]);
    }
    
    void message_49_init() {
        this->message_49_set_set({1});
    }
    
    number xfade_tilde_06_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    if (pos > nchan_1)
                        pos = nchan_1;
                    else if (pos < 0)
                        pos = 0;
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return this->safesqrt(1.0 - rnbo_abs(pos));
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void xfade_tilde_06_func_reset() {}
    
    void message_50_init() {
        this->message_50_set_set({1});
    }
    
    void numberobj_118_init() {
        this->numberobj_118_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/number_obj-72"), 1, this->_currentTime);
    }
    
    void numberobj_118_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_118_value;
    }
    
    void numberobj_118_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_118_value_set(preset["value"]);
    }
    
    void message_51_init() {
        this->message_51_set_set({2});
    }
    
    number xfade_tilde_07_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    if (pos > nchan_1)
                        pos = nchan_1;
                    else if (pos < 0)
                        pos = 0;
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return this->safesqrt(1.0 - rnbo_abs(pos));
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void xfade_tilde_07_func_reset() {}
    
    void message_52_init() {
        this->message_52_set_set({1});
    }
    
    void numberobj_119_init() {
        this->numberobj_119_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("STUTTER/number_obj-92"), 1, this->_currentTime);
    }
    
    void numberobj_119_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_119_value;
    }
    
    void numberobj_119_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_119_value_set(preset["value"]);
    }
    
    void random_08_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_08_nz_state
        );
    }
    
    void random_08_nz_init() {
        this->random_08_nz_reset();
    }
    
    void random_08_nz_seed(number v) {
        xoshiro_reset(v, this->random_08_nz_state);
    }
    
    number random_08_nz_next() {
        return xoshiro_next(this->random_08_nz_state);
    }
    
    void message_53_init() {
        this->message_53_set_set({0});
    }
    
    void message_54_init() {
        this->message_54_set_set({2});
    }
    
    void message_55_init() {
        this->message_55_set_set({1});
    }
    
    void toggle_05_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_05_value_number;
    }
    
    void toggle_05_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_05_value_number_set(preset["value"]);
    }
    
    void metro_02_onTransportChanged(number ) {}
    
    void metro_02_onBeatTimeChanged(number ) {}
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        send_01_input_number = 0;
        p_05_target = 0;
        xfade_tilde_01_pos = 0;
        xfade_tilde_02_pos = 0;
        p_06_target = 0;
        p_07_target = 0;
        select_12_test1 = 0;
        select_12_test2 = 1;
        toggle_01_value_number = 0;
        toggle_01_value_number_setter(toggle_01_value_number);
        linetilde_03_time = 0;
        linetilde_03_keepramp = 0;
        numbertilde_01_input_number = 0;
        numbertilde_01_ramp = 0;
        xfade_tilde_03_pos = 0;
        xfade_tilde_04_pos = 0;
        numberobj_111_value = 0;
        numberobj_111_value_setter(numberobj_111_value);
        receive_16_output_number = 0;
        linetilde_04_time = 10;
        linetilde_04_keepramp = 1;
        send_02_input_number = 0;
        p_08_target = 0;
        dspexpr_01_in1 = 0;
        dspexpr_01_in2 = 0;
        p_09_target = 0;
        numberobj_112_value = 0;
        numberobj_112_value_setter(numberobj_112_value);
        receive_17_output_number = 0;
        dspexpr_02_in1 = 0;
        dspexpr_02_in2 = 0;
        xfade_tilde_05_pos = 0;
        linetilde_05_time = 0;
        linetilde_05_keepramp = 0;
        p_10_target = 0;
        numbertilde_02_input_number = 0;
        numbertilde_02_ramp = 0;
        switchobj_10_onoff = 0;
        select_13_test1 = 0;
        select_13_test2 = 1;
        toggle_02_value_number = 0;
        toggle_02_value_number_setter(toggle_02_value_number);
        gate_07_onoff = 0;
        gate_07_out1_number = 0;
        gate_07_out2_number = 0;
        select_14_test1 = 1;
        select_14_test2 = 0;
        receive_18_output_number = 0;
        linetilde_06_time = 0;
        linetilde_06_keepramp = 0;
        numbertilde_03_input_number = 0;
        numbertilde_03_ramp = 0;
        numberobj_113_value = 0;
        numberobj_113_value_setter(numberobj_113_value);
        select_15_test1 = 0;
        select_15_test2 = 1;
        receive_19_output_number = 0;
        numberobj_114_value = 0;
        numberobj_114_value_setter(numberobj_114_value);
        numberobj_115_value = 0;
        numberobj_115_value_setter(numberobj_115_value);
        scale_05_inlow = 0;
        scale_05_inhigh = 499;
        scale_05_outlow = 10;
        scale_05_outhigh = 2000;
        scale_05_power = 1;
        random_07_limit = 500;
        random_07_limit_setter(random_07_limit);
        random_07_seed = 0;
        send_03_input_number = 0;
        transport_01_input_number = 0;
        transport_01_position = 0;
        transport_01_tempo = 120;
        transport_01_ticks = 0;
        toggle_03_value_number = 0;
        toggle_03_value_number_setter(toggle_03_value_number);
        metro_01_on = 0;
        metro_01_interval = 500;
        metro_01_interval_setter(metro_01_interval);
        select_16_test1 = 0;
        select_16_test2 = 1;
        receive_20_output_number = 0;
        select_17_test1 = 0;
        select_17_test2 = 1;
        toggle_04_value_number = 0;
        toggle_04_value_number_setter(toggle_04_value_number);
        gate_08_onoff = 0;
        gate_08_out1_number = 0;
        gate_08_out2_number = 0;
        numberobj_116_value = 0;
        numberobj_116_value_setter(numberobj_116_value);
        receive_21_output_number = 0;
        numberobj_117_value = 0;
        numberobj_117_value_setter(numberobj_117_value);
        xfade_tilde_06_pos = 0;
        linetilde_07_time = 10;
        linetilde_07_keepramp = 1;
        switchobj_11_onoff = 0;
        p_11_target = 0;
        numberobj_118_value = 0;
        numberobj_118_value_setter(numberobj_118_value);
        receive_22_output_number = 0;
        p_12_target = 0;
        xfade_tilde_07_pos = 0;
        linetilde_08_time = 10;
        linetilde_08_keepramp = 1;
        select_18_test1 = 0;
        select_18_test2 = 1;
        receive_23_output_number = 0;
        numberobj_119_value = 0;
        numberobj_119_value_setter(numberobj_119_value);
        scale_06_inlow = 0;
        scale_06_inhigh = 499;
        scale_06_outlow = 10;
        scale_06_outhigh = 2000;
        scale_06_power = 1;
        random_08_limit = 500;
        random_08_limit_setter(random_08_limit);
        random_08_seed = 0;
        select_19_test1 = 0;
        select_19_test2 = 1;
        receive_24_output_number = 0;
        p_13_target = 0;
        toggle_05_value_number = 0;
        toggle_05_value_number_setter(toggle_05_value_number);
        metro_02_on = 0;
        metro_02_interval = 500;
        metro_02_interval_setter(metro_02_interval);
        switchobj_12_onoff = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        signals[4] = nullptr;
        signals[5] = nullptr;
        signals[6] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        toggle_01_lastValue = 0;
        linetilde_03_currentValue = 0;
        numbertilde_01_currentInterval = 0;
        numbertilde_01_currentIntervalInSamples = 0;
        numbertilde_01_lastValue = 0;
        numbertilde_01_outValue = 0;
        numbertilde_01_rampInSamples = 0;
        numbertilde_01_currentMode = 0;
        numbertilde_01_smooth_d_prev = 0;
        numbertilde_01_smooth_prev = 0;
        numbertilde_01_smooth_index = 0;
        numbertilde_01_smooth_increment = 0;
        numbertilde_01_setupDone = false;
        numberobj_111_currentFormat = 6;
        numberobj_111_lastValue = 0;
        linetilde_04_currentValue = 0;
        numberobj_112_currentFormat = 6;
        numberobj_112_lastValue = 0;
        linetilde_05_currentValue = 1;
        numbertilde_02_currentInterval = 0;
        numbertilde_02_currentIntervalInSamples = 0;
        numbertilde_02_lastValue = 0;
        numbertilde_02_outValue = 0;
        numbertilde_02_rampInSamples = 0;
        numbertilde_02_currentMode = 0;
        numbertilde_02_smooth_d_prev = 0;
        numbertilde_02_smooth_prev = 0;
        numbertilde_02_smooth_index = 0;
        numbertilde_02_smooth_increment = 0;
        numbertilde_02_setupDone = false;
        toggle_02_lastValue = 0;
        linetilde_06_currentValue = 0;
        numbertilde_03_currentInterval = 0;
        numbertilde_03_currentIntervalInSamples = 0;
        numbertilde_03_lastValue = 0;
        numbertilde_03_outValue = 0;
        numbertilde_03_rampInSamples = 0;
        numbertilde_03_currentMode = 0;
        numbertilde_03_smooth_d_prev = 0;
        numbertilde_03_smooth_prev = 0;
        numbertilde_03_smooth_index = 0;
        numbertilde_03_smooth_increment = 0;
        numbertilde_03_setupDone = false;
        numberobj_113_currentFormat = 6;
        numberobj_113_lastValue = 0;
        numberobj_114_currentFormat = 6;
        numberobj_114_lastValue = 0;
        numberobj_115_currentFormat = 6;
        numberobj_115_lastValue = 0;
        toggle_03_lastValue = 0;
        metro_01_last = -1;
        metro_01_next = -1;
        toggle_04_lastValue = 0;
        numberobj_116_currentFormat = 6;
        numberobj_116_lastValue = 0;
        numberobj_117_currentFormat = 6;
        numberobj_117_lastValue = 0;
        linetilde_07_currentValue = 0;
        numberobj_118_currentFormat = 6;
        numberobj_118_lastValue = 0;
        linetilde_08_currentValue = 0;
        numberobj_119_currentFormat = 6;
        numberobj_119_lastValue = 0;
        toggle_05_lastValue = 0;
        metro_02_last = -1;
        metro_02_next = -1;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number send_01_input_number;
        list send_01_input_list;
        number p_05_target;
        number xfade_tilde_01_pos;
        number xfade_tilde_02_pos;
        number p_06_target;
        number p_07_target;
        number select_12_test1;
        number select_12_test2;
        number toggle_01_value_number;
        list linetilde_03_segments;
        number linetilde_03_time;
        number linetilde_03_keepramp;
        list message_37_set;
        number numbertilde_01_input_number;
        number numbertilde_01_ramp;
        list message_38_set;
        number xfade_tilde_03_pos;
        number xfade_tilde_04_pos;
        number numberobj_111_value;
        number receive_16_output_number;
        list receive_16_output_list;
        list linetilde_04_segments;
        number linetilde_04_time;
        number linetilde_04_keepramp;
        number send_02_input_number;
        list send_02_input_list;
        number p_08_target;
        number dspexpr_01_in1;
        number dspexpr_01_in2;
        number p_09_target;
        number numberobj_112_value;
        number receive_17_output_number;
        list receive_17_output_list;
        number dspexpr_02_in1;
        number dspexpr_02_in2;
        number xfade_tilde_05_pos;
        list message_39_set;
        list linetilde_05_segments;
        number linetilde_05_time;
        number linetilde_05_keepramp;
        number p_10_target;
        number numbertilde_02_input_number;
        number numbertilde_02_ramp;
        number switchobj_10_onoff;
        number select_13_test1;
        number select_13_test2;
        number toggle_02_value_number;
        number gate_07_onoff;
        number gate_07_out1_number;
        list gate_07_out1_list;
        number gate_07_out2_number;
        list gate_07_out2_list;
        number select_14_test1;
        number select_14_test2;
        number receive_18_output_number;
        list receive_18_output_list;
        list message_40_set;
        list linetilde_06_segments;
        number linetilde_06_time;
        number linetilde_06_keepramp;
        list message_41_set;
        list message_42_set;
        number numbertilde_03_input_number;
        number numbertilde_03_ramp;
        number numberobj_113_value;
        list message_43_set;
        list message_44_set;
        number select_15_test1;
        number select_15_test2;
        number receive_19_output_number;
        list receive_19_output_list;
        list message_45_set;
        number numberobj_114_value;
        number numberobj_115_value;
        list scale_05_input;
        number scale_05_inlow;
        number scale_05_inhigh;
        number scale_05_outlow;
        number scale_05_outhigh;
        number scale_05_power;
        list scale_05_out;
        number random_07_limit;
        number random_07_seed;
        number send_03_input_number;
        list send_03_input_list;
        list message_46_set;
        number transport_01_input_number;
        number transport_01_position;
        number transport_01_tempo;
        list transport_01_timesig;
        number transport_01_ticks;
        number toggle_03_value_number;
        number metro_01_on;
        number metro_01_interval;
        number select_16_test1;
        number select_16_test2;
        number receive_20_output_number;
        list receive_20_output_list;
        list message_47_set;
        list message_48_set;
        number select_17_test1;
        number select_17_test2;
        number toggle_04_value_number;
        number gate_08_onoff;
        number gate_08_out1_number;
        list gate_08_out1_list;
        number gate_08_out2_number;
        list gate_08_out2_list;
        number numberobj_116_value;
        number receive_21_output_number;
        list receive_21_output_list;
        number numberobj_117_value;
        list message_49_set;
        number xfade_tilde_06_pos;
        list linetilde_07_segments;
        number linetilde_07_time;
        number linetilde_07_keepramp;
        list message_50_set;
        number switchobj_11_onoff;
        number p_11_target;
        number numberobj_118_value;
        list message_51_set;
        number receive_22_output_number;
        list receive_22_output_list;
        number p_12_target;
        number xfade_tilde_07_pos;
        list linetilde_08_segments;
        number linetilde_08_time;
        number linetilde_08_keepramp;
        list message_52_set;
        number select_18_test1;
        number select_18_test2;
        number receive_23_output_number;
        list receive_23_output_list;
        number numberobj_119_value;
        list scale_06_input;
        number scale_06_inlow;
        number scale_06_inhigh;
        number scale_06_outlow;
        number scale_06_outhigh;
        number scale_06_power;
        list scale_06_out;
        number random_08_limit;
        number random_08_seed;
        list message_53_set;
        number select_19_test1;
        number select_19_test2;
        number receive_24_output_number;
        list receive_24_output_list;
        list message_54_set;
        number p_13_target;
        list message_55_set;
        number toggle_05_value_number;
        number metro_02_on;
        number metro_02_interval;
        number switchobj_12_onoff;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[7];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number toggle_01_lastValue;
        list linetilde_03_activeRamps;
        number linetilde_03_currentValue;
        SampleIndex numbertilde_01_currentInterval;
        SampleIndex numbertilde_01_currentIntervalInSamples;
        number numbertilde_01_lastValue;
        number numbertilde_01_outValue;
        number numbertilde_01_rampInSamples;
        Int numbertilde_01_currentMode;
        number numbertilde_01_smooth_d_prev;
        number numbertilde_01_smooth_prev;
        number numbertilde_01_smooth_index;
        number numbertilde_01_smooth_increment;
        bool numbertilde_01_setupDone;
        Int numberobj_111_currentFormat;
        number numberobj_111_lastValue;
        list linetilde_04_activeRamps;
        number linetilde_04_currentValue;
        Int numberobj_112_currentFormat;
        number numberobj_112_lastValue;
        list linetilde_05_activeRamps;
        number linetilde_05_currentValue;
        SampleIndex numbertilde_02_currentInterval;
        SampleIndex numbertilde_02_currentIntervalInSamples;
        number numbertilde_02_lastValue;
        number numbertilde_02_outValue;
        number numbertilde_02_rampInSamples;
        Int numbertilde_02_currentMode;
        number numbertilde_02_smooth_d_prev;
        number numbertilde_02_smooth_prev;
        number numbertilde_02_smooth_index;
        number numbertilde_02_smooth_increment;
        bool numbertilde_02_setupDone;
        number toggle_02_lastValue;
        list linetilde_06_activeRamps;
        number linetilde_06_currentValue;
        SampleIndex numbertilde_03_currentInterval;
        SampleIndex numbertilde_03_currentIntervalInSamples;
        number numbertilde_03_lastValue;
        number numbertilde_03_outValue;
        number numbertilde_03_rampInSamples;
        Int numbertilde_03_currentMode;
        number numbertilde_03_smooth_d_prev;
        number numbertilde_03_smooth_prev;
        number numbertilde_03_smooth_index;
        number numbertilde_03_smooth_increment;
        bool numbertilde_03_setupDone;
        Int numberobj_113_currentFormat;
        number numberobj_113_lastValue;
        Int numberobj_114_currentFormat;
        number numberobj_114_lastValue;
        Int numberobj_115_currentFormat;
        number numberobj_115_lastValue;
        UInt random_07_nz_state[4] = { };
        number toggle_03_lastValue;
        MillisecondTime metro_01_last;
        MillisecondTime metro_01_next;
        number toggle_04_lastValue;
        Int numberobj_116_currentFormat;
        number numberobj_116_lastValue;
        Int numberobj_117_currentFormat;
        number numberobj_117_lastValue;
        list linetilde_07_activeRamps;
        number linetilde_07_currentValue;
        Int numberobj_118_currentFormat;
        number numberobj_118_lastValue;
        list linetilde_08_activeRamps;
        number linetilde_08_currentValue;
        Int numberobj_119_currentFormat;
        number numberobj_119_lastValue;
        UInt random_08_nz_state[4] = { };
        number toggle_05_lastValue;
        MillisecondTime metro_02_last;
        MillisecondTime metro_02_next;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_20* p_05;
        RNBOSubpatcher_21* p_06;
        RNBOSubpatcher_22* p_07;
        RNBOSubpatcher_23* p_08;
        RNBOSubpatcher_24* p_09;
        RNBOSubpatcher_25* p_10;
        RNBOSubpatcher_26* p_11;
        RNBOSubpatcher_27* p_12;
        RNBOSubpatcher_28* p_13;
    
};

class RNBOSubpatcher_30 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_30()
    {
    }
    
    ~RNBOSubpatcher_30()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 892732297, false);
        getEngine()->flushClockEvents(this, -1987572531, false);
        getEngine()->flushClockEvents(this, 1935387534, false);
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, -281953904, false);
        getEngine()->flushClockEvents(this, -664351027, false);
        getEngine()->flushClockEvents(this, 2098551528, false);
        getEngine()->flushClockEvents(this, -1841075377, false);
        getEngine()->flushClockEvents(this, 894770446, false);
        getEngine()->flushClockEvents(this, -1494586265, false);
    }
    
    inline number safemod(number f, number m) {
        if (m != 0) {
            Int f_trunc = (Int)(trunc(f));
            Int m_trunc = (Int)(trunc(m));
    
            if (f == f_trunc && m == m_trunc) {
                f = f_trunc % m_trunc;
            } else {
                if (m < 0) {
                    m = -m;
                }
    
                if (f >= m) {
                    if (f >= m * 2.0) {
                        number d = f / m;
                        Int i = (Int)(trunc(d));
                        d = d - i;
                        f = d * m;
                    } else {
                        f -= m;
                    }
                } else if (f <= -m) {
                    if (f <= -m * 2.0) {
                        number d = f / m;
                        Int i = (Int)(trunc(d));
                        d = d - i;
                        f = d * m;
                    } else {
                        f += m;
                    }
                }
            }
        } else {
            f = 0.0;
        }
    
        return f;
    }
    
    inline number safesqrt(number num) {
        return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return globalrandom() * range + low;
    }
    
    MillisecondTime currenttime() {
        return this->_currentTime;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        this->linetilde_09_perform(this->signals[0], n);
        this->linetilde_10_perform(this->signals[1], n);
        this->numbertilde_04_perform(this->signals[1], this->dummyBuffer, n);
        this->dspexpr_03_perform(in1, this->signals[1], this->signals[2], n);
        this->xfade_tilde_08_perform(this->signals[0], in1, this->signals[2], out1, n);
        this->linetilde_11_perform(this->signals[2], n);
        this->linetilde_12_perform(this->signals[3], n);
        this->xfade_tilde_10_perform(this->signals[2], this->signals[1], this->signals[3], this->signals[4], n);
        this->dspexpr_04_perform(in2, this->signals[4], this->signals[2], n);
        this->xfade_tilde_09_perform(this->signals[0], in2, this->signals[2], out2, n);
        this->numbertilde_05_perform(this->signals[3], this->dummyBuffer, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 5; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->numbertilde_04_dspsetup(forceDSPSetup);
        this->numbertilde_05_dspsetup(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->metro_03_onTransportChanged(state);
        this->metro_04_onTransportChanged(state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->metro_03_onBeatTimeChanged(beattime);
        this->metro_04_onBeatTimeChanged(beattime);
    }
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void processBBUEvent(MillisecondTime , number , number , number ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 892732297:
            {
            this->loadmess_06_startupbang_bang();
            break;
            }
        case -1987572531:
            {
            this->metro_03_tick_bang();
            break;
            }
        case 1935387534:
            {
            this->metro_04_tick_bang();
            break;
            }
        case -871642103:
            {
            this->loadbang_02_startupbang_bang();
            break;
            }
        case -281953904:
            {
            this->linetilde_09_target_bang();
            break;
            }
        case -664351027:
            {
            this->linetilde_10_target_bang();
            break;
            }
        case 2098551528:
            {
            this->numbertilde_04_value_set(value);
            break;
            }
        case -1841075377:
            {
            this->linetilde_11_target_bang();
            break;
            }
        case 894770446:
            {
            this->linetilde_12_target_bang();
            break;
            }
        case -1494586265:
            {
            this->numbertilde_05_value_set(value);
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("CUTS/message_obj-73") == objectId)
                this->message_56_listin_number_set(payload);
    
            if (TAG("CUTS/message_obj-75") == objectId)
                this->message_57_listin_number_set(payload);
    
            if (TAG("CUTS/message_obj-16") == objectId)
                this->message_58_listin_number_set(payload);
    
            if (TAG("CUTS/message_obj-60") == objectId)
                this->message_59_listin_number_set(payload);
    
            if (TAG("CUTS/message_obj-62") == objectId)
                this->message_60_listin_number_set(payload);
    
            if (TAG("CUTS/message_obj-64") == objectId)
                this->message_61_listin_number_set(payload);
    
            if (TAG("CUTS/message_obj-66") == objectId)
                this->message_62_listin_number_set(payload);
    
            if (TAG("CUTS/message_obj-18") == objectId)
                this->message_63_listin_number_set(payload);
    
            if (TAG("CUTS/message_obj-44") == objectId)
                this->message_64_listin_number_set(payload);
    
            if (TAG("CUTS/message_obj-15") == objectId)
                this->message_65_listin_number_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("CUTS/toggle_obj-54") == objectId)
                this->toggle_06_valin_set(payload);
    
            if (TAG("CUTS/number_obj-26") == objectId)
                this->numberobj_120_valin_set(payload);
    
            if (TAG("CUTS/number_obj-50") == objectId)
                this->numberobj_121_valin_set(payload);
    
            if (TAG("CUTS/number_obj-52") == objectId)
                this->numberobj_122_valin_set(payload);
    
            if (TAG("CUTS/number_obj-33") == objectId)
                this->numberobj_123_valin_set(payload);
    
            if (TAG("CUTS/number_obj-36") == objectId)
                this->numberobj_124_valin_set(payload);
    
            if (TAG("CUTS/toggle_obj-22") == objectId)
                this->toggle_07_valin_set(payload);
    
            if (TAG("CUTS/number_obj-28") == objectId)
                this->numberobj_125_valin_set(payload);
    
            if (TAG("CUTS/number_obj-41") == objectId)
                this->numberobj_126_valin_set(payload);
    
            if (TAG("CUTS/number_obj-43") == objectId)
                this->numberobj_127_valin_set(payload);
    
            if (TAG("CUTS/number_obj-39") == objectId)
                this->numberobj_128_valin_set(payload);
    
            if (TAG("CUTS/number_obj-45") == objectId)
                this->numberobj_129_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("CUTS/number_obj-26") == objectId)
                this->numberobj_120_format_set(payload);
    
            if (TAG("CUTS/number_obj-50") == objectId)
                this->numberobj_121_format_set(payload);
    
            if (TAG("CUTS/number_obj-52") == objectId)
                this->numberobj_122_format_set(payload);
    
            if (TAG("CUTS/number_obj-33") == objectId)
                this->numberobj_123_format_set(payload);
    
            if (TAG("CUTS/number_obj-36") == objectId)
                this->numberobj_124_format_set(payload);
    
            if (TAG("CUTS/number_obj-28") == objectId)
                this->numberobj_125_format_set(payload);
    
            if (TAG("CUTS/number_obj-41") == objectId)
                this->numberobj_126_format_set(payload);
    
            if (TAG("CUTS/number_obj-43") == objectId)
                this->numberobj_127_format_set(payload);
    
            if (TAG("CUTS/number_obj-39") == objectId)
                this->numberobj_128_format_set(payload);
    
            if (TAG("CUTS/number_obj-45") == objectId)
                this->numberobj_129_format_set(payload);
    
            break;
            }
        case TAG("sig"):
            {
            if (TAG("CUTS/number~_obj-63") == objectId)
                this->numbertilde_04_sig_number_set(payload);
    
            if (TAG("CUTS/number~_obj-12") == objectId)
                this->numbertilde_05_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("CUTS/number~_obj-63") == objectId)
                this->numbertilde_04_mode_set(payload);
    
            if (TAG("CUTS/number~_obj-12") == objectId)
                this->numbertilde_05_mode_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("CUTS/message_obj-73") == objectId)
                this->message_56_listin_list_set(payload);
    
            if (TAG("CUTS/message_obj-75") == objectId)
                this->message_57_listin_list_set(payload);
    
            if (TAG("CUTS/message_obj-16") == objectId)
                this->message_58_listin_list_set(payload);
    
            if (TAG("CUTS/message_obj-60") == objectId)
                this->message_59_listin_list_set(payload);
    
            if (TAG("CUTS/message_obj-62") == objectId)
                this->message_60_listin_list_set(payload);
    
            if (TAG("CUTS/message_obj-64") == objectId)
                this->message_61_listin_list_set(payload);
    
            if (TAG("CUTS/message_obj-66") == objectId)
                this->message_62_listin_list_set(payload);
    
            if (TAG("CUTS/message_obj-18") == objectId)
                this->message_63_listin_list_set(payload);
    
            if (TAG("CUTS/message_obj-44") == objectId)
                this->message_64_listin_list_set(payload);
    
            if (TAG("CUTS/message_obj-15") == objectId)
                this->message_65_listin_list_set(payload);
    
            break;
            }
        case TAG("sig"):
            {
            if (TAG("CUTS/number~_obj-63") == objectId)
                this->numbertilde_04_sig_list_set(payload);
    
            if (TAG("CUTS/number~_obj-12") == objectId)
                this->numbertilde_05_sig_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("CUTS/message_obj-73") == objectId)
                this->message_56_listin_bang_bang();
    
            if (TAG("CUTS/message_obj-75") == objectId)
                this->message_57_listin_bang_bang();
    
            if (TAG("CUTS/message_obj-16") == objectId)
                this->message_58_listin_bang_bang();
    
            if (TAG("CUTS/message_obj-60") == objectId)
                this->message_59_listin_bang_bang();
    
            if (TAG("CUTS/message_obj-62") == objectId)
                this->message_60_listin_bang_bang();
    
            if (TAG("CUTS/message_obj-64") == objectId)
                this->message_61_listin_bang_bang();
    
            if (TAG("CUTS/message_obj-66") == objectId)
                this->message_62_listin_bang_bang();
    
            if (TAG("CUTS/message_obj-18") == objectId)
                this->message_63_listin_bang_bang();
    
            if (TAG("CUTS/message_obj-44") == objectId)
                this->message_64_listin_bang_bang();
    
            if (TAG("CUTS/message_obj-15") == objectId)
                this->message_65_listin_bang_bang();
    
            break;
            }
        case TAG("startupbang"):
            {
            if (TAG("CUTS/loadmess_obj-67") == objectId)
                this->loadmess_06_startupbang_bang();
    
            if (TAG("CUTS/loadbang_obj-68") == objectId)
                this->loadbang_02_startupbang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("CUTS/button_obj-56") == objectId)
                this->button_14_bangin_bang();
    
            if (TAG("CUTS/button_obj-21") == objectId)
                this->button_15_bangin_bang();
    
            break;
            }
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("CUTS/message_obj-73"):
            {
            return "CUTS/message_obj-73";
            }
        case TAG("CUTS/message_obj-75"):
            {
            return "CUTS/message_obj-75";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("CUTS/toggle_obj-54"):
            {
            return "CUTS/toggle_obj-54";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("CUTS/button_obj-56"):
            {
            return "CUTS/button_obj-56";
            }
        case TAG("CUTS/message_obj-16"):
            {
            return "CUTS/message_obj-16";
            }
        case TAG("CUTS/message_obj-60"):
            {
            return "CUTS/message_obj-60";
            }
        case TAG("CUTS/message_obj-62"):
            {
            return "CUTS/message_obj-62";
            }
        case TAG("CUTS/number_obj-26"):
            {
            return "CUTS/number_obj-26";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("CUTS/number~_obj-63"):
            {
            return "CUTS/number~_obj-63";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("CUTS/number_obj-50"):
            {
            return "CUTS/number_obj-50";
            }
        case TAG("CUTS/number_obj-52"):
            {
            return "CUTS/number_obj-52";
            }
        case TAG("CUTS/message_obj-64"):
            {
            return "CUTS/message_obj-64";
            }
        case TAG("CUTS/number_obj-33"):
            {
            return "CUTS/number_obj-33";
            }
        case TAG("CUTS/message_obj-66"):
            {
            return "CUTS/message_obj-66";
            }
        case TAG("CUTS/number_obj-36"):
            {
            return "CUTS/number_obj-36";
            }
        case TAG("CUTS/toggle_obj-22"):
            {
            return "CUTS/toggle_obj-22";
            }
        case TAG("CUTS/message_obj-18"):
            {
            return "CUTS/message_obj-18";
            }
        case TAG("CUTS/button_obj-21"):
            {
            return "CUTS/button_obj-21";
            }
        case TAG("CUTS/message_obj-44"):
            {
            return "CUTS/message_obj-44";
            }
        case TAG("CUTS/number_obj-28"):
            {
            return "CUTS/number_obj-28";
            }
        case TAG("CUTS/message_obj-15"):
            {
            return "CUTS/message_obj-15";
            }
        case TAG("CUTS/number_obj-41"):
            {
            return "CUTS/number_obj-41";
            }
        case TAG("CUTS/number~_obj-12"):
            {
            return "CUTS/number~_obj-12";
            }
        case TAG("CUTS/number_obj-43"):
            {
            return "CUTS/number_obj-43";
            }
        case TAG("CUTS/number_obj-39"):
            {
            return "CUTS/number_obj-39";
            }
        case TAG("CUTS/number_obj-45"):
            {
            return "CUTS/number_obj-45";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("CUTS/loadmess_obj-67"):
            {
            return "CUTS/loadmess_obj-67";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        case TAG("CUTS/loadbang_obj-68"):
            {
            return "CUTS/loadbang_obj-68";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void message_56_listin_list_set(const list& v) {
        this->message_56_set_set(v);
    }
    
    void message_56_listin_number_set(number v) {
        this->message_56_set_set(v);
    }
    
    void message_56_listin_bang_bang() {
        this->message_56_trigger_bang();
    }
    
    void message_57_listin_list_set(const list& v) {
        this->message_57_set_set(v);
    }
    
    void message_57_listin_number_set(number v) {
        this->message_57_set_set(v);
    }
    
    void message_57_listin_bang_bang() {
        this->message_57_trigger_bang();
    }
    
    void loadmess_06_startupbang_bang() {
        this->loadmess_06_message_bang();
    }
    
    void toggle_06_valin_set(number v) {
        this->toggle_06_value_number_set(v);
    }
    
    void metro_03_tick_bang() {
        this->metro_03_tickout_bang();
        this->getEngine()->flushClockEvents(this, -1987572531, false);;
    
        if ((bool)(this->metro_03_on)) {
            this->metro_03_last = this->currenttime();
    
            {
                this->metro_03_next = this->metro_03_last + this->metro_03_interval;
                this->getEngine()->scheduleClockEvent(this, -1987572531, this->metro_03_interval + this->_currentTime);;
            }
        }
    }
    
    void button_14_bangin_bang() {
        this->button_14_bangval_bang();
    }
    
    void message_58_listin_list_set(const list& v) {
        this->message_58_set_set(v);
    }
    
    void message_58_listin_number_set(number v) {
        this->message_58_set_set(v);
    }
    
    void message_58_listin_bang_bang() {
        this->message_58_trigger_bang();
    }
    
    void message_59_listin_list_set(const list& v) {
        this->message_59_set_set(v);
    }
    
    void message_59_listin_number_set(number v) {
        this->message_59_set_set(v);
    }
    
    void message_59_listin_bang_bang() {
        this->message_59_trigger_bang();
    }
    
    void message_60_listin_list_set(const list& v) {
        this->message_60_set_set(v);
    }
    
    void message_60_listin_number_set(number v) {
        this->message_60_set_set(v);
    }
    
    void message_60_listin_bang_bang() {
        this->message_60_trigger_bang();
    }
    
    void numberobj_120_valin_set(number v) {
        this->numberobj_120_value_set(v);
    }
    
    void numberobj_120_format_set(number v) {
        this->numberobj_120_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_04_sig_number_set(number v) {
        this->numbertilde_04_outValue = v;
    }
    
    void numbertilde_04_sig_list_set(const list& v) {
        this->numbertilde_04_outValue = v[0];
    }
    
    void numbertilde_04_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_04_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_04_currentMode = 1;
        }
    }
    
    void numberobj_121_valin_set(number v) {
        this->numberobj_121_value_set(v);
    }
    
    void numberobj_121_format_set(number v) {
        this->numberobj_121_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_122_valin_set(number v) {
        this->numberobj_122_value_set(v);
    }
    
    void numberobj_122_format_set(number v) {
        this->numberobj_122_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_61_listin_list_set(const list& v) {
        this->message_61_set_set(v);
    }
    
    void message_61_listin_number_set(number v) {
        this->message_61_set_set(v);
    }
    
    void message_61_listin_bang_bang() {
        this->message_61_trigger_bang();
    }
    
    void numberobj_123_valin_set(number v) {
        this->numberobj_123_value_set(v);
    }
    
    void numberobj_123_format_set(number v) {
        this->numberobj_123_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_62_listin_list_set(const list& v) {
        this->message_62_set_set(v);
    }
    
    void message_62_listin_number_set(number v) {
        this->message_62_set_set(v);
    }
    
    void message_62_listin_bang_bang() {
        this->message_62_trigger_bang();
    }
    
    void numberobj_124_valin_set(number v) {
        this->numberobj_124_value_set(v);
    }
    
    void numberobj_124_format_set(number v) {
        this->numberobj_124_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void toggle_07_valin_set(number v) {
        this->toggle_07_value_number_set(v);
    }
    
    void metro_04_tick_bang() {
        this->metro_04_tickout_bang();
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(this->metro_04_on)) {
            this->metro_04_last = this->currenttime();
    
            {
                this->metro_04_next = this->metro_04_last + this->metro_04_interval;
                this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_04_interval + this->_currentTime);;
            }
        }
    }
    
    void message_63_listin_list_set(const list& v) {
        this->message_63_set_set(v);
    }
    
    void message_63_listin_number_set(number v) {
        this->message_63_set_set(v);
    }
    
    void message_63_listin_bang_bang() {
        this->message_63_trigger_bang();
    }
    
    void button_15_bangin_bang() {
        this->button_15_bangval_bang();
    }
    
    void message_64_listin_list_set(const list& v) {
        this->message_64_set_set(v);
    }
    
    void message_64_listin_number_set(number v) {
        this->message_64_set_set(v);
    }
    
    void message_64_listin_bang_bang() {
        this->message_64_trigger_bang();
    }
    
    void numberobj_125_valin_set(number v) {
        this->numberobj_125_value_set(v);
    }
    
    void numberobj_125_format_set(number v) {
        this->numberobj_125_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_65_listin_list_set(const list& v) {
        this->message_65_set_set(v);
    }
    
    void message_65_listin_number_set(number v) {
        this->message_65_set_set(v);
    }
    
    void message_65_listin_bang_bang() {
        this->message_65_trigger_bang();
    }
    
    void loadbang_02_startupbang_bang() {
        this->loadbang_02_output_bang();
    }
    
    void numberobj_126_valin_set(number v) {
        this->numberobj_126_value_set(v);
    }
    
    void numberobj_126_format_set(number v) {
        this->numberobj_126_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_05_sig_number_set(number v) {
        this->numbertilde_05_outValue = v;
    }
    
    void numbertilde_05_sig_list_set(const list& v) {
        this->numbertilde_05_outValue = v[0];
    }
    
    void numbertilde_05_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_05_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_05_currentMode = 1;
        }
    }
    
    void numberobj_127_valin_set(number v) {
        this->numberobj_127_value_set(v);
    }
    
    void numberobj_127_format_set(number v) {
        this->numberobj_127_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_128_valin_set(number v) {
        this->numberobj_128_value_set(v);
    }
    
    void numberobj_128_format_set(number v) {
        this->numberobj_128_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_129_valin_set(number v) {
        this->numberobj_129_value_set(v);
    }
    
    void numberobj_129_format_set(number v) {
        this->numberobj_129_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void linetilde_09_target_bang() {}
    
    void linetilde_10_target_bang() {
        this->message_59_trigger_bang();
    }
    
    void numbertilde_04_value_set(number ) {}
    
    void linetilde_11_target_bang() {}
    
    void linetilde_12_target_bang() {
        this->message_63_trigger_bang();
    }
    
    void numbertilde_05_value_set(number ) {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->message_56_init();
        this->message_57_init();
        this->random_09_nz_init();
        this->message_58_init();
        this->message_59_init();
        this->message_60_init();
        this->random_10_nz_init();
        this->numberobj_120_init();
        this->numbertilde_04_init();
        this->numberobj_121_init();
        this->numberobj_122_init();
        this->message_61_init();
        this->numberobj_123_init();
        this->message_62_init();
        this->numberobj_124_init();
        this->random_11_nz_init();
        this->message_63_init();
        this->message_64_init();
        this->random_12_nz_init();
        this->numberobj_125_init();
        this->message_65_init();
        this->random_13_nz_init();
        this->numberobj_126_init();
        this->numbertilde_05_init();
        this->numberobj_127_init();
        this->random_14_nz_init();
        this->numberobj_128_init();
        this->numberobj_129_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
    
        if ((bool)(this->metro_03_on))
            this->metro_03_on_set(1);
    
        if ((bool)(this->metro_04_on))
            this->metro_04_on_set(1);
    
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
    }
    
    void allocateDataRefs() {}
    
    void linetilde_09_time_set(number v) {
        this->linetilde_09_time = v;
    }
    
    void linetilde_09_segments_set(const list& v) {
        this->linetilde_09_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_09_time == 0) {
                this->linetilde_09_activeRamps->length = 0;
                this->linetilde_09_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_09_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_09_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_09_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_09_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_09_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_09_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_09_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_09_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_09_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_09_activeRamps->push(lastRampValue);
                    this->linetilde_09_activeRamps->push(0);
                    this->linetilde_09_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_09_keepramp)) {
                            this->linetilde_09_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_09_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_09_activeRamps->push(destinationValue);
                    this->linetilde_09_activeRamps->push(inc);
                    this->linetilde_09_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void message_56_out_set(const list& v) {
        this->linetilde_09_segments_set(v);
    }
    
    void message_56_trigger_bang() {
        this->message_56_out_set(this->message_56_set);
    }
    
    void select_20_match1_bang() {
        this->message_56_trigger_bang();
    }
    
    void message_57_out_set(const list& v) {
        this->linetilde_09_segments_set(v);
    }
    
    void message_57_trigger_bang() {
        this->message_57_out_set(this->message_57_set);
    }
    
    void select_20_match2_bang() {
        this->message_57_trigger_bang();
    }
    
    void select_20_nomatch_number_set(number ) {}
    
    void select_20_input_number_set(number v) {
        if (v == this->select_20_test1)
            this->select_20_match1_bang();
        else if (v == this->select_20_test2)
            this->select_20_match2_bang();
        else
            this->select_20_nomatch_number_set(v);
    }
    
    void receive_25_output_number_set(number v) {
        this->receive_25_output_number = v;
        this->select_20_input_number_set(v);
    }
    
    void linetilde_11_time_set(number v) {
        this->linetilde_11_time = v;
    }
    
    void linetilde_11_segments_set(const list& v) {
        this->linetilde_11_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_11_time == 0) {
                this->linetilde_11_activeRamps->length = 0;
                this->linetilde_11_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_11_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_11_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_11_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_11_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_11_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_11_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_11_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_11_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_11_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_11_activeRamps->push(lastRampValue);
                    this->linetilde_11_activeRamps->push(0);
                    this->linetilde_11_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_11_keepramp)) {
                            this->linetilde_11_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_11_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_11_activeRamps->push(destinationValue);
                    this->linetilde_11_activeRamps->push(inc);
                    this->linetilde_11_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void message_61_out_set(const list& v) {
        this->linetilde_11_segments_set(v);
    }
    
    void message_61_trigger_bang() {
        this->message_61_out_set(this->message_61_set);
    }
    
    void select_21_match1_bang() {
        this->message_61_trigger_bang();
    }
    
    void message_62_out_set(const list& v) {
        this->linetilde_11_segments_set(v);
    }
    
    void message_62_trigger_bang() {
        this->message_62_out_set(this->message_62_set);
    }
    
    void select_21_match2_bang() {
        this->message_62_trigger_bang();
    }
    
    void select_21_nomatch_number_set(number ) {}
    
    void select_21_input_number_set(number v) {
        if (v == this->select_21_test1)
            this->select_21_match1_bang();
        else if (v == this->select_21_test2)
            this->select_21_match2_bang();
        else
            this->select_21_nomatch_number_set(v);
    }
    
    void receive_28_output_number_set(number v) {
        this->receive_28_output_number = v;
        this->select_21_input_number_set(v);
    }
    
    void scale_14_outlow_set(number v) {
        this->scale_14_outlow = v;
    }
    
    void scale_12_outlow_set(number v) {
        this->scale_12_outlow = v;
    }
    
    void numberobj_127_output_set(number v) {
        this->scale_14_outlow_set(v);
        this->scale_12_outlow_set(v);
    }
    
    void numberobj_127_value_set(number v) {
        this->numberobj_127_value_setter(v);
        v = this->numberobj_127_value;
        number localvalue = v;
    
        if (this->numberobj_127_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("CUTS/number_obj-43"), localvalue, this->_currentTime);
        this->numberobj_127_output_set(localvalue);
    }
    
    void receive_31_output_number_set(number v) {
        this->receive_31_output_number = v;
        this->numberobj_127_value_set(v);
    }
    
    void scale_14_outhigh_set(number v) {
        this->scale_14_outhigh = v;
    }
    
    void scale_12_outhigh_set(number v) {
        this->scale_12_outhigh = v;
    }
    
    void numberobj_129_output_set(number v) {
        this->scale_14_outhigh_set(v);
        this->scale_12_outhigh_set(v);
    }
    
    void numberobj_129_value_set(number v) {
        this->numberobj_129_value_setter(v);
        v = this->numberobj_129_value;
        number localvalue = v;
    
        if (this->numberobj_129_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("CUTS/number_obj-45"), localvalue, this->_currentTime);
        this->numberobj_129_output_set(localvalue);
    }
    
    void receive_32_output_number_set(number v) {
        this->receive_32_output_number = v;
        this->numberobj_129_value_set(v);
    }
    
    void scale_13_outhigh_set(number v) {
        this->scale_13_outhigh = v;
    }
    
    void scale_08_outhigh_set(number v) {
        this->scale_08_outhigh = v;
    }
    
    void numberobj_124_output_set(number v) {
        this->scale_13_outhigh_set(v);
        this->scale_08_outhigh_set(v);
    }
    
    void numberobj_124_value_set(number v) {
        this->numberobj_124_value_setter(v);
        v = this->numberobj_124_value;
        number localvalue = v;
    
        if (this->numberobj_124_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("CUTS/number_obj-36"), localvalue, this->_currentTime);
        this->numberobj_124_output_set(localvalue);
    }
    
    void scale_10_out_set(const list& v) {
        this->scale_10_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_124_value_set(converted);
        }
    }
    
    void scale_10_input_set(const list& v) {
        this->scale_10_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_10_inlow,
                this->scale_10_inhigh,
                this->scale_10_outlow,
                this->scale_10_outhigh,
                this->scale_10_power
            ));
        }
    
        this->scale_10_out_set(tmp);
    }
    
    void receive_29_output_number_set(number v) {
        this->receive_29_output_number = v;
    
        {
            list converted = {v};
            this->scale_10_input_set(converted);
        }
    }
    
    void scale_13_outlow_set(number v) {
        this->scale_13_outlow = v;
    }
    
    void scale_08_outlow_set(number v) {
        this->scale_08_outlow = v;
    }
    
    void numberobj_123_output_set(number v) {
        this->scale_13_outlow_set(v);
        this->scale_08_outlow_set(v);
    }
    
    void numberobj_123_value_set(number v) {
        this->numberobj_123_value_setter(v);
        v = this->numberobj_123_value;
        number localvalue = v;
    
        if (this->numberobj_123_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("CUTS/number_obj-33"), localvalue, this->_currentTime);
        this->numberobj_123_output_set(localvalue);
    }
    
    void scale_09_out_set(const list& v) {
        this->scale_09_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_123_value_set(converted);
        }
    }
    
    void scale_09_input_set(const list& v) {
        this->scale_09_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_09_inlow,
                this->scale_09_inhigh,
                this->scale_09_outlow,
                this->scale_09_outhigh,
                this->scale_09_power
            ));
        }
    
        this->scale_09_out_set(tmp);
    }
    
    void receive_30_output_number_set(number v) {
        this->receive_30_output_number = v;
    
        {
            list converted = {v};
            this->scale_09_input_set(converted);
        }
    }
    
    void scale_11_outlow_set(number v) {
        this->scale_11_outlow = v;
    }
    
    void scale_07_outlow_set(number v) {
        this->scale_07_outlow = v;
    }
    
    void numberobj_121_output_set(number v) {
        this->scale_11_outlow_set(v);
        this->scale_07_outlow_set(v);
    }
    
    void numberobj_121_value_set(number v) {
        this->numberobj_121_value_setter(v);
        v = this->numberobj_121_value;
        number localvalue = v;
    
        if (this->numberobj_121_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("CUTS/number_obj-50"), localvalue, this->_currentTime);
        this->numberobj_121_output_set(localvalue);
    }
    
    void receive_26_output_number_set(number v) {
        this->receive_26_output_number = v;
        this->numberobj_121_value_set(v);
    }
    
    void scale_11_outhigh_set(number v) {
        this->scale_11_outhigh = v;
    }
    
    void scale_07_outhigh_set(number v) {
        this->scale_07_outhigh = v;
    }
    
    void numberobj_122_output_set(number v) {
        this->scale_11_outhigh_set(v);
        this->scale_07_outhigh_set(v);
    }
    
    void numberobj_122_value_set(number v) {
        this->numberobj_122_value_setter(v);
        v = this->numberobj_122_value;
        number localvalue = v;
    
        if (this->numberobj_122_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("CUTS/number_obj-52"), localvalue, this->_currentTime);
        this->numberobj_122_output_set(localvalue);
    }
    
    void receive_27_output_number_set(number v) {
        this->receive_27_output_number = v;
        this->numberobj_122_value_set(v);
    }
    
    void message_56_set_set(const list& v) {
        this->message_56_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("CUTS/message_obj-73"), v, this->_currentTime);
    }
    
    void message_57_set_set(const list& v) {
        this->message_57_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("CUTS/message_obj-75"), v, this->_currentTime);
    }
    
    void metro_04_on_set(number v) {
        this->metro_04_on = v;
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(v)) {
            {
                this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
            }
        }
    }
    
    void toggle_07_output_set(number v) {
        this->metro_04_on_set(v);
    }
    
    void toggle_07_value_number_set(number v) {
        this->toggle_07_value_number_setter(v);
        v = this->toggle_07_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("CUTS/toggle_obj-22"), v, this->_currentTime);
        this->toggle_07_output_set(v);
    }
    
    void metro_03_on_set(number v) {
        this->metro_03_on = v;
        this->getEngine()->flushClockEvents(this, -1987572531, false);;
    
        if ((bool)(v)) {
            {
                this->getEngine()->scheduleClockEvent(this, -1987572531, 0 + this->_currentTime);;
            }
        }
    }
    
    void toggle_06_output_set(number v) {
        this->metro_03_on_set(v);
    }
    
    void toggle_06_value_number_set(number v) {
        this->toggle_06_value_number_setter(v);
        v = this->toggle_06_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("CUTS/toggle_obj-54"), v, this->_currentTime);
        this->toggle_06_output_set(v);
    }
    
    void loadmess_06_message_bang() {
        list v = this->loadmess_06_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_07_value_number_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->toggle_06_value_number_set(converted);
        }
    }
    
    void gate_09_onoff_set(number v) {
        this->gate_09_onoff = v;
    }
    
    void message_60_trigger_bang() {
        if (this->stackprotect_check())
            return;
    
        this->message_60_out_set(this->message_60_set);
    }
    
    void trigger_06_out6_bang() {
        if (this->stackprotect_check())
            return;
    
        this->message_60_trigger_bang();
    }
    
    void message_58_set_set(const list& v) {
        this->message_58_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("CUTS/message_obj-16"), v, this->_currentTime);
    }
    
    void pak_11_out_set(const list& v) {
        this->message_58_set_set(v);
    }
    
    void pak_11_in6_set(number v) {
        this->pak_11_in6 = v;
        list array = list(0, 0, 0, 0, 0, 0, 0, 0);
        array[0] = this->pak_11_in1;
        array[1] = this->pak_11_in2;
        array[2] = this->pak_11_in3;
        array[3] = this->pak_11_in4;
        array[4] = this->pak_11_in5;
        array[5] = this->pak_11_in6;
        array[6] = this->pak_11_in7;
        array[7] = this->pak_11_in8;
        this->pak_11_out_set(array);
    }
    
    void numberobj_125_output_set(number v) {
        this->pak_11_in6_set(v);
    }
    
    void numberobj_125_value_set(number v) {
        this->numberobj_125_value_setter(v);
        v = this->numberobj_125_value;
        number localvalue = v;
    
        if (this->numberobj_125_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("CUTS/number_obj-28"), localvalue, this->_currentTime);
        this->numberobj_125_output_set(localvalue);
    }
    
    void scale_12_out_set(const list& v) {
        this->scale_12_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_125_value_set(converted);
        }
    }
    
    void scale_12_input_set(const list& v) {
        this->scale_12_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_12_inlow,
                this->scale_12_inhigh,
                this->scale_12_outlow,
                this->scale_12_outhigh,
                this->scale_12_power
            ));
        }
    
        this->scale_12_out_set(tmp);
    }
    
    void random_12_result_set(number v) {
        {
            list converted = {v};
            this->scale_12_input_set(converted);
        }
    }
    
    void random_12_trigger_bang() {
        this->random_12_result_set(rnbo_abs(this->random_12_nz_next()) * this->random_12_limit);
    }
    
    void trigger_06_out5_bang() {
        this->random_12_trigger_bang();
    }
    
    void pak_11_in5_set(number v) {
        this->pak_11_in5 = v;
        list array = list(0, 0, 0, 0, 0, 0, 0, 0);
        array[0] = this->pak_11_in1;
        array[1] = this->pak_11_in2;
        array[2] = this->pak_11_in3;
        array[3] = this->pak_11_in4;
        array[4] = this->pak_11_in5;
        array[5] = this->pak_11_in6;
        array[6] = this->pak_11_in7;
        array[7] = this->pak_11_in8;
        this->pak_11_out_set(array);
    }
    
    void pak_11_in3_set(number v) {
        this->pak_11_in3 = v;
        list array = list(0, 0, 0, 0, 0, 0, 0, 0);
        array[0] = this->pak_11_in1;
        array[1] = this->pak_11_in2;
        array[2] = this->pak_11_in3;
        array[3] = this->pak_11_in4;
        array[4] = this->pak_11_in5;
        array[5] = this->pak_11_in6;
        array[6] = this->pak_11_in7;
        array[7] = this->pak_11_in8;
        this->pak_11_out_set(array);
    }
    
    void numberobj_120_output_set(number v) {
        this->pak_11_in5_set(v);
        this->pak_11_in3_set(v);
    }
    
    void numberobj_120_value_set(number v) {
        this->numberobj_120_value_setter(v);
        v = this->numberobj_120_value;
        number localvalue = v;
    
        if (this->numberobj_120_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("CUTS/number_obj-26"), localvalue, this->_currentTime);
        this->numberobj_120_output_set(localvalue);
    }
    
    void scale_08_out_set(const list& v) {
        this->scale_08_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_120_value_set(converted);
        }
    }
    
    void scale_08_input_set(const list& v) {
        this->scale_08_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_08_inlow,
                this->scale_08_inhigh,
                this->scale_08_outlow,
                this->scale_08_outhigh,
                this->scale_08_power
            ));
        }
    
        this->scale_08_out_set(tmp);
    }
    
    void random_10_result_set(number v) {
        {
            list converted = {v};
            this->scale_08_input_set(converted);
        }
    }
    
    void random_10_trigger_bang() {
        this->random_10_result_set(rnbo_abs(this->random_10_nz_next()) * this->random_10_limit);
    }
    
    void trigger_06_out4_bang() {
        this->random_10_trigger_bang();
    }
    
    void linetilde_10_time_set(number v) {
        this->linetilde_10_time = v;
    }
    
    void linetilde_10_segments_set(const list& v) {
        this->linetilde_10_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_10_time == 0) {
                this->linetilde_10_activeRamps->length = 0;
                this->linetilde_10_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_10_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_10_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_10_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_10_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_10_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_10_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_10_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_10_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_10_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_10_activeRamps->push(lastRampValue);
                    this->linetilde_10_activeRamps->push(0);
                    this->linetilde_10_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_10_keepramp)) {
                            this->linetilde_10_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_10_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_10_activeRamps->push(destinationValue);
                    this->linetilde_10_activeRamps->push(inc);
                    this->linetilde_10_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void message_58_out_set(const list& v) {
        this->linetilde_10_segments_set(v);
    }
    
    void message_58_trigger_bang() {
        this->message_58_out_set(this->message_58_set);
    }
    
    void button_14_output_bang() {
        this->message_58_trigger_bang();
    }
    
    void button_14_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("CUTS/button_obj-56"), this->_currentTime);;
        this->button_14_output_bang();
    }
    
    void trigger_06_out3_bang() {
        this->button_14_bangval_bang();
    }
    
    void metro_03_interval_set(number v) {
        this->metro_03_interval_setter(v);
        v = this->metro_03_interval;
    }
    
    void scale_07_out_set(const list& v) {
        this->scale_07_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->metro_03_interval_set(converted);
        }
    }
    
    void scale_07_input_set(const list& v) {
        this->scale_07_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_07_inlow,
                this->scale_07_inhigh,
                this->scale_07_outlow,
                this->scale_07_outhigh,
                this->scale_07_power
            ));
        }
    
        this->scale_07_out_set(tmp);
    }
    
    void random_09_result_set(number v) {
        {
            list converted = {v};
            this->scale_07_input_set(converted);
        }
    }
    
    void random_09_trigger_bang() {
        this->random_09_result_set(rnbo_abs(this->random_09_nz_next()) * this->random_09_limit);
    }
    
    void trigger_06_out2_bang() {
        this->random_09_trigger_bang();
    }
    
    void trigger_06_out1_bang() {}
    
    void trigger_06_input_number_set(number v) {
        RNBO_UNUSED(v);
        this->trigger_06_out6_bang();
        this->trigger_06_out5_bang();
        this->trigger_06_out4_bang();
        this->trigger_06_out3_bang();
        this->trigger_06_out2_bang();
        this->trigger_06_out1_bang();
    }
    
    void gate_09_out1_number_set(number v) {
        this->gate_09_out1_number = v;
        this->trigger_06_input_number_set(v);
    }
    
    void gate_09_out2_number_set(number v) {
        this->gate_09_out2_number = v;
    }
    
    void gate_09_input_number_set(number v) {
        if (this->gate_09_onoff == 1)
            this->gate_09_out1_number_set(v);
        else if (this->gate_09_onoff == 2)
            this->gate_09_out2_number_set(v);
    }
    
    void message_60_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_09_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_09_onoff_set(converted);
        }
    }
    
    void trigger_06_input_bang_bang() {
        this->trigger_06_out6_bang();
        this->trigger_06_out5_bang();
        this->trigger_06_out4_bang();
        this->trigger_06_out3_bang();
        this->trigger_06_out2_bang();
        this->trigger_06_out1_bang();
    }
    
    void gate_09_out1_bang_bang() {
        this->trigger_06_input_bang_bang();
    }
    
    void gate_09_out2_bang_bang() {}
    
    void gate_09_input_bang_bang() {
        if (this->gate_09_onoff == 1)
            this->gate_09_out1_bang_bang();
        else if (this->gate_09_onoff == 2)
            this->gate_09_out2_bang_bang();
    }
    
    void metro_03_tickout_bang() {
        this->gate_09_input_bang_bang();
    }
    
    void message_59_set_set(const list& v) {
        this->message_59_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("CUTS/message_obj-60"), v, this->_currentTime);
    }
    
    void message_59_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_09_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_09_onoff_set(converted);
        }
    }
    
    void message_59_trigger_bang() {
        this->message_59_out_set(this->message_59_set);
    }
    
    void message_60_set_set(const list& v) {
        this->message_60_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("CUTS/message_obj-62"), v, this->_currentTime);
    }
    
    void message_61_set_set(const list& v) {
        this->message_61_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("CUTS/message_obj-64"), v, this->_currentTime);
    }
    
    void message_62_set_set(const list& v) {
        this->message_62_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("CUTS/message_obj-66"), v, this->_currentTime);
    }
    
    void gate_10_onoff_set(number v) {
        this->gate_10_onoff = v;
    }
    
    void message_65_trigger_bang() {
        if (this->stackprotect_check())
            return;
    
        this->message_65_out_set(this->message_65_set);
    }
    
    void trigger_07_out6_bang() {
        if (this->stackprotect_check())
            return;
    
        this->message_65_trigger_bang();
    }
    
    void message_64_set_set(const list& v) {
        this->message_64_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("CUTS/message_obj-44"), v, this->_currentTime);
    }
    
    void pak_12_out_set(const list& v) {
        this->message_64_set_set(v);
    }
    
    void pak_12_in6_set(number v) {
        this->pak_12_in6 = v;
        list array = list(0, 0, 0, 0, 0, 0, 0, 0);
        array[0] = this->pak_12_in1;
        array[1] = this->pak_12_in2;
        array[2] = this->pak_12_in3;
        array[3] = this->pak_12_in4;
        array[4] = this->pak_12_in5;
        array[5] = this->pak_12_in6;
        array[6] = this->pak_12_in7;
        array[7] = this->pak_12_in8;
        this->pak_12_out_set(array);
    }
    
    void numberobj_128_output_set(number v) {
        this->pak_12_in6_set(v);
    }
    
    void numberobj_128_value_set(number v) {
        this->numberobj_128_value_setter(v);
        v = this->numberobj_128_value;
        number localvalue = v;
    
        if (this->numberobj_128_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("CUTS/number_obj-39"), localvalue, this->_currentTime);
        this->numberobj_128_output_set(localvalue);
    }
    
    void scale_14_out_set(const list& v) {
        this->scale_14_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_128_value_set(converted);
        }
    }
    
    void scale_14_input_set(const list& v) {
        this->scale_14_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_14_inlow,
                this->scale_14_inhigh,
                this->scale_14_outlow,
                this->scale_14_outhigh,
                this->scale_14_power
            ));
        }
    
        this->scale_14_out_set(tmp);
    }
    
    void random_14_result_set(number v) {
        {
            list converted = {v};
            this->scale_14_input_set(converted);
        }
    }
    
    void random_14_trigger_bang() {
        this->random_14_result_set(rnbo_abs(this->random_14_nz_next()) * this->random_14_limit);
    }
    
    void trigger_07_out5_bang() {
        this->random_14_trigger_bang();
    }
    
    void pak_12_in5_set(number v) {
        this->pak_12_in5 = v;
        list array = list(0, 0, 0, 0, 0, 0, 0, 0);
        array[0] = this->pak_12_in1;
        array[1] = this->pak_12_in2;
        array[2] = this->pak_12_in3;
        array[3] = this->pak_12_in4;
        array[4] = this->pak_12_in5;
        array[5] = this->pak_12_in6;
        array[6] = this->pak_12_in7;
        array[7] = this->pak_12_in8;
        this->pak_12_out_set(array);
    }
    
    void pak_12_in3_set(number v) {
        this->pak_12_in3 = v;
        list array = list(0, 0, 0, 0, 0, 0, 0, 0);
        array[0] = this->pak_12_in1;
        array[1] = this->pak_12_in2;
        array[2] = this->pak_12_in3;
        array[3] = this->pak_12_in4;
        array[4] = this->pak_12_in5;
        array[5] = this->pak_12_in6;
        array[6] = this->pak_12_in7;
        array[7] = this->pak_12_in8;
        this->pak_12_out_set(array);
    }
    
    void numberobj_126_output_set(number v) {
        this->pak_12_in5_set(v);
        this->pak_12_in3_set(v);
    }
    
    void numberobj_126_value_set(number v) {
        this->numberobj_126_value_setter(v);
        v = this->numberobj_126_value;
        number localvalue = v;
    
        if (this->numberobj_126_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("CUTS/number_obj-41"), localvalue, this->_currentTime);
        this->numberobj_126_output_set(localvalue);
    }
    
    void scale_13_out_set(const list& v) {
        this->scale_13_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_126_value_set(converted);
        }
    }
    
    void scale_13_input_set(const list& v) {
        this->scale_13_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_13_inlow,
                this->scale_13_inhigh,
                this->scale_13_outlow,
                this->scale_13_outhigh,
                this->scale_13_power
            ));
        }
    
        this->scale_13_out_set(tmp);
    }
    
    void random_13_result_set(number v) {
        {
            list converted = {v};
            this->scale_13_input_set(converted);
        }
    }
    
    void random_13_trigger_bang() {
        this->random_13_result_set(rnbo_abs(this->random_13_nz_next()) * this->random_13_limit);
    }
    
    void trigger_07_out4_bang() {
        this->random_13_trigger_bang();
    }
    
    void linetilde_12_time_set(number v) {
        this->linetilde_12_time = v;
    }
    
    void linetilde_12_segments_set(const list& v) {
        this->linetilde_12_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_12_time == 0) {
                this->linetilde_12_activeRamps->length = 0;
                this->linetilde_12_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_12_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_12_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_12_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_12_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_12_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_12_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_12_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_12_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_12_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_12_activeRamps->push(lastRampValue);
                    this->linetilde_12_activeRamps->push(0);
                    this->linetilde_12_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_12_keepramp)) {
                            this->linetilde_12_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_12_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_12_activeRamps->push(destinationValue);
                    this->linetilde_12_activeRamps->push(inc);
                    this->linetilde_12_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void message_64_out_set(const list& v) {
        this->linetilde_12_segments_set(v);
    }
    
    void message_64_trigger_bang() {
        this->message_64_out_set(this->message_64_set);
    }
    
    void button_15_output_bang() {
        this->message_64_trigger_bang();
    }
    
    void button_15_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("CUTS/button_obj-21"), this->_currentTime);;
        this->button_15_output_bang();
    }
    
    void trigger_07_out3_bang() {
        this->button_15_bangval_bang();
    }
    
    void metro_04_interval_set(number v) {
        this->metro_04_interval_setter(v);
        v = this->metro_04_interval;
    }
    
    void scale_11_out_set(const list& v) {
        this->scale_11_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->metro_04_interval_set(converted);
        }
    }
    
    void scale_11_input_set(const list& v) {
        this->scale_11_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_11_inlow,
                this->scale_11_inhigh,
                this->scale_11_outlow,
                this->scale_11_outhigh,
                this->scale_11_power
            ));
        }
    
        this->scale_11_out_set(tmp);
    }
    
    void random_11_result_set(number v) {
        {
            list converted = {v};
            this->scale_11_input_set(converted);
        }
    }
    
    void random_11_trigger_bang() {
        this->random_11_result_set(rnbo_abs(this->random_11_nz_next()) * this->random_11_limit);
    }
    
    void trigger_07_out2_bang() {
        this->random_11_trigger_bang();
    }
    
    void trigger_07_out1_bang() {}
    
    void trigger_07_input_number_set(number v) {
        RNBO_UNUSED(v);
        this->trigger_07_out6_bang();
        this->trigger_07_out5_bang();
        this->trigger_07_out4_bang();
        this->trigger_07_out3_bang();
        this->trigger_07_out2_bang();
        this->trigger_07_out1_bang();
    }
    
    void gate_10_out1_number_set(number v) {
        this->gate_10_out1_number = v;
        this->trigger_07_input_number_set(v);
    }
    
    void gate_10_out2_number_set(number v) {
        this->gate_10_out2_number = v;
    }
    
    void gate_10_input_number_set(number v) {
        if (this->gate_10_onoff == 1)
            this->gate_10_out1_number_set(v);
        else if (this->gate_10_onoff == 2)
            this->gate_10_out2_number_set(v);
    }
    
    void message_65_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_10_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_10_onoff_set(converted);
        }
    }
    
    void trigger_07_input_bang_bang() {
        this->trigger_07_out6_bang();
        this->trigger_07_out5_bang();
        this->trigger_07_out4_bang();
        this->trigger_07_out3_bang();
        this->trigger_07_out2_bang();
        this->trigger_07_out1_bang();
    }
    
    void gate_10_out1_bang_bang() {
        this->trigger_07_input_bang_bang();
    }
    
    void gate_10_out2_bang_bang() {}
    
    void gate_10_input_bang_bang() {
        if (this->gate_10_onoff == 1)
            this->gate_10_out1_bang_bang();
        else if (this->gate_10_onoff == 2)
            this->gate_10_out2_bang_bang();
    }
    
    void metro_04_tickout_bang() {
        this->gate_10_input_bang_bang();
    }
    
    void message_63_set_set(const list& v) {
        this->message_63_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("CUTS/message_obj-18"), v, this->_currentTime);
    }
    
    void message_63_out_set(const list& v) {
        {
            if (v->length > 1)
                this->gate_10_input_number_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->gate_10_onoff_set(converted);
        }
    }
    
    void message_63_trigger_bang() {
        this->message_63_out_set(this->message_63_set);
    }
    
    void message_65_set_set(const list& v) {
        this->message_65_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("CUTS/message_obj-15"), v, this->_currentTime);
    }
    
    void loadbang_02_output_bang() {
        this->message_63_trigger_bang();
        this->message_59_trigger_bang();
    }
    
    void linetilde_09_perform(SampleValue * out, Index n) {
        auto __linetilde_09_time = this->linetilde_09_time;
        auto __linetilde_09_keepramp = this->linetilde_09_keepramp;
        auto __linetilde_09_currentValue = this->linetilde_09_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_09_activeRamps->length)) {
            while ((bool)(this->linetilde_09_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_09_activeRamps[0];
                number inc = this->linetilde_09_activeRamps[1];
                number rampTimeInSamples = this->linetilde_09_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_09_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_09_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_09_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -281953904,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_09_keepramp))) {
                            __linetilde_09_time = 0;
                        }
                    }
                }
    
                __linetilde_09_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_09_currentValue;
            i++;
        }
    
        this->linetilde_09_currentValue = __linetilde_09_currentValue;
        this->linetilde_09_time = __linetilde_09_time;
    }
    
    void linetilde_10_perform(SampleValue * out, Index n) {
        auto __linetilde_10_time = this->linetilde_10_time;
        auto __linetilde_10_keepramp = this->linetilde_10_keepramp;
        auto __linetilde_10_currentValue = this->linetilde_10_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_10_activeRamps->length)) {
            while ((bool)(this->linetilde_10_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_10_activeRamps[0];
                number inc = this->linetilde_10_activeRamps[1];
                number rampTimeInSamples = this->linetilde_10_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_10_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_10_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_10_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -664351027,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_10_keepramp))) {
                            __linetilde_10_time = 0;
                        }
                    }
                }
    
                __linetilde_10_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_10_currentValue;
            i++;
        }
    
        this->linetilde_10_currentValue = __linetilde_10_currentValue;
        this->linetilde_10_time = __linetilde_10_time;
    }
    
    void numbertilde_04_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_04_currentIntervalInSamples = this->numbertilde_04_currentIntervalInSamples;
        auto __numbertilde_04_lastValue = this->numbertilde_04_lastValue;
        auto __numbertilde_04_currentInterval = this->numbertilde_04_currentInterval;
        auto __numbertilde_04_rampInSamples = this->numbertilde_04_rampInSamples;
        auto __numbertilde_04_outValue = this->numbertilde_04_outValue;
        auto __numbertilde_04_currentMode = this->numbertilde_04_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_04_currentMode == 0) {
                output[(Index)i] = this->numbertilde_04_smooth_next(
                    __numbertilde_04_outValue,
                    __numbertilde_04_rampInSamples,
                    __numbertilde_04_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_04_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_04_lastValue && __numbertilde_04_currentInterval <= 0) {
            __numbertilde_04_currentInterval = __numbertilde_04_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                2098551528,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_04_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("CUTS/number~_obj-63"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_04_currentInterval = __numbertilde_04_currentInterval;
        this->numbertilde_04_lastValue = __numbertilde_04_lastValue;
    }
    
    void dspexpr_03_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void xfade_tilde_08_perform(
        const Sample * pos,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] * this->xfade_tilde_08_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_08_func_next(pos[(Index)i], 1);
        }
    }
    
    void linetilde_11_perform(SampleValue * out, Index n) {
        auto __linetilde_11_time = this->linetilde_11_time;
        auto __linetilde_11_keepramp = this->linetilde_11_keepramp;
        auto __linetilde_11_currentValue = this->linetilde_11_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_11_activeRamps->length)) {
            while ((bool)(this->linetilde_11_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_11_activeRamps[0];
                number inc = this->linetilde_11_activeRamps[1];
                number rampTimeInSamples = this->linetilde_11_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_11_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_11_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_11_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -1841075377,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_11_keepramp))) {
                            __linetilde_11_time = 0;
                        }
                    }
                }
    
                __linetilde_11_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_11_currentValue;
            i++;
        }
    
        this->linetilde_11_currentValue = __linetilde_11_currentValue;
        this->linetilde_11_time = __linetilde_11_time;
    }
    
    void linetilde_12_perform(SampleValue * out, Index n) {
        auto __linetilde_12_time = this->linetilde_12_time;
        auto __linetilde_12_keepramp = this->linetilde_12_keepramp;
        auto __linetilde_12_currentValue = this->linetilde_12_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_12_activeRamps->length)) {
            while ((bool)(this->linetilde_12_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_12_activeRamps[0];
                number inc = this->linetilde_12_activeRamps[1];
                number rampTimeInSamples = this->linetilde_12_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_12_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_12_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_12_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            894770446,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_12_keepramp))) {
                            __linetilde_12_time = 0;
                        }
                    }
                }
    
                __linetilde_12_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_12_currentValue;
            i++;
        }
    
        this->linetilde_12_currentValue = __linetilde_12_currentValue;
        this->linetilde_12_time = __linetilde_12_time;
    }
    
    void xfade_tilde_10_perform(
        const Sample * pos,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] * this->xfade_tilde_10_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_10_func_next(pos[(Index)i], 1);
        }
    }
    
    void dspexpr_04_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void xfade_tilde_09_perform(
        const Sample * pos,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] * this->xfade_tilde_09_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_09_func_next(pos[(Index)i], 1);
        }
    }
    
    void numbertilde_05_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_05_currentIntervalInSamples = this->numbertilde_05_currentIntervalInSamples;
        auto __numbertilde_05_lastValue = this->numbertilde_05_lastValue;
        auto __numbertilde_05_currentInterval = this->numbertilde_05_currentInterval;
        auto __numbertilde_05_rampInSamples = this->numbertilde_05_rampInSamples;
        auto __numbertilde_05_outValue = this->numbertilde_05_outValue;
        auto __numbertilde_05_currentMode = this->numbertilde_05_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_05_currentMode == 0) {
                output[(Index)i] = this->numbertilde_05_smooth_next(
                    __numbertilde_05_outValue,
                    __numbertilde_05_rampInSamples,
                    __numbertilde_05_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_05_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_05_lastValue && __numbertilde_05_currentInterval <= 0) {
            __numbertilde_05_currentInterval = __numbertilde_05_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_05_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("CUTS/number~_obj-12"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_05_currentInterval = __numbertilde_05_currentInterval;
        this->numbertilde_05_lastValue = __numbertilde_05_lastValue;
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void toggle_06_value_number_setter(number v) {
        this->toggle_06_value_number = (v != 0 ? 1 : 0);
    }
    
    void random_09_limit_setter(number v) {
        if (v >= 0)
            this->random_09_limit = v;
    }
    
    void metro_03_interval_setter(number v) {
        this->metro_03_interval = (v > 0 ? v : 0);
    }
    
    void random_10_limit_setter(number v) {
        if (v >= 0)
            this->random_10_limit = v;
    }
    
    void numberobj_120_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_120_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_120_value = localvalue;
    }
    
    void numberobj_121_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_121_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_121_value = localvalue;
    }
    
    void numberobj_122_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_122_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_122_value = localvalue;
    }
    
    void numberobj_123_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_123_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_123_value = localvalue;
    }
    
    void numberobj_124_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_124_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_124_value = localvalue;
    }
    
    void toggle_07_value_number_setter(number v) {
        this->toggle_07_value_number = (v != 0 ? 1 : 0);
    }
    
    void random_11_limit_setter(number v) {
        if (v >= 0)
            this->random_11_limit = v;
    }
    
    void metro_04_interval_setter(number v) {
        this->metro_04_interval = (v > 0 ? v : 0);
    }
    
    void random_12_limit_setter(number v) {
        if (v >= 0)
            this->random_12_limit = v;
    }
    
    void numberobj_125_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_125_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_125_value = localvalue;
    }
    
    void random_13_limit_setter(number v) {
        if (v >= 0)
            this->random_13_limit = v;
    }
    
    void numberobj_126_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_126_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_126_value = localvalue;
    }
    
    void numberobj_127_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_127_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_127_value = localvalue;
    }
    
    void random_14_limit_setter(number v) {
        if (v >= 0)
            this->random_14_limit = v;
    }
    
    void numberobj_128_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_128_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_128_value = localvalue;
    }
    
    void numberobj_129_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_129_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_129_value = localvalue;
    }
    
    number xfade_tilde_08_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    if (pos > nchan_1)
                        pos = nchan_1;
                    else if (pos < 0)
                        pos = 0;
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return this->safesqrt(1.0 - rnbo_abs(pos));
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void xfade_tilde_08_func_reset() {}
    
    void message_56_init() {
        this->message_56_set_set({0});
    }
    
    void message_57_init() {
        this->message_57_set_set({1});
    }
    
    number xfade_tilde_09_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    if (pos > nchan_1)
                        pos = nchan_1;
                    else if (pos < 0)
                        pos = 0;
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return this->safesqrt(1.0 - rnbo_abs(pos));
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void xfade_tilde_09_func_reset() {}
    
    void toggle_06_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_06_value_number;
    }
    
    void toggle_06_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_06_value_number_set(preset["value"]);
    }
    
    void random_09_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_09_nz_state
        );
    }
    
    void random_09_nz_init() {
        this->random_09_nz_reset();
    }
    
    void random_09_nz_seed(number v) {
        xoshiro_reset(v, this->random_09_nz_state);
    }
    
    number random_09_nz_next() {
        return xoshiro_next(this->random_09_nz_state);
    }
    
    void metro_03_onTransportChanged(number ) {}
    
    void metro_03_onBeatTimeChanged(number ) {}
    
    void message_58_init() {
        this->message_58_set_set({1, 0, 0, 5, 0, 13.661378, 1, 5});
    }
    
    void message_59_init() {
        this->message_59_set_set({1});
    }
    
    void message_60_init() {
        this->message_60_set_set({2});
    }
    
    number xfade_tilde_10_func_next(number pos, int channel) {
        {
            {
                number nchan_1 = 2 - 1;
    
                {
                    pos = pos * nchan_1;
                }
    
                {
                    if (pos > nchan_1)
                        pos = nchan_1;
                    else if (pos < 0)
                        pos = 0;
                }
    
                pos = pos - channel;
    
                if (pos > -1 && pos < 1) {
                    {
                        {
                            return this->safesqrt(1.0 - rnbo_abs(pos));
                        }
                    }
                } else {
                    return 0;
                }
            }
        }
    }
    
    void xfade_tilde_10_func_reset() {}
    
    void random_10_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_10_nz_state
        );
    }
    
    void random_10_nz_init() {
        this->random_10_nz_reset();
    }
    
    void random_10_nz_seed(number v) {
        xoshiro_reset(v, this->random_10_nz_state);
    }
    
    number random_10_nz_next() {
        return xoshiro_next(this->random_10_nz_state);
    }
    
    void numberobj_120_init() {
        this->numberobj_120_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("CUTS/number_obj-26"), 1, this->_currentTime);
    }
    
    void numberobj_120_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_120_value;
    }
    
    void numberobj_120_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_120_value_set(preset["value"]);
    }
    
    number numbertilde_04_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_04_smooth_d_prev);
        this->numbertilde_04_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_04_smooth_d_dspsetup() {
        this->numbertilde_04_smooth_d_reset();
    }
    
    void numbertilde_04_smooth_d_reset() {
        this->numbertilde_04_smooth_d_prev = 0;
    }
    
    number numbertilde_04_smooth_next(number x, number up, number down) {
        if (this->numbertilde_04_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_04_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_04_smooth_index = _up;
                this->numbertilde_04_smooth_increment = (x - this->numbertilde_04_smooth_prev) / _up;
            } else if (x < this->numbertilde_04_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_04_smooth_index = _down;
                this->numbertilde_04_smooth_increment = (x - this->numbertilde_04_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_04_smooth_index > 0) {
            this->numbertilde_04_smooth_prev += this->numbertilde_04_smooth_increment;
            this->numbertilde_04_smooth_index -= 1;
        } else {
            this->numbertilde_04_smooth_prev = x;
        }
    
        return this->numbertilde_04_smooth_prev;
    }
    
    void numbertilde_04_smooth_reset() {
        this->numbertilde_04_smooth_prev = 0;
        this->numbertilde_04_smooth_index = 0;
        this->numbertilde_04_smooth_increment = 0;
        this->numbertilde_04_smooth_d_reset();
    }
    
    void numbertilde_04_init() {
        this->numbertilde_04_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("CUTS/number~_obj-63"), 1, this->_currentTime);
    }
    
    void numbertilde_04_dspsetup(bool force) {
        if ((bool)(this->numbertilde_04_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_04_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_04_currentInterval = this->numbertilde_04_currentIntervalInSamples;
        this->numbertilde_04_rampInSamples = this->mstosamps(this->numbertilde_04_ramp);
        this->numbertilde_04_setupDone = true;
        this->numbertilde_04_smooth_d_dspsetup();
    }
    
    void numberobj_121_init() {
        this->numberobj_121_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("CUTS/number_obj-50"), 1, this->_currentTime);
    }
    
    void numberobj_121_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_121_value;
    }
    
    void numberobj_121_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_121_value_set(preset["value"]);
    }
    
    void numberobj_122_init() {
        this->numberobj_122_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("CUTS/number_obj-52"), 1, this->_currentTime);
    }
    
    void numberobj_122_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_122_value;
    }
    
    void numberobj_122_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_122_value_set(preset["value"]);
    }
    
    void message_61_init() {
        this->message_61_set_set({0});
    }
    
    void numberobj_123_init() {
        this->numberobj_123_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("CUTS/number_obj-33"), 1, this->_currentTime);
    }
    
    void numberobj_123_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_123_value;
    }
    
    void numberobj_123_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_123_value_set(preset["value"]);
    }
    
    void message_62_init() {
        this->message_62_set_set({1});
    }
    
    void numberobj_124_init() {
        this->numberobj_124_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("CUTS/number_obj-36"), 1, this->_currentTime);
    }
    
    void numberobj_124_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_124_value;
    }
    
    void numberobj_124_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_124_value_set(preset["value"]);
    }
    
    void toggle_07_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_07_value_number;
    }
    
    void toggle_07_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_07_value_number_set(preset["value"]);
    }
    
    void random_11_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_11_nz_state
        );
    }
    
    void random_11_nz_init() {
        this->random_11_nz_reset();
    }
    
    void random_11_nz_seed(number v) {
        xoshiro_reset(v, this->random_11_nz_state);
    }
    
    number random_11_nz_next() {
        return xoshiro_next(this->random_11_nz_state);
    }
    
    void metro_04_onTransportChanged(number ) {}
    
    void metro_04_onBeatTimeChanged(number ) {}
    
    void message_63_init() {
        this->message_63_set_set({1});
    }
    
    void message_64_init() {
        this->message_64_set_set({1, 0, 0, 5, 0, 4.424046, 1, 5});
    }
    
    void random_12_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_12_nz_state
        );
    }
    
    void random_12_nz_init() {
        this->random_12_nz_reset();
    }
    
    void random_12_nz_seed(number v) {
        xoshiro_reset(v, this->random_12_nz_state);
    }
    
    number random_12_nz_next() {
        return xoshiro_next(this->random_12_nz_state);
    }
    
    void numberobj_125_init() {
        this->numberobj_125_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("CUTS/number_obj-28"), 1, this->_currentTime);
    }
    
    void numberobj_125_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_125_value;
    }
    
    void numberobj_125_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_125_value_set(preset["value"]);
    }
    
    void message_65_init() {
        this->message_65_set_set({2});
    }
    
    void random_13_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_13_nz_state
        );
    }
    
    void random_13_nz_init() {
        this->random_13_nz_reset();
    }
    
    void random_13_nz_seed(number v) {
        xoshiro_reset(v, this->random_13_nz_state);
    }
    
    number random_13_nz_next() {
        return xoshiro_next(this->random_13_nz_state);
    }
    
    void numberobj_126_init() {
        this->numberobj_126_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("CUTS/number_obj-41"), 1, this->_currentTime);
    }
    
    void numberobj_126_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_126_value;
    }
    
    void numberobj_126_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_126_value_set(preset["value"]);
    }
    
    number numbertilde_05_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_05_smooth_d_prev);
        this->numbertilde_05_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_05_smooth_d_dspsetup() {
        this->numbertilde_05_smooth_d_reset();
    }
    
    void numbertilde_05_smooth_d_reset() {
        this->numbertilde_05_smooth_d_prev = 0;
    }
    
    number numbertilde_05_smooth_next(number x, number up, number down) {
        if (this->numbertilde_05_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_05_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_05_smooth_index = _up;
                this->numbertilde_05_smooth_increment = (x - this->numbertilde_05_smooth_prev) / _up;
            } else if (x < this->numbertilde_05_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_05_smooth_index = _down;
                this->numbertilde_05_smooth_increment = (x - this->numbertilde_05_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_05_smooth_index > 0) {
            this->numbertilde_05_smooth_prev += this->numbertilde_05_smooth_increment;
            this->numbertilde_05_smooth_index -= 1;
        } else {
            this->numbertilde_05_smooth_prev = x;
        }
    
        return this->numbertilde_05_smooth_prev;
    }
    
    void numbertilde_05_smooth_reset() {
        this->numbertilde_05_smooth_prev = 0;
        this->numbertilde_05_smooth_index = 0;
        this->numbertilde_05_smooth_increment = 0;
        this->numbertilde_05_smooth_d_reset();
    }
    
    void numbertilde_05_init() {
        this->numbertilde_05_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("CUTS/number~_obj-12"), 1, this->_currentTime);
    }
    
    void numbertilde_05_dspsetup(bool force) {
        if ((bool)(this->numbertilde_05_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_05_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_05_currentInterval = this->numbertilde_05_currentIntervalInSamples;
        this->numbertilde_05_rampInSamples = this->mstosamps(this->numbertilde_05_ramp);
        this->numbertilde_05_setupDone = true;
        this->numbertilde_05_smooth_d_dspsetup();
    }
    
    void numberobj_127_init() {
        this->numberobj_127_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("CUTS/number_obj-43"), 1, this->_currentTime);
    }
    
    void numberobj_127_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_127_value;
    }
    
    void numberobj_127_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_127_value_set(preset["value"]);
    }
    
    void random_14_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_14_nz_state
        );
    }
    
    void random_14_nz_init() {
        this->random_14_nz_reset();
    }
    
    void random_14_nz_seed(number v) {
        xoshiro_reset(v, this->random_14_nz_state);
    }
    
    number random_14_nz_next() {
        return xoshiro_next(this->random_14_nz_state);
    }
    
    void numberobj_128_init() {
        this->numberobj_128_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("CUTS/number_obj-39"), 1, this->_currentTime);
    }
    
    void numberobj_128_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_128_value;
    }
    
    void numberobj_128_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_128_value_set(preset["value"]);
    }
    
    void numberobj_129_init() {
        this->numberobj_129_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("CUTS/number_obj-45"), 1, this->_currentTime);
    }
    
    void numberobj_129_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_129_value;
    }
    
    void numberobj_129_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_129_value_set(preset["value"]);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        xfade_tilde_08_pos = 0;
        dspexpr_03_in1 = 0;
        dspexpr_03_in2 = 0;
        select_20_test1 = 0;
        select_20_test2 = 1;
        receive_25_output_number = 0;
        linetilde_09_time = 10;
        linetilde_09_keepramp = 0;
        xfade_tilde_09_pos = 0;
        dspexpr_04_in1 = 0;
        dspexpr_04_in2 = 0;
        loadmess_06_message = { 1 };
        toggle_06_value_number = 0;
        toggle_06_value_number_setter(toggle_06_value_number);
        gate_09_onoff = 0;
        gate_09_out1_number = 0;
        gate_09_out2_number = 0;
        scale_07_inlow = 0;
        scale_07_inhigh = 4999;
        scale_07_outlow = 50;
        scale_07_outhigh = 5000;
        scale_07_power = 1;
        random_09_limit = 5000;
        random_09_limit_setter(random_09_limit);
        random_09_seed = 0;
        metro_03_on = 0;
        metro_03_interval = 1000;
        metro_03_interval_setter(metro_03_interval);
        linetilde_10_time = 0;
        linetilde_10_keepramp = 0;
        pak_11_in1 = 1;
        pak_11_in2 = 0;
        pak_11_in3 = 0;
        pak_11_in4 = 5;
        pak_11_in5 = 0;
        pak_11_in6 = 0;
        pak_11_in7 = 1;
        pak_11_in8 = 5;
        xfade_tilde_10_pos = 0;
        scale_08_inlow = 0;
        scale_08_inhigh = 99;
        scale_08_outlow = 0;
        scale_08_outhigh = 1;
        scale_08_power = 1;
        random_10_limit = 100;
        random_10_limit_setter(random_10_limit);
        random_10_seed = 0;
        numberobj_120_value = 0;
        numberobj_120_value_setter(numberobj_120_value);
        numbertilde_04_input_number = 0;
        numbertilde_04_ramp = 0;
        numberobj_121_value = 0;
        numberobj_121_value_setter(numberobj_121_value);
        receive_26_output_number = 0;
        numberobj_122_value = 0;
        numberobj_122_value_setter(numberobj_122_value);
        receive_27_output_number = 0;
        linetilde_11_time = 10;
        linetilde_11_keepramp = 0;
        select_21_test1 = 0;
        select_21_test2 = 1;
        receive_28_output_number = 0;
        numberobj_123_value = 0;
        numberobj_123_value_setter(numberobj_123_value);
        scale_09_inlow = 0;
        scale_09_inhigh = 100;
        scale_09_outlow = 1;
        scale_09_outhigh = 0;
        scale_09_power = 1;
        receive_29_output_number = 0;
        numberobj_124_value = 0;
        numberobj_124_value_setter(numberobj_124_value);
        scale_10_inlow = 0;
        scale_10_inhigh = 100;
        scale_10_outlow = 1;
        scale_10_outhigh = 0;
        scale_10_power = 1;
        receive_30_output_number = 0;
        toggle_07_value_number = 0;
        toggle_07_value_number_setter(toggle_07_value_number);
        gate_10_onoff = 0;
        gate_10_out1_number = 0;
        gate_10_out2_number = 0;
        scale_11_inlow = 0;
        scale_11_inhigh = 4999;
        scale_11_outlow = 50;
        scale_11_outhigh = 5000;
        scale_11_power = 1;
        random_11_limit = 5000;
        random_11_limit_setter(random_11_limit);
        random_11_seed = 0;
        metro_04_on = 0;
        metro_04_interval = 1000;
        metro_04_interval_setter(metro_04_interval);
        linetilde_12_time = 0;
        linetilde_12_keepramp = 0;
        scale_12_inlow = 0;
        scale_12_inhigh = 4999;
        scale_12_outlow = 0;
        scale_12_outhigh = 5000;
        scale_12_power = 1;
        random_12_limit = 5000;
        random_12_limit_setter(random_12_limit);
        random_12_seed = 0;
        numberobj_125_value = 0;
        numberobj_125_value_setter(numberobj_125_value);
        pak_12_in1 = 1;
        pak_12_in2 = 0;
        pak_12_in3 = 0;
        pak_12_in4 = 5;
        pak_12_in5 = 0;
        pak_12_in6 = 0;
        pak_12_in7 = 1;
        pak_12_in8 = 5;
        scale_13_inlow = 0;
        scale_13_inhigh = 99;
        scale_13_outlow = 0;
        scale_13_outhigh = 1;
        scale_13_power = 1;
        random_13_limit = 100;
        random_13_limit_setter(random_13_limit);
        random_13_seed = 0;
        numberobj_126_value = 0;
        numberobj_126_value_setter(numberobj_126_value);
        numbertilde_05_input_number = 0;
        numbertilde_05_ramp = 0;
        numberobj_127_value = 0;
        numberobj_127_value_setter(numberobj_127_value);
        receive_31_output_number = 0;
        scale_14_inlow = 0;
        scale_14_inhigh = 4999;
        scale_14_outlow = 0;
        scale_14_outhigh = 5000;
        scale_14_power = 1;
        random_14_limit = 5000;
        random_14_limit_setter(random_14_limit);
        random_14_seed = 0;
        numberobj_128_value = 0;
        numberobj_128_value_setter(numberobj_128_value);
        numberobj_129_value = 0;
        numberobj_129_value_setter(numberobj_129_value);
        receive_32_output_number = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        signals[4] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        linetilde_09_currentValue = 0;
        toggle_06_lastValue = 0;
        metro_03_last = -1;
        metro_03_next = -1;
        linetilde_10_currentValue = 0;
        numberobj_120_currentFormat = 6;
        numberobj_120_lastValue = 0;
        numbertilde_04_currentInterval = 0;
        numbertilde_04_currentIntervalInSamples = 0;
        numbertilde_04_lastValue = 0;
        numbertilde_04_outValue = 0;
        numbertilde_04_rampInSamples = 0;
        numbertilde_04_currentMode = 0;
        numbertilde_04_smooth_d_prev = 0;
        numbertilde_04_smooth_prev = 0;
        numbertilde_04_smooth_index = 0;
        numbertilde_04_smooth_increment = 0;
        numbertilde_04_setupDone = false;
        numberobj_121_currentFormat = 6;
        numberobj_121_lastValue = 0;
        numberobj_122_currentFormat = 6;
        numberobj_122_lastValue = 0;
        linetilde_11_currentValue = 0;
        numberobj_123_currentFormat = 6;
        numberobj_123_lastValue = 0;
        numberobj_124_currentFormat = 6;
        numberobj_124_lastValue = 0;
        toggle_07_lastValue = 0;
        metro_04_last = -1;
        metro_04_next = -1;
        linetilde_12_currentValue = 0;
        numberobj_125_currentFormat = 6;
        numberobj_125_lastValue = 0;
        numberobj_126_currentFormat = 6;
        numberobj_126_lastValue = 0;
        numbertilde_05_currentInterval = 0;
        numbertilde_05_currentIntervalInSamples = 0;
        numbertilde_05_lastValue = 0;
        numbertilde_05_outValue = 0;
        numbertilde_05_rampInSamples = 0;
        numbertilde_05_currentMode = 0;
        numbertilde_05_smooth_d_prev = 0;
        numbertilde_05_smooth_prev = 0;
        numbertilde_05_smooth_index = 0;
        numbertilde_05_smooth_increment = 0;
        numbertilde_05_setupDone = false;
        numberobj_127_currentFormat = 6;
        numberobj_127_lastValue = 0;
        numberobj_128_currentFormat = 6;
        numberobj_128_lastValue = 0;
        numberobj_129_currentFormat = 6;
        numberobj_129_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number xfade_tilde_08_pos;
        number dspexpr_03_in1;
        number dspexpr_03_in2;
        list message_56_set;
        number select_20_test1;
        number select_20_test2;
        number receive_25_output_number;
        list receive_25_output_list;
        list linetilde_09_segments;
        number linetilde_09_time;
        number linetilde_09_keepramp;
        list message_57_set;
        number xfade_tilde_09_pos;
        number dspexpr_04_in1;
        number dspexpr_04_in2;
        list loadmess_06_message;
        number toggle_06_value_number;
        number gate_09_onoff;
        number gate_09_out1_number;
        list gate_09_out1_list;
        number gate_09_out2_number;
        list gate_09_out2_list;
        list scale_07_input;
        number scale_07_inlow;
        number scale_07_inhigh;
        number scale_07_outlow;
        number scale_07_outhigh;
        number scale_07_power;
        list scale_07_out;
        number random_09_limit;
        number random_09_seed;
        number metro_03_on;
        number metro_03_interval;
        list message_58_set;
        list linetilde_10_segments;
        number linetilde_10_time;
        number linetilde_10_keepramp;
        list message_59_set;
        list message_60_set;
        number pak_11_in1;
        number pak_11_in2;
        number pak_11_in3;
        number pak_11_in4;
        number pak_11_in5;
        number pak_11_in6;
        number pak_11_in7;
        number pak_11_in8;
        number xfade_tilde_10_pos;
        list scale_08_input;
        number scale_08_inlow;
        number scale_08_inhigh;
        number scale_08_outlow;
        number scale_08_outhigh;
        number scale_08_power;
        list scale_08_out;
        number random_10_limit;
        number random_10_seed;
        number numberobj_120_value;
        number numbertilde_04_input_number;
        number numbertilde_04_ramp;
        number numberobj_121_value;
        number receive_26_output_number;
        list receive_26_output_list;
        number numberobj_122_value;
        number receive_27_output_number;
        list receive_27_output_list;
        list linetilde_11_segments;
        number linetilde_11_time;
        number linetilde_11_keepramp;
        list message_61_set;
        number select_21_test1;
        number select_21_test2;
        number receive_28_output_number;
        list receive_28_output_list;
        number numberobj_123_value;
        list scale_09_input;
        number scale_09_inlow;
        number scale_09_inhigh;
        number scale_09_outlow;
        number scale_09_outhigh;
        number scale_09_power;
        list scale_09_out;
        number receive_29_output_number;
        list receive_29_output_list;
        list message_62_set;
        number numberobj_124_value;
        list scale_10_input;
        number scale_10_inlow;
        number scale_10_inhigh;
        number scale_10_outlow;
        number scale_10_outhigh;
        number scale_10_power;
        list scale_10_out;
        number receive_30_output_number;
        list receive_30_output_list;
        number toggle_07_value_number;
        number gate_10_onoff;
        number gate_10_out1_number;
        list gate_10_out1_list;
        number gate_10_out2_number;
        list gate_10_out2_list;
        list scale_11_input;
        number scale_11_inlow;
        number scale_11_inhigh;
        number scale_11_outlow;
        number scale_11_outhigh;
        number scale_11_power;
        list scale_11_out;
        number random_11_limit;
        number random_11_seed;
        number metro_04_on;
        number metro_04_interval;
        list message_63_set;
        list message_64_set;
        list linetilde_12_segments;
        number linetilde_12_time;
        number linetilde_12_keepramp;
        list scale_12_input;
        number scale_12_inlow;
        number scale_12_inhigh;
        number scale_12_outlow;
        number scale_12_outhigh;
        number scale_12_power;
        list scale_12_out;
        number random_12_limit;
        number random_12_seed;
        number numberobj_125_value;
        list message_65_set;
        number pak_12_in1;
        number pak_12_in2;
        number pak_12_in3;
        number pak_12_in4;
        number pak_12_in5;
        number pak_12_in6;
        number pak_12_in7;
        number pak_12_in8;
        list scale_13_input;
        number scale_13_inlow;
        number scale_13_inhigh;
        number scale_13_outlow;
        number scale_13_outhigh;
        number scale_13_power;
        list scale_13_out;
        number random_13_limit;
        number random_13_seed;
        number numberobj_126_value;
        number numbertilde_05_input_number;
        number numbertilde_05_ramp;
        number numberobj_127_value;
        number receive_31_output_number;
        list receive_31_output_list;
        list scale_14_input;
        number scale_14_inlow;
        number scale_14_inhigh;
        number scale_14_outlow;
        number scale_14_outhigh;
        number scale_14_power;
        list scale_14_out;
        number random_14_limit;
        number random_14_seed;
        number numberobj_128_value;
        number numberobj_129_value;
        number receive_32_output_number;
        list receive_32_output_list;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[5];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        list linetilde_09_activeRamps;
        number linetilde_09_currentValue;
        number toggle_06_lastValue;
        UInt random_09_nz_state[4] = { };
        MillisecondTime metro_03_last;
        MillisecondTime metro_03_next;
        list linetilde_10_activeRamps;
        number linetilde_10_currentValue;
        UInt random_10_nz_state[4] = { };
        Int numberobj_120_currentFormat;
        number numberobj_120_lastValue;
        SampleIndex numbertilde_04_currentInterval;
        SampleIndex numbertilde_04_currentIntervalInSamples;
        number numbertilde_04_lastValue;
        number numbertilde_04_outValue;
        number numbertilde_04_rampInSamples;
        Int numbertilde_04_currentMode;
        number numbertilde_04_smooth_d_prev;
        number numbertilde_04_smooth_prev;
        number numbertilde_04_smooth_index;
        number numbertilde_04_smooth_increment;
        bool numbertilde_04_setupDone;
        Int numberobj_121_currentFormat;
        number numberobj_121_lastValue;
        Int numberobj_122_currentFormat;
        number numberobj_122_lastValue;
        list linetilde_11_activeRamps;
        number linetilde_11_currentValue;
        Int numberobj_123_currentFormat;
        number numberobj_123_lastValue;
        Int numberobj_124_currentFormat;
        number numberobj_124_lastValue;
        number toggle_07_lastValue;
        UInt random_11_nz_state[4] = { };
        MillisecondTime metro_04_last;
        MillisecondTime metro_04_next;
        list linetilde_12_activeRamps;
        number linetilde_12_currentValue;
        UInt random_12_nz_state[4] = { };
        Int numberobj_125_currentFormat;
        number numberobj_125_lastValue;
        UInt random_13_nz_state[4] = { };
        Int numberobj_126_currentFormat;
        number numberobj_126_lastValue;
        SampleIndex numbertilde_05_currentInterval;
        SampleIndex numbertilde_05_currentIntervalInSamples;
        number numbertilde_05_lastValue;
        number numbertilde_05_outValue;
        number numbertilde_05_rampInSamples;
        Int numbertilde_05_currentMode;
        number numbertilde_05_smooth_d_prev;
        number numbertilde_05_smooth_prev;
        number numbertilde_05_smooth_index;
        number numbertilde_05_smooth_increment;
        bool numbertilde_05_setupDone;
        Int numberobj_127_currentFormat;
        number numberobj_127_lastValue;
        UInt random_14_nz_state[4] = { };
        Int numberobj_128_currentFormat;
        number numberobj_128_lastValue;
        Int numberobj_129_currentFormat;
        number numberobj_129_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

rnbomatic()
{
}

~rnbomatic()
{
    delete this->p_14;
    delete this->p_15;
}

rnbomatic* getTopLevelPatcher() {
    return this;
}

void cancelClockEvents()
{
    getEngine()->flushClockEvents(this, 892732297, false);
    getEngine()->flushClockEvents(this, 2098551528, false);
    getEngine()->flushClockEvents(this, -1494586265, false);
}

template <typename T> void listquicksort(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    if (l < h) {
        Int p = (Int)(this->listpartition(arr, sortindices, l, h, ascending));
        this->listquicksort(arr, sortindices, l, p - 1, ascending);
        this->listquicksort(arr, sortindices, p + 1, h, ascending);
    }
}

template <typename T> Int listpartition(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    number x = arr[(Index)h];
    Int i = (Int)(l - 1);

    for (Int j = (Int)(l); j <= h - 1; j++) {
        bool asc = (bool)((bool)(ascending) && arr[(Index)j] <= x);
        bool desc = (bool)((bool)(!(bool)(ascending)) && arr[(Index)j] >= x);

        if ((bool)(asc) || (bool)(desc)) {
            i++;
            this->listswapelements(arr, i, j);
            this->listswapelements(sortindices, i, j);
        }
    }

    i++;
    this->listswapelements(arr, i, h);
    this->listswapelements(sortindices, i, h);
    return i;
}

template <typename T> void listswapelements(T& arr, Int a, Int b) {
    auto tmp = arr[(Index)a];
    arr[(Index)a] = arr[(Index)b];
    arr[(Index)b] = tmp;
}

number mstosamps(MillisecondTime ms) {
    return ms * this->sr * 0.001;
}

number samplerate() const {
    return this->sr;
}

Index vectorsize() const {
    return this->vs;
}

number maximum(number x, number y) {
    return (x < y ? y : x);
}

MillisecondTime sampstoms(number samps) {
    return samps * 1000 / this->sr;
}

Index getNumMidiInputPorts() const {
    return 0;
}

void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}

Index getNumMidiOutputPorts() const {
    return 0;
}

void process(
    const SampleValue * const* inputs,
    Index numInputs,
    SampleValue * const* outputs,
    Index numOutputs,
    Index n
) {
    this->vs = n;
    this->updateTime(this->getEngine()->getCurrentTime());
    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
    const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
    const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);

    this->recordtilde_01_perform(
        this->recordtilde_01_record,
        this->recordtilde_01_begin,
        this->recordtilde_01_end,
        in1,
        this->signals[0],
        n
    );

    this->numbertilde_06_perform(this->signals[0], this->dummyBuffer, n);
    this->p_14_perform(in1, in2, this->signals[0], this->signals[1], n);
    this->p_15_perform(this->signals[0], this->signals[1], out1, out2, n);

    this->recordtilde_02_perform(
        this->recordtilde_02_record,
        this->recordtilde_02_begin,
        this->recordtilde_02_end,
        in2,
        this->signals[1],
        n
    );

    this->numbertilde_07_perform(this->signals[1], this->dummyBuffer, n);
    this->stackprotect_perform(n);
    this->globaltransport_advance();
    this->audioProcessSampleCount += this->vs;
}

void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
        Index i;

        for (i = 0; i < 2; i++) {
            this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
        }

        this->globaltransport_tempo = resizeSignal(this->globaltransport_tempo, this->maxvs, maxBlockSize);
        this->globaltransport_state = resizeSignal(this->globaltransport_state, this->maxvs, maxBlockSize);
        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
        this->didAllocateSignals = true;
    }

    const bool sampleRateChanged = sampleRate != this->sr;
    const bool maxvsChanged = maxBlockSize != this->maxvs;
    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;

    if (sampleRateChanged || maxvsChanged) {
        this->vs = maxBlockSize;
        this->maxvs = maxBlockSize;
        this->sr = sampleRate;
        this->invsr = 1 / sampleRate;
    }

    this->numbertilde_06_dspsetup(forceDSPSetup);
    this->numbertilde_07_dspsetup(forceDSPSetup);
    this->data_01_dspsetup(forceDSPSetup);
    this->data_02_dspsetup(forceDSPSetup);
    this->globaltransport_dspsetup(forceDSPSetup);
    this->p_14->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_15->prepareToProcess(sampleRate, maxBlockSize, force);

    if (sampleRateChanged)
        this->onSampleRateChanged(sampleRate);
}

void setProbingTarget(MessageTag id) {
    switch (id) {
    default:
        {
        this->setProbingIndex(-1);
        break;
        }
    }
}

void setProbingIndex(ProbingIndex ) {}

Index getProbingChannels(MessageTag outletId) const {
    RNBO_UNUSED(outletId);
    return 0;
}

DataRef* getDataRef(DataRefIndex index)  {
    switch (index) {
    case 0:
        {
        return addressOf(this->buff1);
        break;
        }
    case 1:
        {
        return addressOf(this->buff2);
        break;
        }
    default:
        {
        return nullptr;
        }
    }
}

DataRefIndex getNumDataRefs() const {
    return 2;
}

void fillDataRef(DataRefIndex , DataRef& ) {}

void zeroDataRef(DataRef& ref) {
    ref->setZero();
}

void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
    this->updateTime(time);

    if (index == 0) {
        this->recordtilde_01_buffer = new Float32Buffer(this->buff1);
        this->data_02_buffer = new Float32Buffer(this->buff1);
        this->data_02_bufferUpdated();
    }

    if (index == 1) {
        this->recordtilde_02_buffer = new Float32Buffer(this->buff2);
        this->data_01_buffer = new Float32Buffer(this->buff2);
        this->data_01_bufferUpdated();
    }

    this->p_14->processDataViewUpdate(index, time);
    this->p_15->processDataViewUpdate(index, time);
}

void initialize() {
    this->buff1 = initDataRef("buff1", false, nullptr, "buffer~");
    this->buff2 = initDataRef("buff2", false, nullptr, "buffer~");
    this->assign_defaults();
    this->setState();
    this->buff1->setIndex(0);
    this->recordtilde_01_buffer = new Float32Buffer(this->buff1);
    this->data_02_buffer = new Float32Buffer(this->buff1);
    this->buff2->setIndex(1);
    this->recordtilde_02_buffer = new Float32Buffer(this->buff2);
    this->data_01_buffer = new Float32Buffer(this->buff2);
    this->initializeObjects();
    this->allocateDataRefs();
    this->startup();
}

Index getIsMuted()  {
    return this->isMuted;
}

void setIsMuted(Index v)  {
    this->isMuted = v;
}

void onSampleRateChanged(double ) {}

void processTempoEvent(MillisecondTime time, Tempo tempo) {
    this->updateTime(time);

    if (this->globaltransport_setTempo(this->_currentTime, tempo, false)) {
        this->p_14->processTempoEvent(time, tempo);
        this->p_15->processTempoEvent(time, tempo);
    }
}

void processTransportEvent(MillisecondTime time, TransportState state) {
    this->updateTime(time);

    if (this->globaltransport_setState(this->_currentTime, state, false)) {
        this->p_14->processTransportEvent(time, state);
        this->p_15->processTransportEvent(time, state);
    }
}

void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
    this->updateTime(time);

    if (this->globaltransport_setBeatTime(this->_currentTime, beattime, false)) {
        this->p_14->processBeatTimeEvent(time, beattime);
        this->p_15->processBeatTimeEvent(time, beattime);
    }
}

void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
    this->updateTime(time);

    if (this->globaltransport_setTimeSignature(this->_currentTime, numerator, denominator, false)) {
        this->p_14->processTimeSignatureEvent(time, numerator, denominator);
        this->p_15->processTimeSignatureEvent(time, numerator, denominator);
    }
}

void processBBUEvent(MillisecondTime time, number bars, number beats, number units) {
    this->updateTime(time);

    if (this->globaltransport_setBBU(this->_currentTime, bars, beats, units, false)) {
        this->p_14->processBBUEvent(time, bars, beats, units);
        this->p_15->processBBUEvent(time, bars, beats, units);
    }
}

Index getPatcherSerial() const {
    return 0;
}

void getState(PatcherStateInterface& ) {}

void setState() {
    this->p_14 = new RNBOSubpatcher_29();
    this->p_14->setEngineAndPatcher(this->getEngine(), this);
    this->p_14->initialize();
    this->p_14->setParameterOffset(this->getParameterOffset(this->p_14));
    this->p_15 = new RNBOSubpatcher_30();
    this->p_15->setEngineAndPatcher(this->getEngine(), this);
    this->p_15->initialize();
    this->p_15->setParameterOffset(this->getParameterOffset(this->p_15));
}

void getPreset(PatcherStateInterface& preset) {
    preset["__presetid"] = "rnbo";
    this->param_01_getPresetValue(getSubState(preset, "cutout-stereoify"));
    this->param_02_getPresetValue(getSubState(preset, "cutout-depth-max"));
    this->param_03_getPresetValue(getSubState(preset, "stutter-trigger"));
    this->param_04_getPresetValue(getSubState(preset, "stutter-probability"));
    this->param_05_getPresetValue(getSubState(preset, "stutter-loop-min"));
    this->param_06_getPresetValue(getSubState(preset, "stutter-quantize"));
    this->param_07_getPresetValue(getSubState(preset, "stutter-onoff"));
    this->param_08_getPresetValue(getSubState(preset, "stutter-loop-max"));
    this->param_09_getPresetValue(getSubState(preset, "cutout-length-min"));
    this->param_10_getPresetValue(getSubState(preset, "cutout-rate-min"));
    this->param_11_getPresetValue(getSubState(preset, "stutter-quantize-mode"));
    this->param_12_getPresetValue(getSubState(preset, "stutter-stereoize"));
    this->param_13_getPresetValue(getSubState(preset, "stutter-rate-min"));
    this->param_14_getPresetValue(getSubState(preset, "cutout-length-max"));
    this->param_15_getPresetValue(getSubState(preset, "cutout-rate-max"));
    this->param_16_getPresetValue(getSubState(preset, "stutter-mode"));
    this->param_17_getPresetValue(getSubState(preset, "stutter-rate-max"));
    this->param_18_getPresetValue(getSubState(preset, "cutout-onoff"));
    this->param_19_getPresetValue(getSubState(preset, "cutout-depth-min"));
    this->p_14->getPreset(getSubState(getSubState(preset, "__sps"), "STUTTER"));
    this->p_15->getPreset(getSubState(getSubState(preset, "__sps"), "CUTS"));
}

void setPreset(MillisecondTime time, PatcherStateInterface& preset) {
    this->updateTime(time);
    this->param_01_setPresetValue(getSubState(preset, "cutout-stereoify"));
    this->param_02_setPresetValue(getSubState(preset, "cutout-depth-max"));
    this->param_03_setPresetValue(getSubState(preset, "stutter-trigger"));
    this->param_04_setPresetValue(getSubState(preset, "stutter-probability"));
    this->param_05_setPresetValue(getSubState(preset, "stutter-loop-min"));
    this->param_06_setPresetValue(getSubState(preset, "stutter-quantize"));
    this->param_07_setPresetValue(getSubState(preset, "stutter-onoff"));
    this->param_08_setPresetValue(getSubState(preset, "stutter-loop-max"));
    this->param_09_setPresetValue(getSubState(preset, "cutout-length-min"));
    this->param_10_setPresetValue(getSubState(preset, "cutout-rate-min"));
    this->param_11_setPresetValue(getSubState(preset, "stutter-quantize-mode"));
    this->param_12_setPresetValue(getSubState(preset, "stutter-stereoize"));
    this->param_13_setPresetValue(getSubState(preset, "stutter-rate-min"));
    this->param_14_setPresetValue(getSubState(preset, "cutout-length-max"));
    this->param_15_setPresetValue(getSubState(preset, "cutout-rate-max"));
    this->param_16_setPresetValue(getSubState(preset, "stutter-mode"));
    this->param_17_setPresetValue(getSubState(preset, "stutter-rate-max"));
    this->param_18_setPresetValue(getSubState(preset, "cutout-onoff"));
    this->param_19_setPresetValue(getSubState(preset, "cutout-depth-min"));
}

void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
    this->updateTime(time);

    switch (index) {
    case 0:
        {
        this->param_07_value_set(v);
        break;
        }
    case 1:
        {
        this->param_12_value_set(v);
        break;
        }
    case 2:
        {
        this->param_16_value_set(v);
        break;
        }
    case 3:
        {
        this->param_06_value_set(v);
        break;
        }
    case 4:
        {
        this->param_11_value_set(v);
        break;
        }
    case 5:
        {
        this->param_03_value_set(v);
        break;
        }
    case 6:
        {
        this->param_05_value_set(v);
        break;
        }
    case 7:
        {
        this->param_08_value_set(v);
        break;
        }
    case 8:
        {
        this->param_04_value_set(v);
        break;
        }
    case 9:
        {
        this->param_13_value_set(v);
        break;
        }
    case 10:
        {
        this->param_17_value_set(v);
        break;
        }
    case 11:
        {
        this->param_18_value_set(v);
        break;
        }
    case 12:
        {
        this->param_01_value_set(v);
        break;
        }
    case 13:
        {
        this->param_09_value_set(v);
        break;
        }
    case 14:
        {
        this->param_14_value_set(v);
        break;
        }
    case 15:
        {
        this->param_19_value_set(v);
        break;
        }
    case 16:
        {
        this->param_02_value_set(v);
        break;
        }
    case 17:
        {
        this->param_10_value_set(v);
        break;
        }
    case 18:
        {
        this->param_15_value_set(v);
        break;
        }
    default:
        {
        index -= 19;

        if (index < this->p_14->getNumParameters())
            this->p_14->setParameterValue(index, v, time);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            this->p_15->setParameterValue(index, v, time);

        break;
        }
    }
}

void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValue(index, value, time);
}

void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
    this->setParameterValue(index, this->getParameterValue(index), time);
}

void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValueNormalized(index, value, time);
}

ParameterValue getParameterValue(ParameterIndex index)  {
    switch (index) {
    case 0:
        {
        return this->param_07_value;
        }
    case 1:
        {
        return this->param_12_value;
        }
    case 2:
        {
        return this->param_16_value;
        }
    case 3:
        {
        return this->param_06_value;
        }
    case 4:
        {
        return this->param_11_value;
        }
    case 5:
        {
        return this->param_03_value;
        }
    case 6:
        {
        return this->param_05_value;
        }
    case 7:
        {
        return this->param_08_value;
        }
    case 8:
        {
        return this->param_04_value;
        }
    case 9:
        {
        return this->param_13_value;
        }
    case 10:
        {
        return this->param_17_value;
        }
    case 11:
        {
        return this->param_18_value;
        }
    case 12:
        {
        return this->param_01_value;
        }
    case 13:
        {
        return this->param_09_value;
        }
    case 14:
        {
        return this->param_14_value;
        }
    case 15:
        {
        return this->param_19_value;
        }
    case 16:
        {
        return this->param_02_value;
        }
    case 17:
        {
        return this->param_10_value;
        }
    case 18:
        {
        return this->param_15_value;
        }
    default:
        {
        index -= 19;

        if (index < this->p_14->getNumParameters())
            return this->p_14->getParameterValue(index);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->getParameterValue(index);

        return 0;
        }
    }
}

ParameterIndex getNumSignalInParameters() const {
    return 0;
}

ParameterIndex getNumSignalOutParameters() const {
    return 0;
}

ParameterIndex getNumParameters() const {
    return 19 + this->p_14->getNumParameters() + this->p_15->getNumParameters();
}

ConstCharPointer getParameterName(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "stutter-onoff";
        }
    case 1:
        {
        return "stutter-stereoize";
        }
    case 2:
        {
        return "stutter-mode";
        }
    case 3:
        {
        return "stutter-quantize";
        }
    case 4:
        {
        return "stutter-quantize-mode";
        }
    case 5:
        {
        return "stutter-trigger";
        }
    case 6:
        {
        return "stutter-loop-min";
        }
    case 7:
        {
        return "stutter-loop-max";
        }
    case 8:
        {
        return "stutter-probability";
        }
    case 9:
        {
        return "stutter-rate-min";
        }
    case 10:
        {
        return "stutter-rate-max";
        }
    case 11:
        {
        return "cutout-onoff";
        }
    case 12:
        {
        return "cutout-stereoify";
        }
    case 13:
        {
        return "cutout-length-min";
        }
    case 14:
        {
        return "cutout-length-max";
        }
    case 15:
        {
        return "cutout-depth-min";
        }
    case 16:
        {
        return "cutout-depth-max";
        }
    case 17:
        {
        return "cutout-rate-min";
        }
    case 18:
        {
        return "cutout-rate-max";
        }
    default:
        {
        index -= 19;

        if (index < this->p_14->getNumParameters())
            return this->p_14->getParameterName(index);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->getParameterName(index);

        return "bogus";
        }
    }
}

ConstCharPointer getParameterId(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "stutter-onoff";
        }
    case 1:
        {
        return "stutter-stereoize";
        }
    case 2:
        {
        return "stutter-mode";
        }
    case 3:
        {
        return "stutter-quantize";
        }
    case 4:
        {
        return "stutter-quantize-mode";
        }
    case 5:
        {
        return "stutter-trigger";
        }
    case 6:
        {
        return "stutter-loop-min";
        }
    case 7:
        {
        return "stutter-loop-max";
        }
    case 8:
        {
        return "stutter-probability";
        }
    case 9:
        {
        return "stutter-rate-min";
        }
    case 10:
        {
        return "stutter-rate-max";
        }
    case 11:
        {
        return "cutout-onoff";
        }
    case 12:
        {
        return "cutout-stereoify";
        }
    case 13:
        {
        return "cutout-length-min";
        }
    case 14:
        {
        return "cutout-length-max";
        }
    case 15:
        {
        return "cutout-depth-min";
        }
    case 16:
        {
        return "cutout-depth-max";
        }
    case 17:
        {
        return "cutout-rate-min";
        }
    case 18:
        {
        return "cutout-rate-max";
        }
    default:
        {
        index -= 19;

        if (index < this->p_14->getNumParameters())
            return this->p_14->getParameterId(index);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->getParameterId(index);

        return "bogus";
        }
    }
}

void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
    {
        switch (index) {
        case 0:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 2;
            static const char * eVal0[] = {"Off", "On"};
            info->enumValues = eVal0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Stutter On/Off";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 1:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 2;
            static const char * eVal1[] = {"Off", "On"};
            info->enumValues = eVal1;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Stutter Stereoify";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 2:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 2;
            static const char * eVal2[] = {"Manual", "Randomizer"};
            info->enumValues = eVal2;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Stutter Mode";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 3:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 2;
            static const char * eVal3[] = {"Off", "On"};
            info->enumValues = eVal3;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Stutter Quantize";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 4:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 3;
            info->exponent = 1;
            info->steps = 4;
            static const char * eVal4[] = {"Straight", "Dotted", "Triplet", "Quint"};
            info->enumValues = eVal4;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Stutter Quantize Mode";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 5:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 2;
            static const char * eVal5[] = {"Off", "On"};
            info->enumValues = eVal5;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Stutter Trigger";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 6:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 25;
            info->min = 10;
            info->max = 5000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Stutter Loop Min.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 7:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 250;
            info->min = 10;
            info->max = 5000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Stutter Loop Max.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 8:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 50;
            info->min = 0;
            info->max = 100;
            info->exponent = 1;
            info->steps = 101;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Stutter Probability";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 9:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 500;
            info->min = 50;
            info->max = 5000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Stutter Rate Min.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 10:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1500;
            info->min = 50;
            info->max = 5000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Stutter Rate Max.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 11:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 2;
            static const char * eVal11[] = {"Off", "On"};
            info->enumValues = eVal11;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Cut On/Off";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 12:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 2;
            static const char * eVal12[] = {"Off", "On"};
            info->enumValues = eVal12;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Cut Stereoify";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 13:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 1;
            info->max = 5000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Cutout Length Min.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 14:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 20;
            info->min = 1;
            info->max = 5000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Cutout Length Max.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 15:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 100;
            info->min = 0;
            info->max = 100;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Cutout Depth Min.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 16:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 100;
            info->min = 0;
            info->max = 100;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Cutout Depth Max.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 17:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 1;
            info->max = 5000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Cutout Rate Min.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 18:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 600;
            info->min = 1;
            info->max = 5000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "Cutout Rate Max.";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        default:
            {
            index -= 19;

            if (index < this->p_14->getNumParameters())
                this->p_14->getParameterInfo(index, info);

            index -= this->p_14->getNumParameters();

            if (index < this->p_15->getNumParameters())
                this->p_15->getParameterInfo(index, info);

            break;
            }
        }
    }
}

void sendParameter(ParameterIndex index, bool ignoreValue) {
    this->getEngine()->notifyParameterValueChanged(index, (ignoreValue ? 0 : this->getParameterValue(index)), ignoreValue);
}

ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
    if (subpatcher == this->p_14)
        return 19;

    if (subpatcher == this->p_15)
        return 19 + this->p_14->getNumParameters();

    return 0;
}

ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
    if (steps == 1) {
        if (normalizedValue > 0) {
            normalizedValue = 1.;
        }
    } else {
        ParameterValue oneStep = (number)1. / (steps - 1);
        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
        normalizedValue = numberOfSteps * oneStep;
    }

    return normalizedValue;
}

ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 11:
    case 12:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            ParameterValue normalizedValue = (value - 0) / (1 - 0);

            {
                normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 2);
            }

            return normalizedValue;
        }
        }
    case 4:
        {
        {
            value = (value < 0 ? 0 : (value > 3 ? 3 : value));
            ParameterValue normalizedValue = (value - 0) / (3 - 0);

            {
                normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 4);
            }

            return normalizedValue;
        }
        }
    case 15:
    case 16:
        {
        {
            value = (value < 0 ? 0 : (value > 100 ? 100 : value));
            ParameterValue normalizedValue = (value - 0) / (100 - 0);
            return normalizedValue;
        }
        }
    case 8:
        {
        {
            value = (value < 0 ? 0 : (value > 100 ? 100 : value));
            ParameterValue normalizedValue = (value - 0) / (100 - 0);

            {
                normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 101);
            }

            return normalizedValue;
        }
        }
    case 13:
    case 14:
    case 17:
    case 18:
        {
        {
            value = (value < 1 ? 1 : (value > 5000 ? 5000 : value));
            ParameterValue normalizedValue = (value - 1) / (5000 - 1);
            return normalizedValue;
        }
        }
    case 6:
    case 7:
        {
        {
            value = (value < 10 ? 10 : (value > 5000 ? 5000 : value));
            ParameterValue normalizedValue = (value - 10) / (5000 - 10);
            return normalizedValue;
        }
        }
    case 9:
    case 10:
        {
        {
            value = (value < 50 ? 50 : (value > 5000 ? 5000 : value));
            ParameterValue normalizedValue = (value - 50) / (5000 - 50);
            return normalizedValue;
        }
        }
    default:
        {
        index -= 19;

        if (index < this->p_14->getNumParameters())
            return this->p_14->convertToNormalizedParameterValue(index, value);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->convertToNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    value = (value < 0 ? 0 : (value > 1 ? 1 : value));

    switch (index) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 11:
    case 12:
        {
        {
            {
                value = this->applyStepsToNormalizedParameterValue(value, 2);
            }

            {
                return 0 + value * (1 - 0);
            }
        }
        }
    case 4:
        {
        {
            {
                value = this->applyStepsToNormalizedParameterValue(value, 4);
            }

            {
                return 0 + value * (3 - 0);
            }
        }
        }
    case 15:
    case 16:
        {
        {
            {
                return 0 + value * (100 - 0);
            }
        }
        }
    case 8:
        {
        {
            {
                value = this->applyStepsToNormalizedParameterValue(value, 101);
            }

            {
                return 0 + value * (100 - 0);
            }
        }
        }
    case 13:
    case 14:
    case 17:
    case 18:
        {
        {
            {
                return 1 + value * (5000 - 1);
            }
        }
        }
    case 6:
    case 7:
        {
        {
            {
                return 10 + value * (5000 - 10);
            }
        }
        }
    case 9:
    case 10:
        {
        {
            {
                return 50 + value * (5000 - 50);
            }
        }
        }
    default:
        {
        index -= 19;

        if (index < this->p_14->getNumParameters())
            return this->p_14->convertFromNormalizedParameterValue(index, value);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->convertFromNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
        {
        return this->param_07_value_constrain(value);
        }
    case 1:
        {
        return this->param_12_value_constrain(value);
        }
    case 2:
        {
        return this->param_16_value_constrain(value);
        }
    case 3:
        {
        return this->param_06_value_constrain(value);
        }
    case 4:
        {
        return this->param_11_value_constrain(value);
        }
    case 5:
        {
        return this->param_03_value_constrain(value);
        }
    case 6:
        {
        return this->param_05_value_constrain(value);
        }
    case 7:
        {
        return this->param_08_value_constrain(value);
        }
    case 8:
        {
        return this->param_04_value_constrain(value);
        }
    case 9:
        {
        return this->param_13_value_constrain(value);
        }
    case 10:
        {
        return this->param_17_value_constrain(value);
        }
    case 11:
        {
        return this->param_18_value_constrain(value);
        }
    case 12:
        {
        return this->param_01_value_constrain(value);
        }
    case 13:
        {
        return this->param_09_value_constrain(value);
        }
    case 14:
        {
        return this->param_14_value_constrain(value);
        }
    case 15:
        {
        return this->param_19_value_constrain(value);
        }
    case 16:
        {
        return this->param_02_value_constrain(value);
        }
    case 17:
        {
        return this->param_10_value_constrain(value);
        }
    case 18:
        {
        return this->param_15_value_constrain(value);
        }
    default:
        {
        index -= 19;

        if (index < this->p_14->getNumParameters())
            return this->p_14->constrainParameterValue(index, value);

        index -= this->p_14->getNumParameters();

        if (index < this->p_15->getNumParameters())
            return this->p_15->constrainParameterValue(index, value);

        return value;
        }
    }
}

void scheduleParamInit(ParameterIndex index, Index order) {
    this->paramInitIndices->push(index);
    this->paramInitOrder->push(order);
}

void processParamInitEvents() {
    this->listquicksort(
        this->paramInitOrder,
        this->paramInitIndices,
        0,
        (int)(this->paramInitOrder->length - 1),
        true
    );

    for (Index i = 0; i < this->paramInitOrder->length; i++) {
        this->getEngine()->scheduleParameterBang(this->paramInitIndices[i], 0);
    }
}

void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
    RNBO_UNUSED(hasValue);
    this->updateTime(time);

    switch (index) {
    case 892732297:
        {
        this->loadmess_07_startupbang_bang();
        break;
        }
    case 2098551528:
        {
        this->numbertilde_06_value_set(value);
        break;
        }
    case -1494586265:
        {
        this->numbertilde_07_value_set(value);
        break;
        }
    }
}

void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}

void processOutletEvent(
    EngineLink* sender,
    OutletIndex index,
    ParameterValue value,
    MillisecondTime time
) {
    this->updateTime(time);
    this->processOutletAtCurrentTime(sender, index, value);
}

void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
    this->updateTime(time);

    switch (tag) {
    case TAG("valin"):
        {
        if (TAG("number_obj-115") == objectId)
            this->numberobj_130_valin_set(payload);

        if (TAG("number_obj-107") == objectId)
            this->numberobj_131_valin_set(payload);

        if (TAG("number_obj-46") == objectId)
            this->numberobj_132_valin_set(payload);

        if (TAG("number_obj-40") == objectId)
            this->numberobj_133_valin_set(payload);

        if (TAG("number_obj-32") == objectId)
            this->numberobj_134_valin_set(payload);

        if (TAG("toggle_obj-31") == objectId)
            this->toggle_08_valin_set(payload);

        if (TAG("toggle_obj-6") == objectId)
            this->toggle_09_valin_set(payload);

        if (TAG("number_obj-23") == objectId)
            this->numberobj_135_valin_set(payload);

        if (TAG("number_obj-62") == objectId)
            this->numberobj_136_valin_set(payload);

        if (TAG("number_obj-44") == objectId)
            this->numberobj_137_valin_set(payload);

        if (TAG("number_obj-34") == objectId)
            this->numberobj_138_valin_set(payload);

        if (TAG("number_obj-109") == objectId)
            this->numberobj_139_valin_set(payload);

        if (TAG("number_obj-100") == objectId)
            this->numberobj_140_valin_set(payload);

        if (TAG("toggle_obj-12") == objectId)
            this->toggle_10_valin_set(payload);

        if (TAG("number_obj-19") == objectId)
            this->numberobj_141_valin_set(payload);

        if (TAG("number_obj-64") == objectId)
            this->numberobj_142_valin_set(payload);

        if (TAG("number_obj-58") == objectId)
            this->numberobj_143_valin_set(payload);

        if (TAG("number_obj-35") == objectId)
            this->numberobj_144_valin_set(payload);

        if (TAG("number_obj-111") == objectId)
            this->numberobj_145_valin_set(payload);

        if (TAG("number_obj-103") == objectId)
            this->numberobj_146_valin_set(payload);

        if (TAG("number_obj-60") == objectId)
            this->numberobj_147_valin_set(payload);

        if (TAG("number_obj-39") == objectId)
            this->numberobj_148_valin_set(payload);

        if (TAG("number_obj-113") == objectId)
            this->numberobj_149_valin_set(payload);

        if (TAG("number_obj-105") == objectId)
            this->numberobj_150_valin_set(payload);

        break;
        }
    case TAG("format"):
        {
        if (TAG("number_obj-115") == objectId)
            this->numberobj_130_format_set(payload);

        if (TAG("number_obj-107") == objectId)
            this->numberobj_131_format_set(payload);

        if (TAG("number_obj-46") == objectId)
            this->numberobj_132_format_set(payload);

        if (TAG("number_obj-40") == objectId)
            this->numberobj_133_format_set(payload);

        if (TAG("number_obj-32") == objectId)
            this->numberobj_134_format_set(payload);

        if (TAG("number_obj-23") == objectId)
            this->numberobj_135_format_set(payload);

        if (TAG("number_obj-62") == objectId)
            this->numberobj_136_format_set(payload);

        if (TAG("number_obj-44") == objectId)
            this->numberobj_137_format_set(payload);

        if (TAG("number_obj-34") == objectId)
            this->numberobj_138_format_set(payload);

        if (TAG("number_obj-109") == objectId)
            this->numberobj_139_format_set(payload);

        if (TAG("number_obj-100") == objectId)
            this->numberobj_140_format_set(payload);

        if (TAG("number_obj-19") == objectId)
            this->numberobj_141_format_set(payload);

        if (TAG("number_obj-64") == objectId)
            this->numberobj_142_format_set(payload);

        if (TAG("number_obj-58") == objectId)
            this->numberobj_143_format_set(payload);

        if (TAG("number_obj-35") == objectId)
            this->numberobj_144_format_set(payload);

        if (TAG("number_obj-111") == objectId)
            this->numberobj_145_format_set(payload);

        if (TAG("number_obj-103") == objectId)
            this->numberobj_146_format_set(payload);

        if (TAG("number_obj-60") == objectId)
            this->numberobj_147_format_set(payload);

        if (TAG("number_obj-39") == objectId)
            this->numberobj_148_format_set(payload);

        if (TAG("number_obj-113") == objectId)
            this->numberobj_149_format_set(payload);

        if (TAG("number_obj-105") == objectId)
            this->numberobj_150_format_set(payload);

        break;
        }
    case TAG("sig"):
        {
        if (TAG("number~_obj-8") == objectId)
            this->numbertilde_06_sig_number_set(payload);

        if (TAG("number~_obj-15") == objectId)
            this->numbertilde_07_sig_number_set(payload);

        break;
        }
    case TAG("mode"):
        {
        if (TAG("number~_obj-8") == objectId)
            this->numbertilde_06_mode_set(payload);

        if (TAG("number~_obj-15") == objectId)
            this->numbertilde_07_mode_set(payload);

        break;
        }
    }

    this->p_14->processNumMessage(tag, objectId, time, payload);
    this->p_15->processNumMessage(tag, objectId, time, payload);
}

void processListMessage(
    MessageTag tag,
    MessageTag objectId,
    MillisecondTime time,
    const list& payload
) {
    this->updateTime(time);

    switch (tag) {
    case TAG("sig"):
        {
        if (TAG("number~_obj-8") == objectId)
            this->numbertilde_06_sig_list_set(payload);

        if (TAG("number~_obj-15") == objectId)
            this->numbertilde_07_sig_list_set(payload);

        break;
        }
    }

    this->p_14->processListMessage(tag, objectId, time, payload);
    this->p_15->processListMessage(tag, objectId, time, payload);
}

void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
    this->updateTime(time);

    switch (tag) {
    case TAG("startupbang"):
        {
        if (TAG("loadmess_obj-5") == objectId)
            this->loadmess_07_startupbang_bang();

        break;
        }
    }

    this->p_14->processBangMessage(tag, objectId, time);
    this->p_15->processBangMessage(tag, objectId, time);
}

MessageTagInfo resolveTag(MessageTag tag) const {
    switch (tag) {
    case TAG("valout"):
        {
        return "valout";
        }
    case TAG("number_obj-115"):
        {
        return "number_obj-115";
        }
    case TAG("setup"):
        {
        return "setup";
        }
    case TAG("number_obj-107"):
        {
        return "number_obj-107";
        }
    case TAG("number_obj-46"):
        {
        return "number_obj-46";
        }
    case TAG("number_obj-40"):
        {
        return "number_obj-40";
        }
    case TAG("number_obj-32"):
        {
        return "number_obj-32";
        }
    case TAG("toggle_obj-31"):
        {
        return "toggle_obj-31";
        }
    case TAG("toggle_obj-6"):
        {
        return "toggle_obj-6";
        }
    case TAG("monitor"):
        {
        return "monitor";
        }
    case TAG("number~_obj-8"):
        {
        return "number~_obj-8";
        }
    case TAG("assign"):
        {
        return "assign";
        }
    case TAG("number_obj-23"):
        {
        return "number_obj-23";
        }
    case TAG("number_obj-62"):
        {
        return "number_obj-62";
        }
    case TAG("number_obj-44"):
        {
        return "number_obj-44";
        }
    case TAG("number_obj-34"):
        {
        return "number_obj-34";
        }
    case TAG("number_obj-109"):
        {
        return "number_obj-109";
        }
    case TAG("number_obj-100"):
        {
        return "number_obj-100";
        }
    case TAG("toggle_obj-12"):
        {
        return "toggle_obj-12";
        }
    case TAG("number~_obj-15"):
        {
        return "number~_obj-15";
        }
    case TAG("number_obj-19"):
        {
        return "number_obj-19";
        }
    case TAG("number_obj-64"):
        {
        return "number_obj-64";
        }
    case TAG("number_obj-58"):
        {
        return "number_obj-58";
        }
    case TAG("number_obj-35"):
        {
        return "number_obj-35";
        }
    case TAG("number_obj-111"):
        {
        return "number_obj-111";
        }
    case TAG("number_obj-103"):
        {
        return "number_obj-103";
        }
    case TAG("number_obj-60"):
        {
        return "number_obj-60";
        }
    case TAG("number_obj-39"):
        {
        return "number_obj-39";
        }
    case TAG("number_obj-113"):
        {
        return "number_obj-113";
        }
    case TAG("number_obj-105"):
        {
        return "number_obj-105";
        }
    case TAG("valin"):
        {
        return "valin";
        }
    case TAG("format"):
        {
        return "format";
        }
    case TAG("sig"):
        {
        return "sig";
        }
    case TAG("mode"):
        {
        return "mode";
        }
    case TAG("startupbang"):
        {
        return "startupbang";
        }
    case TAG("loadmess_obj-5"):
        {
        return "loadmess_obj-5";
        }
    }

    auto subpatchResult_0 = this->p_14->resolveTag(tag);

    if (subpatchResult_0)
        return subpatchResult_0;

    auto subpatchResult_1 = this->p_15->resolveTag(tag);

    if (subpatchResult_1)
        return subpatchResult_1;

    return "";
}

MessageIndex getNumMessages() const {
    return 0;
}

const MessageInfo& getMessageInfo(MessageIndex index) const {
    switch (index) {

    }

    return NullMessageInfo;
}

protected:

void param_07_value_set(number v) {
    v = this->param_07_value_constrain(v);
    this->param_07_value = v;
    this->sendParameter(0, false);

    if (this->param_07_value != this->param_07_lastValue) {
        this->getEngine()->presetTouched();
        this->param_07_lastValue = this->param_07_value;
    }

    this->numberobj_137_value_set(v);
}

void param_12_value_set(number v) {
    v = this->param_12_value_constrain(v);
    this->param_12_value = v;
    this->sendParameter(1, false);

    if (this->param_12_value != this->param_12_lastValue) {
        this->getEngine()->presetTouched();
        this->param_12_lastValue = this->param_12_value;
    }

    this->numberobj_143_value_set(v);
}

void param_16_value_set(number v) {
    v = this->param_16_value_constrain(v);
    this->param_16_value = v;
    this->sendParameter(2, false);

    if (this->param_16_value != this->param_16_lastValue) {
        this->getEngine()->presetTouched();
        this->param_16_lastValue = this->param_16_value;
    }

    this->numberobj_147_value_set(v);
}

void param_06_value_set(number v) {
    v = this->param_06_value_constrain(v);
    this->param_06_value = v;
    this->sendParameter(3, false);

    if (this->param_06_value != this->param_06_lastValue) {
        this->getEngine()->presetTouched();
        this->param_06_lastValue = this->param_06_value;
    }

    this->numberobj_136_value_set(v);
}

void param_11_value_set(number v) {
    v = this->param_11_value_constrain(v);
    this->param_11_value = v;
    this->sendParameter(4, false);

    if (this->param_11_value != this->param_11_lastValue) {
        this->getEngine()->presetTouched();
        this->param_11_lastValue = this->param_11_value;
    }

    this->numberobj_142_value_set(v);
}

void param_03_value_set(number v) {
    v = this->param_03_value_constrain(v);
    this->param_03_value = v;
    this->sendParameter(5, false);

    if (this->param_03_value != this->param_03_lastValue) {
        this->getEngine()->presetTouched();
        this->param_03_lastValue = this->param_03_value;
    }

    this->numberobj_132_value_set(v);
}

void param_05_value_set(number v) {
    v = this->param_05_value_constrain(v);
    this->param_05_value = v;
    this->sendParameter(6, false);

    if (this->param_05_value != this->param_05_lastValue) {
        this->getEngine()->presetTouched();
        this->param_05_lastValue = this->param_05_value;
    }

    this->numberobj_134_value_set(v);
}

void param_08_value_set(number v) {
    v = this->param_08_value_constrain(v);
    this->param_08_value = v;
    this->sendParameter(7, false);

    if (this->param_08_value != this->param_08_lastValue) {
        this->getEngine()->presetTouched();
        this->param_08_lastValue = this->param_08_value;
    }

    this->numberobj_138_value_set(v);
}

void param_04_value_set(number v) {
    v = this->param_04_value_constrain(v);
    this->param_04_value = v;
    this->sendParameter(8, false);

    if (this->param_04_value != this->param_04_lastValue) {
        this->getEngine()->presetTouched();
        this->param_04_lastValue = this->param_04_value;
    }

    this->numberobj_133_value_set(v);
}

void param_13_value_set(number v) {
    v = this->param_13_value_constrain(v);
    this->param_13_value = v;
    this->sendParameter(9, false);

    if (this->param_13_value != this->param_13_lastValue) {
        this->getEngine()->presetTouched();
        this->param_13_lastValue = this->param_13_value;
    }

    this->numberobj_144_value_set(v);
}

void param_17_value_set(number v) {
    v = this->param_17_value_constrain(v);
    this->param_17_value = v;
    this->sendParameter(10, false);

    if (this->param_17_value != this->param_17_lastValue) {
        this->getEngine()->presetTouched();
        this->param_17_lastValue = this->param_17_value;
    }

    this->numberobj_148_value_set(v);
}

void param_18_value_set(number v) {
    v = this->param_18_value_constrain(v);
    this->param_18_value = v;
    this->sendParameter(11, false);

    if (this->param_18_value != this->param_18_lastValue) {
        this->getEngine()->presetTouched();
        this->param_18_lastValue = this->param_18_value;
    }

    this->numberobj_149_value_set(v);
}

void param_01_value_set(number v) {
    v = this->param_01_value_constrain(v);
    this->param_01_value = v;
    this->sendParameter(12, false);

    if (this->param_01_value != this->param_01_lastValue) {
        this->getEngine()->presetTouched();
        this->param_01_lastValue = this->param_01_value;
    }

    this->numberobj_130_value_set(v);
}

void param_09_value_set(number v) {
    v = this->param_09_value_constrain(v);
    this->param_09_value = v;
    this->sendParameter(13, false);

    if (this->param_09_value != this->param_09_lastValue) {
        this->getEngine()->presetTouched();
        this->param_09_lastValue = this->param_09_value;
    }

    this->numberobj_139_value_set(v);
}

void param_14_value_set(number v) {
    v = this->param_14_value_constrain(v);
    this->param_14_value = v;
    this->sendParameter(14, false);

    if (this->param_14_value != this->param_14_lastValue) {
        this->getEngine()->presetTouched();
        this->param_14_lastValue = this->param_14_value;
    }

    this->numberobj_145_value_set(v);
}

void param_19_value_set(number v) {
    v = this->param_19_value_constrain(v);
    this->param_19_value = v;
    this->sendParameter(15, false);

    if (this->param_19_value != this->param_19_lastValue) {
        this->getEngine()->presetTouched();
        this->param_19_lastValue = this->param_19_value;
    }

    this->numberobj_150_value_set(v);
}

void param_02_value_set(number v) {
    v = this->param_02_value_constrain(v);
    this->param_02_value = v;
    this->sendParameter(16, false);

    if (this->param_02_value != this->param_02_lastValue) {
        this->getEngine()->presetTouched();
        this->param_02_lastValue = this->param_02_value;
    }

    this->numberobj_131_value_set(v);
}

void param_10_value_set(number v) {
    v = this->param_10_value_constrain(v);
    this->param_10_value = v;
    this->sendParameter(17, false);

    if (this->param_10_value != this->param_10_lastValue) {
        this->getEngine()->presetTouched();
        this->param_10_lastValue = this->param_10_value;
    }

    this->numberobj_140_value_set(v);
}

void param_15_value_set(number v) {
    v = this->param_15_value_constrain(v);
    this->param_15_value = v;
    this->sendParameter(18, false);

    if (this->param_15_value != this->param_15_lastValue) {
        this->getEngine()->presetTouched();
        this->param_15_lastValue = this->param_15_value;
    }

    this->numberobj_146_value_set(v);
}

void numberobj_130_valin_set(number v) {
    this->numberobj_130_value_set(v);
}

void numberobj_130_format_set(number v) {
    this->numberobj_130_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_131_valin_set(number v) {
    this->numberobj_131_value_set(v);
}

void numberobj_131_format_set(number v) {
    this->numberobj_131_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_132_valin_set(number v) {
    this->numberobj_132_value_set(v);
}

void numberobj_132_format_set(number v) {
    this->numberobj_132_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_133_valin_set(number v) {
    this->numberobj_133_value_set(v);
}

void numberobj_133_format_set(number v) {
    this->numberobj_133_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_134_valin_set(number v) {
    this->numberobj_134_value_set(v);
}

void numberobj_134_format_set(number v) {
    this->numberobj_134_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void toggle_08_valin_set(number v) {
    this->toggle_08_value_number_set(v);
}

void toggle_09_valin_set(number v) {
    this->toggle_09_value_number_set(v);
}

void numbertilde_06_sig_number_set(number v) {
    this->numbertilde_06_outValue = v;
}

void numbertilde_06_sig_list_set(const list& v) {
    this->numbertilde_06_outValue = v[0];
}

void numbertilde_06_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_06_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_06_currentMode = 1;
    }
}

void loadmess_07_startupbang_bang() {
    this->loadmess_07_message_bang();
}

void numberobj_135_valin_set(number v) {
    this->numberobj_135_value_set(v);
}

void numberobj_135_format_set(number v) {
    this->numberobj_135_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_136_valin_set(number v) {
    this->numberobj_136_value_set(v);
}

void numberobj_136_format_set(number v) {
    this->numberobj_136_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_137_valin_set(number v) {
    this->numberobj_137_value_set(v);
}

void numberobj_137_format_set(number v) {
    this->numberobj_137_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_138_valin_set(number v) {
    this->numberobj_138_value_set(v);
}

void numberobj_138_format_set(number v) {
    this->numberobj_138_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_139_valin_set(number v) {
    this->numberobj_139_value_set(v);
}

void numberobj_139_format_set(number v) {
    this->numberobj_139_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_140_valin_set(number v) {
    this->numberobj_140_value_set(v);
}

void numberobj_140_format_set(number v) {
    this->numberobj_140_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void toggle_10_valin_set(number v) {
    this->toggle_10_value_number_set(v);
}

void numbertilde_07_sig_number_set(number v) {
    this->numbertilde_07_outValue = v;
}

void numbertilde_07_sig_list_set(const list& v) {
    this->numbertilde_07_outValue = v[0];
}

void numbertilde_07_mode_set(number v) {
    if (v == 1) {
        this->numbertilde_07_currentMode = 0;
    } else if (v == 2) {
        this->numbertilde_07_currentMode = 1;
    }
}

void numberobj_141_valin_set(number v) {
    this->numberobj_141_value_set(v);
}

void numberobj_141_format_set(number v) {
    this->numberobj_141_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_142_valin_set(number v) {
    this->numberobj_142_value_set(v);
}

void numberobj_142_format_set(number v) {
    this->numberobj_142_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_143_valin_set(number v) {
    this->numberobj_143_value_set(v);
}

void numberobj_143_format_set(number v) {
    this->numberobj_143_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_144_valin_set(number v) {
    this->numberobj_144_value_set(v);
}

void numberobj_144_format_set(number v) {
    this->numberobj_144_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_145_valin_set(number v) {
    this->numberobj_145_value_set(v);
}

void numberobj_145_format_set(number v) {
    this->numberobj_145_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_146_valin_set(number v) {
    this->numberobj_146_value_set(v);
}

void numberobj_146_format_set(number v) {
    this->numberobj_146_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_147_valin_set(number v) {
    this->numberobj_147_value_set(v);
}

void numberobj_147_format_set(number v) {
    this->numberobj_147_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_148_valin_set(number v) {
    this->numberobj_148_value_set(v);
}

void numberobj_148_format_set(number v) {
    this->numberobj_148_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_149_valin_set(number v) {
    this->numberobj_149_value_set(v);
}

void numberobj_149_format_set(number v) {
    this->numberobj_149_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_150_valin_set(number v) {
    this->numberobj_150_value_set(v);
}

void numberobj_150_format_set(number v) {
    this->numberobj_150_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numbertilde_06_value_set(number v) {
    this->numberobj_135_value_set(v);
}

void numbertilde_07_value_set(number v) {
    this->numberobj_141_value_set(v);
}

number msToSamps(MillisecondTime ms, number sampleRate) {
    return ms * sampleRate * 0.001;
}

MillisecondTime sampsToMs(SampleIndex samps) {
    return samps * (this->invsr * 1000);
}

Index getMaxBlockSize() const {
    return this->maxvs;
}

number getSampleRate() const {
    return this->sr;
}

bool hasFixedVectorSize() const {
    return false;
}

Index getNumInputChannels() const {
    return 2;
}

Index getNumOutputChannels() const {
    return 2;
}

void allocateDataRefs() {
    this->p_14->allocateDataRefs();
    this->p_15->allocateDataRefs();
    this->data_02_buffer->requestSize(this->mstosamps(30000), 1);
    this->data_02_buffer->setSampleRate(this->sr);
    this->data_01_buffer->requestSize(this->mstosamps(30000), 1);
    this->data_01_buffer->setSampleRate(this->sr);
    this->recordtilde_01_buffer = this->recordtilde_01_buffer->allocateIfNeeded();
    this->data_02_buffer = this->data_02_buffer->allocateIfNeeded();

    if (this->buff1->hasRequestedSize()) {
        if (this->buff1->wantsFill())
            this->zeroDataRef(this->buff1);

        this->getEngine()->sendDataRefUpdated(0);
    }

    this->recordtilde_02_buffer = this->recordtilde_02_buffer->allocateIfNeeded();
    this->data_01_buffer = this->data_01_buffer->allocateIfNeeded();

    if (this->buff2->hasRequestedSize()) {
        if (this->buff2->wantsFill())
            this->zeroDataRef(this->buff2);

        this->getEngine()->sendDataRefUpdated(1);
    }
}

void initializeObjects() {
    this->numberobj_130_init();
    this->numberobj_131_init();
    this->numberobj_132_init();
    this->numberobj_133_init();
    this->numberobj_134_init();
    this->numbertilde_06_init();
    this->numberobj_135_init();
    this->numberobj_136_init();
    this->numberobj_137_init();
    this->numberobj_138_init();
    this->numberobj_139_init();
    this->numberobj_140_init();
    this->numbertilde_07_init();
    this->numberobj_141_init();
    this->numberobj_142_init();
    this->numberobj_143_init();
    this->numberobj_144_init();
    this->numberobj_145_init();
    this->numberobj_146_init();
    this->data_01_init();
    this->data_02_init();
    this->numberobj_147_init();
    this->numberobj_148_init();
    this->numberobj_149_init();
    this->numberobj_150_init();
    this->p_14->initializeObjects();
    this->p_15->initializeObjects();
}

void sendOutlet(OutletIndex index, ParameterValue value) {
    this->getEngine()->sendOutlet(this, index, value);
}

void startup() {
    this->updateTime(this->getEngine()->getCurrentTime());
    this->p_14->startup();
    this->p_15->startup();
    this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;

    {
        this->scheduleParamInit(0, 0);
    }

    {
        this->scheduleParamInit(1, 0);
    }

    {
        this->scheduleParamInit(2, 0);
    }

    {
        this->scheduleParamInit(3, 0);
    }

    {
        this->scheduleParamInit(4, 0);
    }

    {
        this->scheduleParamInit(5, 0);
    }

    {
        this->scheduleParamInit(6, 0);
    }

    {
        this->scheduleParamInit(7, 0);
    }

    {
        this->scheduleParamInit(8, 0);
    }

    {
        this->scheduleParamInit(9, 0);
    }

    {
        this->scheduleParamInit(10, 0);
    }

    {
        this->scheduleParamInit(11, 0);
    }

    {
        this->scheduleParamInit(12, 0);
    }

    {
        this->scheduleParamInit(13, 0);
    }

    {
        this->scheduleParamInit(14, 0);
    }

    {
        this->scheduleParamInit(15, 0);
    }

    {
        this->scheduleParamInit(16, 0);
    }

    {
        this->scheduleParamInit(17, 0);
    }

    {
        this->scheduleParamInit(18, 0);
    }

    this->processParamInitEvents();
}

number param_07_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));

    {
        number oneStep = (number)1 / (number)1;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_14_target_stutteronoff_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->receive_24_output_number_set(v);
}

void send_11_input_number_set(number v) {
    this->send_11_input_number = v;
    this->p_14_target_stutteronoff_number_set(v);
}

void numberobj_137_output_set(number v) {
    this->send_11_input_number_set(v);
}

void numberobj_137_value_set(number v) {
    this->numberobj_137_value_setter(v);
    v = this->numberobj_137_value;
    number localvalue = v;

    if (this->numberobj_137_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-44"), localvalue, this->_currentTime);
    this->numberobj_137_output_set(localvalue);
}

number param_12_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));

    {
        number oneStep = (number)1 / (number)1;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_14_target_stutterstereo_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->p_09_target_stutterstereo_number_set(v);
    this->p_14->updateTime(this->_currentTime);
    this->p_14->p_10_target_stutterstereo_number_set(v);
    this->p_14->updateTime(this->_currentTime);
    this->p_14->receive_20_output_number_set(v);
}

void send_17_input_number_set(number v) {
    this->send_17_input_number = v;
    this->p_14_target_stutterstereo_number_set(v);
}

void numberobj_143_output_set(number v) {
    this->send_17_input_number_set(v);
}

void numberobj_143_value_set(number v) {
    this->numberobj_143_value_setter(v);
    v = this->numberobj_143_value;
    number localvalue = v;

    if (this->numberobj_143_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-58"), localvalue, this->_currentTime);
    this->numberobj_143_output_set(localvalue);
}

number param_16_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));

    {
        number oneStep = (number)1 / (number)1;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_14_source_stutrateright_bang_bang() {}

void p_14_source_stutrateleft_bang_bang() {}

void p_14_target_stuttermode_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->p_06_target_stuttermode_number_set(v);
    this->p_14->updateTime(this->_currentTime);
    this->p_14->p_08_target_stuttermode_number_set(v);
    this->p_14->updateTime(this->_currentTime);
    this->p_14->receive_19_output_number_set(v);
}

void send_21_input_number_set(number v) {
    this->send_21_input_number = v;
    this->p_14_target_stuttermode_number_set(v);
}

void numberobj_147_output_set(number v) {
    this->send_21_input_number_set(v);
}

void numberobj_147_value_set(number v) {
    this->numberobj_147_value_setter(v);
    v = this->numberobj_147_value;
    number localvalue = v;

    if (this->numberobj_147_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-60"), localvalue, this->_currentTime);
    this->numberobj_147_output_set(localvalue);
}

number param_06_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));

    {
        number oneStep = (number)1 / (number)1;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_14_target_stutterquant_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->receive_23_output_number_set(v);
}

void send_10_input_number_set(number v) {
    this->send_10_input_number = v;
    this->p_14_target_stutterquant_number_set(v);
}

void numberobj_136_output_set(number v) {
    this->send_10_input_number_set(v);
}

void numberobj_136_value_set(number v) {
    this->numberobj_136_value_setter(v);
    v = this->numberobj_136_value;
    number localvalue = v;

    if (this->numberobj_136_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-62"), localvalue, this->_currentTime);
    this->numberobj_136_output_set(localvalue);
}

number param_11_value_constrain(number v) const {
    v = (v > 3 ? 3 : (v < 0 ? 0 : v));

    {
        number oneStep = (number)3 / (number)3;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_14_target_stutterquantmode_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->p_11_target_stutterquantmode_number_set(v);
}

void send_16_input_number_set(number v) {
    this->send_16_input_number = v;
    this->p_14_target_stutterquantmode_number_set(v);
}

void numberobj_142_output_set(number v) {
    this->send_16_input_number_set(v);
}

void numberobj_142_value_set(number v) {
    this->numberobj_142_value_setter(v);
    v = this->numberobj_142_value;
    number localvalue = v;

    if (this->numberobj_142_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-64"), localvalue, this->_currentTime);
    this->numberobj_142_output_set(localvalue);
}

number param_03_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));

    {
        number oneStep = (number)1 / (number)1;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_14_target_stuttertrigger_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->p_06_target_stuttertrigger_number_set(v);
    this->p_14->updateTime(this->_currentTime);
    this->p_14->p_08_target_stuttertrigger_number_set(v);
    this->p_14->updateTime(this->_currentTime);
    this->p_14->receive_18_output_number_set(v);
}

void send_06_input_number_set(number v) {
    this->send_06_input_number = v;
    this->p_14_target_stuttertrigger_number_set(v);
}

void numberobj_132_output_set(number v) {
    this->send_06_input_number_set(v);
}

void numberobj_132_value_set(number v) {
    this->numberobj_132_value_setter(v);
    v = this->numberobj_132_value;
    number localvalue = v;

    if (this->numberobj_132_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-46"), localvalue, this->_currentTime);
    this->numberobj_132_output_set(localvalue);
}

number param_05_value_constrain(number v) const {
    v = (v > 5000 ? 5000 : (v < 10 ? 10 : v));
    return v;
}

void p_14_target_stutterloopmin_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->receive_16_output_number_set(v);
}

void send_08_input_number_set(number v) {
    this->send_08_input_number = v;
    this->p_14_target_stutterloopmin_number_set(v);
}

void numberobj_134_output_set(number v) {
    this->send_08_input_number_set(v);
}

void numberobj_134_value_set(number v) {
    this->numberobj_134_value_setter(v);
    v = this->numberobj_134_value;
    number localvalue = v;

    if (this->numberobj_134_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-32"), localvalue, this->_currentTime);
    this->numberobj_134_output_set(localvalue);
}

number param_08_value_constrain(number v) const {
    v = (v > 5000 ? 5000 : (v < 10 ? 10 : v));
    return v;
}

void p_14_target_stutterloopmax_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->receive_17_output_number_set(v);
}

void send_12_input_number_set(number v) {
    this->send_12_input_number = v;
    this->p_14_target_stutterloopmax_number_set(v);
}

void numberobj_138_output_set(number v) {
    this->send_12_input_number_set(v);
}

void numberobj_138_value_set(number v) {
    this->numberobj_138_value_setter(v);
    v = this->numberobj_138_value;
    number localvalue = v;

    if (this->numberobj_138_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-34"), localvalue, this->_currentTime);
    this->numberobj_138_output_set(localvalue);
}

number param_04_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < 0 ? 0 : v));

    {
        number oneStep = (number)100 / (number)100;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_14_target_stutterlikeli_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->p_06_target_stutterlikeli_number_set(v);
    this->p_14->updateTime(this->_currentTime);
    this->p_14->p_08_target_stutterlikeli_number_set(v);
}

void send_07_input_number_set(number v) {
    this->send_07_input_number = v;
    this->p_14_target_stutterlikeli_number_set(v);
}

void numberobj_133_output_set(number v) {
    this->send_07_input_number_set(v);
}

void numberobj_133_value_set(number v) {
    this->numberobj_133_value_setter(v);
    v = this->numberobj_133_value;
    number localvalue = v;

    if (this->numberobj_133_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-40"), localvalue, this->_currentTime);
    this->numberobj_133_output_set(localvalue);
}

number param_13_value_constrain(number v) const {
    v = (v > 5000 ? 5000 : (v < 50 ? 50 : v));
    return v;
}

void p_14_target_stutterratemin_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->receive_21_output_number_set(v);
}

void send_18_input_number_set(number v) {
    this->send_18_input_number = v;
    this->p_14_target_stutterratemin_number_set(v);
}

void numberobj_144_output_set(number v) {
    this->send_18_input_number_set(v);
}

void numberobj_144_value_set(number v) {
    this->numberobj_144_value_setter(v);
    v = this->numberobj_144_value;
    number localvalue = v;

    if (this->numberobj_144_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-35"), localvalue, this->_currentTime);
    this->numberobj_144_output_set(localvalue);
}

number param_17_value_constrain(number v) const {
    v = (v > 5000 ? 5000 : (v < 50 ? 50 : v));
    return v;
}

void p_14_target_stutterratemax_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->receive_22_output_number_set(v);
}

void send_22_input_number_set(number v) {
    this->send_22_input_number = v;
    this->p_14_target_stutterratemax_number_set(v);
}

void numberobj_148_output_set(number v) {
    this->send_22_input_number_set(v);
}

void numberobj_148_value_set(number v) {
    this->numberobj_148_value_setter(v);
    v = this->numberobj_148_value;
    number localvalue = v;

    if (this->numberobj_148_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-39"), localvalue, this->_currentTime);
    this->numberobj_148_output_set(localvalue);
}

number param_18_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));

    {
        number oneStep = (number)1 / (number)1;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_15_target_cutonoff_number_set(number v) {
    this->p_15->updateTime(this->_currentTime);
    this->p_15->receive_25_output_number_set(v);
}

void send_23_input_number_set(number v) {
    this->send_23_input_number = v;
    this->p_15_target_cutonoff_number_set(v);
}

void numberobj_149_output_set(number v) {
    this->send_23_input_number_set(v);
}

void numberobj_149_value_set(number v) {
    this->numberobj_149_value_setter(v);
    v = this->numberobj_149_value;
    number localvalue = v;

    if (this->numberobj_149_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-113"), localvalue, this->_currentTime);
    this->numberobj_149_output_set(localvalue);
}

number param_01_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));

    {
        number oneStep = (number)1 / (number)1;
        number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
        number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
        v = numberOfSteps * oneStep;
    }

    return v;
}

void p_15_target_cutstereo_number_set(number v) {
    this->p_15->updateTime(this->_currentTime);
    this->p_15->receive_28_output_number_set(v);
}

void send_04_input_number_set(number v) {
    this->send_04_input_number = v;
    this->p_15_target_cutstereo_number_set(v);
}

void numberobj_130_output_set(number v) {
    this->send_04_input_number_set(v);
}

void numberobj_130_value_set(number v) {
    this->numberobj_130_value_setter(v);
    v = this->numberobj_130_value;
    number localvalue = v;

    if (this->numberobj_130_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-115"), localvalue, this->_currentTime);
    this->numberobj_130_output_set(localvalue);
}

number param_09_value_constrain(number v) const {
    v = (v > 5000 ? 5000 : (v < 1 ? 1 : v));
    return v;
}

void p_15_target_cutlengthmin_number_set(number v) {
    this->p_15->updateTime(this->_currentTime);
    this->p_15->receive_31_output_number_set(v);
}

void send_13_input_number_set(number v) {
    this->send_13_input_number = v;
    this->p_15_target_cutlengthmin_number_set(v);
}

void numberobj_139_output_set(number v) {
    this->send_13_input_number_set(v);
}

void numberobj_139_value_set(number v) {
    this->numberobj_139_value_setter(v);
    v = this->numberobj_139_value;
    number localvalue = v;

    if (this->numberobj_139_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-109"), localvalue, this->_currentTime);
    this->numberobj_139_output_set(localvalue);
}

number param_14_value_constrain(number v) const {
    v = (v > 5000 ? 5000 : (v < 1 ? 1 : v));
    return v;
}

void p_15_target_cutlengthmax_number_set(number v) {
    this->p_15->updateTime(this->_currentTime);
    this->p_15->receive_32_output_number_set(v);
}

void send_19_input_number_set(number v) {
    this->send_19_input_number = v;
    this->p_15_target_cutlengthmax_number_set(v);
}

void numberobj_145_output_set(number v) {
    this->send_19_input_number_set(v);
}

void numberobj_145_value_set(number v) {
    this->numberobj_145_value_setter(v);
    v = this->numberobj_145_value;
    number localvalue = v;

    if (this->numberobj_145_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-111"), localvalue, this->_currentTime);
    this->numberobj_145_output_set(localvalue);
}

number param_19_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < 0 ? 0 : v));
    return v;
}

void p_15_target_cutdepthmin_number_set(number v) {
    this->p_15->updateTime(this->_currentTime);
    this->p_15->receive_29_output_number_set(v);
}

void send_24_input_number_set(number v) {
    this->send_24_input_number = v;
    this->p_15_target_cutdepthmin_number_set(v);
}

void numberobj_150_output_set(number v) {
    this->send_24_input_number_set(v);
}

void numberobj_150_value_set(number v) {
    this->numberobj_150_value_setter(v);
    v = this->numberobj_150_value;
    number localvalue = v;

    if (this->numberobj_150_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-105"), localvalue, this->_currentTime);
    this->numberobj_150_output_set(localvalue);
}

number param_02_value_constrain(number v) const {
    v = (v > 100 ? 100 : (v < 0 ? 0 : v));
    return v;
}

void p_15_target_cutdepthmax_number_set(number v) {
    this->p_15->updateTime(this->_currentTime);
    this->p_15->receive_30_output_number_set(v);
}

void send_05_input_number_set(number v) {
    this->send_05_input_number = v;
    this->p_15_target_cutdepthmax_number_set(v);
}

void numberobj_131_output_set(number v) {
    this->send_05_input_number_set(v);
}

void numberobj_131_value_set(number v) {
    this->numberobj_131_value_setter(v);
    v = this->numberobj_131_value;
    number localvalue = v;

    if (this->numberobj_131_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-107"), localvalue, this->_currentTime);
    this->numberobj_131_output_set(localvalue);
}

number param_10_value_constrain(number v) const {
    v = (v > 5000 ? 5000 : (v < 1 ? 1 : v));
    return v;
}

void p_15_target_cutratemin_number_set(number v) {
    this->p_15->updateTime(this->_currentTime);
    this->p_15->receive_26_output_number_set(v);
}

void send_14_input_number_set(number v) {
    this->send_14_input_number = v;
    this->p_15_target_cutratemin_number_set(v);
}

void numberobj_140_output_set(number v) {
    this->send_14_input_number_set(v);
}

void numberobj_140_value_set(number v) {
    this->numberobj_140_value_setter(v);
    v = this->numberobj_140_value;
    number localvalue = v;

    if (this->numberobj_140_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-100"), localvalue, this->_currentTime);
    this->numberobj_140_output_set(localvalue);
}

number param_15_value_constrain(number v) const {
    v = (v > 5000 ? 5000 : (v < 1 ? 1 : v));
    return v;
}

void p_15_target_cutratemax_number_set(number v) {
    this->p_15->updateTime(this->_currentTime);
    this->p_15->receive_27_output_number_set(v);
}

void send_20_input_number_set(number v) {
    this->send_20_input_number = v;
    this->p_15_target_cutratemax_number_set(v);
}

void numberobj_146_output_set(number v) {
    this->send_20_input_number_set(v);
}

void numberobj_146_value_set(number v) {
    this->numberobj_146_value_setter(v);
    v = this->numberobj_146_value;
    number localvalue = v;

    if (this->numberobj_146_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-103"), localvalue, this->_currentTime);
    this->numberobj_146_output_set(localvalue);
}

void toggle_08_output_set(number v) {
    this->numberobj_132_value_set(v);
}

void toggle_08_value_number_set(number v) {
    this->toggle_08_value_number_setter(v);
    v = this->toggle_08_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-31"), v, this->_currentTime);
    this->toggle_08_output_set(v);
}

void recordtilde_01_record_set(number v) {
    this->recordtilde_01_record = v;
}

void toggle_09_output_set(number v) {
    this->recordtilde_01_record_set(v);
}

void toggle_09_value_number_set(number v) {
    this->toggle_09_value_number_setter(v);
    v = this->toggle_09_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-6"), v, this->_currentTime);
    this->toggle_09_output_set(v);
}

void recordtilde_02_record_set(number v) {
    this->recordtilde_02_record = v;
}

void toggle_10_output_set(number v) {
    this->recordtilde_02_record_set(v);
}

void toggle_10_value_number_set(number v) {
    this->toggle_10_value_number_setter(v);
    v = this->toggle_10_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-12"), v, this->_currentTime);
    this->toggle_10_output_set(v);
}

void loadmess_07_message_bang() {
    list v = this->loadmess_07_message;

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->toggle_10_value_number_set(converted);
    }

    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->toggle_09_value_number_set(converted);
    }
}

void p_14_target_buff1_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->p_05_target_buff1_number_set(v);
    this->p_14->updateTime(this->_currentTime);
    this->p_14->p_07_target_buff1_number_set(v);
}

void send_09_input_number_set(number v) {
    this->send_09_input_number = v;
    this->p_14_target_buff1_number_set(v);
}

void numberobj_135_output_set(number v) {
    this->send_09_input_number_set(v);
}

void numberobj_135_value_set(number v) {
    this->numberobj_135_value_setter(v);
    v = this->numberobj_135_value;
    number localvalue = v;

    if (this->numberobj_135_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-23"), localvalue, this->_currentTime);
    this->numberobj_135_output_set(localvalue);
}

void p_14_target_buff2_number_set(number v) {
    this->p_14->updateTime(this->_currentTime);
    this->p_14->p_09_target_buff2_number_set(v);
    this->p_14->updateTime(this->_currentTime);
    this->p_14->p_10_target_buff2_number_set(v);
}

void send_15_input_number_set(number v) {
    this->send_15_input_number = v;
    this->p_14_target_buff2_number_set(v);
}

void numberobj_141_output_set(number v) {
    this->send_15_input_number_set(v);
}

void numberobj_141_value_set(number v) {
    this->numberobj_141_value_setter(v);
    v = this->numberobj_141_value;
    number localvalue = v;

    if (this->numberobj_141_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-19"), localvalue, this->_currentTime);
    this->numberobj_141_output_set(localvalue);
}

void p_14_source_transport_number_set(number ) {}

void recordtilde_01_perform(
    number record,
    number begin,
    number end,
    const SampleValue * input1,
    SampleValue * sync,
    Index n
) {
    RNBO_UNUSED(input1);
    RNBO_UNUSED(end);
    RNBO_UNUSED(begin);
    auto __recordtilde_01_loop = this->recordtilde_01_loop;
    auto __recordtilde_01_wIndex = this->recordtilde_01_wIndex;
    auto __recordtilde_01_lastRecord = this->recordtilde_01_lastRecord;
    auto __recordtilde_01_buffer = this->recordtilde_01_buffer;
    ConstSampleArray<1> input = {input1};
    number bufferSize = __recordtilde_01_buffer->getSize();
    number srInv = (number)1 / this->samplerate();

    if (bufferSize > 0) {
        number maxChannel = __recordtilde_01_buffer->getChannels();
        number touched = false;

        for (Index i = 0; i < n; i++) {
            number loopBegin = 0;
            number loopEnd = bufferSize;

            if (loopEnd > loopBegin) {
                {
                    if ((bool)(record) && __recordtilde_01_lastRecord != record) {
                        __recordtilde_01_wIndex = loopBegin;
                    }
                }

                if (record != 0 && __recordtilde_01_wIndex < loopEnd) {
                    for (number channel = 0; channel < 1; channel++) {
                        number effectiveChannel = channel + 0;

                        if (effectiveChannel < maxChannel) {
                            __recordtilde_01_buffer->setSample(channel, __recordtilde_01_wIndex, input[(Index)channel][(Index)i]);
                            touched = true;
                        } else
                            break;
                    }

                    __recordtilde_01_wIndex++;

                    if ((bool)(__recordtilde_01_loop) && __recordtilde_01_wIndex >= loopEnd) {
                        __recordtilde_01_wIndex = loopBegin;
                    }

                    {
                        sync[(Index)i] = this->recordtilde_01_calcSync(__recordtilde_01_wIndex, loopBegin, loopEnd - loopBegin, bufferSize, srInv);
                    }
                } else {
                    sync[(Index)i] = 0;
                }

                {
                    __recordtilde_01_lastRecord = record;
                }
            }
        }

        if ((bool)(touched)) {
            __recordtilde_01_buffer->setTouched(true);
            __recordtilde_01_buffer->setSampleRate(this->samplerate());
        }
    }

    this->recordtilde_01_lastRecord = __recordtilde_01_lastRecord;
    this->recordtilde_01_wIndex = __recordtilde_01_wIndex;
}

void numbertilde_06_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_06_currentIntervalInSamples = this->numbertilde_06_currentIntervalInSamples;
    auto __numbertilde_06_lastValue = this->numbertilde_06_lastValue;
    auto __numbertilde_06_currentInterval = this->numbertilde_06_currentInterval;
    auto __numbertilde_06_rampInSamples = this->numbertilde_06_rampInSamples;
    auto __numbertilde_06_outValue = this->numbertilde_06_outValue;
    auto __numbertilde_06_currentMode = this->numbertilde_06_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_06_currentMode == 0) {
            output[(Index)i] = this->numbertilde_06_smooth_next(
                __numbertilde_06_outValue,
                __numbertilde_06_rampInSamples,
                __numbertilde_06_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_06_currentInterval -= n;

    if (monitorvalue != __numbertilde_06_lastValue && __numbertilde_06_currentInterval <= 0) {
        __numbertilde_06_currentInterval = __numbertilde_06_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            2098551528,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_06_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-8"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_06_currentInterval = __numbertilde_06_currentInterval;
    this->numbertilde_06_lastValue = __numbertilde_06_lastValue;
}

void p_14_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out3,
    SampleValue * out4,
    Index n
) {
    // subpatcher: STUTTER
    ConstSampleArray<2> ins = {in1, in2};

    SampleArray<2> outs = {out3, out4};
    this->p_14->process(ins, 2, outs, 2, n);
}

void p_15_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out1,
    SampleValue * out2,
    Index n
) {
    // subpatcher: CUTS
    ConstSampleArray<2> ins = {in1, in2};

    SampleArray<2> outs = {out1, out2};
    this->p_15->process(ins, 2, outs, 2, n);
}

void recordtilde_02_perform(
    number record,
    number begin,
    number end,
    const SampleValue * input1,
    SampleValue * sync,
    Index n
) {
    RNBO_UNUSED(input1);
    RNBO_UNUSED(end);
    RNBO_UNUSED(begin);
    auto __recordtilde_02_loop = this->recordtilde_02_loop;
    auto __recordtilde_02_wIndex = this->recordtilde_02_wIndex;
    auto __recordtilde_02_lastRecord = this->recordtilde_02_lastRecord;
    auto __recordtilde_02_buffer = this->recordtilde_02_buffer;
    ConstSampleArray<1> input = {input1};
    number bufferSize = __recordtilde_02_buffer->getSize();
    number srInv = (number)1 / this->samplerate();

    if (bufferSize > 0) {
        number maxChannel = __recordtilde_02_buffer->getChannels();
        number touched = false;

        for (Index i = 0; i < n; i++) {
            number loopBegin = 0;
            number loopEnd = bufferSize;

            if (loopEnd > loopBegin) {
                {
                    if ((bool)(record) && __recordtilde_02_lastRecord != record) {
                        __recordtilde_02_wIndex = loopBegin;
                    }
                }

                if (record != 0 && __recordtilde_02_wIndex < loopEnd) {
                    for (number channel = 0; channel < 1; channel++) {
                        number effectiveChannel = channel + 0;

                        if (effectiveChannel < maxChannel) {
                            __recordtilde_02_buffer->setSample(channel, __recordtilde_02_wIndex, input[(Index)channel][(Index)i]);
                            touched = true;
                        } else
                            break;
                    }

                    __recordtilde_02_wIndex++;

                    if ((bool)(__recordtilde_02_loop) && __recordtilde_02_wIndex >= loopEnd) {
                        __recordtilde_02_wIndex = loopBegin;
                    }

                    {
                        sync[(Index)i] = this->recordtilde_02_calcSync(__recordtilde_02_wIndex, loopBegin, loopEnd - loopBegin, bufferSize, srInv);
                    }
                } else {
                    sync[(Index)i] = 0;
                }

                {
                    __recordtilde_02_lastRecord = record;
                }
            }
        }

        if ((bool)(touched)) {
            __recordtilde_02_buffer->setTouched(true);
            __recordtilde_02_buffer->setSampleRate(this->samplerate());
        }
    }

    this->recordtilde_02_lastRecord = __recordtilde_02_lastRecord;
    this->recordtilde_02_wIndex = __recordtilde_02_wIndex;
}

void numbertilde_07_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
    auto __numbertilde_07_currentIntervalInSamples = this->numbertilde_07_currentIntervalInSamples;
    auto __numbertilde_07_lastValue = this->numbertilde_07_lastValue;
    auto __numbertilde_07_currentInterval = this->numbertilde_07_currentInterval;
    auto __numbertilde_07_rampInSamples = this->numbertilde_07_rampInSamples;
    auto __numbertilde_07_outValue = this->numbertilde_07_outValue;
    auto __numbertilde_07_currentMode = this->numbertilde_07_currentMode;
    number monitorvalue = input_signal[0];

    for (Index i = 0; i < n; i++) {
        if (__numbertilde_07_currentMode == 0) {
            output[(Index)i] = this->numbertilde_07_smooth_next(
                __numbertilde_07_outValue,
                __numbertilde_07_rampInSamples,
                __numbertilde_07_rampInSamples
            );
        } else {
            output[(Index)i] = input_signal[(Index)i];
        }
    }

    __numbertilde_07_currentInterval -= n;

    if (monitorvalue != __numbertilde_07_lastValue && __numbertilde_07_currentInterval <= 0) {
        __numbertilde_07_currentInterval = __numbertilde_07_currentIntervalInSamples;

        this->getEngine()->scheduleClockEventWithValue(
            this,
            -1494586265,
            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
            monitorvalue
        );;

        __numbertilde_07_lastValue = monitorvalue;
        this->getEngine()->sendListMessage(TAG("monitor"), TAG("number~_obj-15"), {monitorvalue}, this->_currentTime);;
    }

    this->numbertilde_07_currentInterval = __numbertilde_07_currentInterval;
    this->numbertilde_07_lastValue = __numbertilde_07_lastValue;
}

void stackprotect_perform(Index n) {
    RNBO_UNUSED(n);
    auto __stackprotect_count = this->stackprotect_count;
    __stackprotect_count = 0;
    this->stackprotect_count = __stackprotect_count;
}

void data_01_srout_set(number ) {}

void data_01_chanout_set(number ) {}

void data_01_sizeout_set(number v) {
    this->data_01_sizeout = v;
}

void data_02_srout_set(number ) {}

void data_02_chanout_set(number ) {}

void data_02_sizeout_set(number v) {
    this->data_02_sizeout = v;
}

void numberobj_130_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_130_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_130_value = localvalue;
}

void numberobj_131_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_131_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_131_value = localvalue;
}

void numberobj_132_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_132_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_132_value = localvalue;
}

void numberobj_133_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_133_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_133_value = localvalue;
}

void numberobj_134_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_134_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_134_value = localvalue;
}

void toggle_08_value_number_setter(number v) {
    this->toggle_08_value_number = (v != 0 ? 1 : 0);
}

void toggle_09_value_number_setter(number v) {
    this->toggle_09_value_number = (v != 0 ? 1 : 0);
}

void numberobj_135_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_135_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_135_value = localvalue;
}

void numberobj_136_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_136_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_136_value = localvalue;
}

void numberobj_137_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_137_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_137_value = localvalue;
}

void numberobj_138_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_138_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_138_value = localvalue;
}

void numberobj_139_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_139_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_139_value = localvalue;
}

void numberobj_140_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_140_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_140_value = localvalue;
}

void toggle_10_value_number_setter(number v) {
    this->toggle_10_value_number = (v != 0 ? 1 : 0);
}

void numberobj_141_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_141_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_141_value = localvalue;
}

void numberobj_142_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_142_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_142_value = localvalue;
}

void numberobj_143_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_143_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_143_value = localvalue;
}

void numberobj_144_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_144_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_144_value = localvalue;
}

void numberobj_145_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_145_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_145_value = localvalue;
}

void numberobj_146_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_146_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_146_value = localvalue;
}

void numberobj_147_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_147_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_147_value = localvalue;
}

void numberobj_148_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_148_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_148_value = localvalue;
}

void numberobj_149_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_149_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_149_value = localvalue;
}

void numberobj_150_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_150_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_150_value = localvalue;
}

void numberobj_130_init() {
    this->numberobj_130_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-115"), 1, this->_currentTime);
}

void numberobj_130_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_130_value;
}

void numberobj_130_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_130_value_set(preset["value"]);
}

void numberobj_131_init() {
    this->numberobj_131_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-107"), 1, this->_currentTime);
}

void numberobj_131_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_131_value;
}

void numberobj_131_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_131_value_set(preset["value"]);
}

void param_01_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_01_value;
}

void param_01_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_01_value_set(preset["value"]);
}

void param_02_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_02_value;
}

void param_02_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_02_value_set(preset["value"]);
}

void numberobj_132_init() {
    this->numberobj_132_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-46"), 1, this->_currentTime);
}

void numberobj_132_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_132_value;
}

void numberobj_132_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_132_value_set(preset["value"]);
}

void numberobj_133_init() {
    this->numberobj_133_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-40"), 1, this->_currentTime);
}

void numberobj_133_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_133_value;
}

void numberobj_133_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_133_value_set(preset["value"]);
}

void numberobj_134_init() {
    this->numberobj_134_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-32"), 1, this->_currentTime);
}

void numberobj_134_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_134_value;
}

void numberobj_134_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_134_value_set(preset["value"]);
}

void param_03_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_03_value;
}

void param_03_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_03_value_set(preset["value"]);
}

void param_04_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_04_value;
}

void param_04_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_04_value_set(preset["value"]);
}

void param_05_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_05_value;
}

void param_05_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_05_value_set(preset["value"]);
}

void toggle_08_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_08_value_number;
}

void toggle_08_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_08_value_number_set(preset["value"]);
}

void toggle_09_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_09_value_number;
}

void toggle_09_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_09_value_number_set(preset["value"]);
}

number numbertilde_06_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_06_smooth_d_prev);
    this->numbertilde_06_smooth_d_prev = x;
    return temp;
}

void numbertilde_06_smooth_d_dspsetup() {
    this->numbertilde_06_smooth_d_reset();
}

void numbertilde_06_smooth_d_reset() {
    this->numbertilde_06_smooth_d_prev = 0;
}

number numbertilde_06_smooth_next(number x, number up, number down) {
    if (this->numbertilde_06_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_06_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_06_smooth_index = _up;
            this->numbertilde_06_smooth_increment = (x - this->numbertilde_06_smooth_prev) / _up;
        } else if (x < this->numbertilde_06_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_06_smooth_index = _down;
            this->numbertilde_06_smooth_increment = (x - this->numbertilde_06_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_06_smooth_index > 0) {
        this->numbertilde_06_smooth_prev += this->numbertilde_06_smooth_increment;
        this->numbertilde_06_smooth_index -= 1;
    } else {
        this->numbertilde_06_smooth_prev = x;
    }

    return this->numbertilde_06_smooth_prev;
}

void numbertilde_06_smooth_reset() {
    this->numbertilde_06_smooth_prev = 0;
    this->numbertilde_06_smooth_index = 0;
    this->numbertilde_06_smooth_increment = 0;
    this->numbertilde_06_smooth_d_reset();
}

void numbertilde_06_init() {
    this->numbertilde_06_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-8"), 1, this->_currentTime);
}

void numbertilde_06_dspsetup(bool force) {
    if ((bool)(this->numbertilde_06_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_06_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_06_currentInterval = this->numbertilde_06_currentIntervalInSamples;
    this->numbertilde_06_rampInSamples = this->mstosamps(this->numbertilde_06_ramp);
    this->numbertilde_06_setupDone = true;
    this->numbertilde_06_smooth_d_dspsetup();
}

number recordtilde_01_calcSync(
    number writeIndex,
    number loopMin,
    number loopLength,
    SampleIndex bufferLength,
    number srInv
) {
    RNBO_UNUSED(bufferLength);
    RNBO_UNUSED(loopLength);

    {
        {
            {
                {
                    {
                        return (writeIndex - loopMin) * srInv * 1000;
                    }
                }
            }
        }
    }
}

void numberobj_135_init() {
    this->numberobj_135_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-23"), 1, this->_currentTime);
}

void numberobj_135_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_135_value;
}

void numberobj_135_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_135_value_set(preset["value"]);
}

void numberobj_136_init() {
    this->numberobj_136_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-62"), 1, this->_currentTime);
}

void numberobj_136_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_136_value;
}

void numberobj_136_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_136_value_set(preset["value"]);
}

void numberobj_137_init() {
    this->numberobj_137_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-44"), 1, this->_currentTime);
}

void numberobj_137_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_137_value;
}

void numberobj_137_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_137_value_set(preset["value"]);
}

void param_06_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_06_value;
}

void param_06_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_06_value_set(preset["value"]);
}

void numberobj_138_init() {
    this->numberobj_138_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-34"), 1, this->_currentTime);
}

void numberobj_138_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_138_value;
}

void numberobj_138_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_138_value_set(preset["value"]);
}

void param_07_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_07_value;
}

void param_07_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_07_value_set(preset["value"]);
}

void param_08_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_08_value;
}

void param_08_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_08_value_set(preset["value"]);
}

void numberobj_139_init() {
    this->numberobj_139_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-109"), 1, this->_currentTime);
}

void numberobj_139_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_139_value;
}

void numberobj_139_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_139_value_set(preset["value"]);
}

void numberobj_140_init() {
    this->numberobj_140_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-100"), 1, this->_currentTime);
}

void numberobj_140_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_140_value;
}

void numberobj_140_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_140_value_set(preset["value"]);
}

void param_09_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_09_value;
}

void param_09_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_09_value_set(preset["value"]);
}

void param_10_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_10_value;
}

void param_10_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_10_value_set(preset["value"]);
}

void toggle_10_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_10_value_number;
}

void toggle_10_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_10_value_number_set(preset["value"]);
}

number numbertilde_07_smooth_d_next(number x) {
    number temp = (number)(x - this->numbertilde_07_smooth_d_prev);
    this->numbertilde_07_smooth_d_prev = x;
    return temp;
}

void numbertilde_07_smooth_d_dspsetup() {
    this->numbertilde_07_smooth_d_reset();
}

void numbertilde_07_smooth_d_reset() {
    this->numbertilde_07_smooth_d_prev = 0;
}

number numbertilde_07_smooth_next(number x, number up, number down) {
    if (this->numbertilde_07_smooth_d_next(x) != 0.) {
        if (x > this->numbertilde_07_smooth_prev) {
            number _up = up;

            if (_up < 1)
                _up = 1;

            this->numbertilde_07_smooth_index = _up;
            this->numbertilde_07_smooth_increment = (x - this->numbertilde_07_smooth_prev) / _up;
        } else if (x < this->numbertilde_07_smooth_prev) {
            number _down = down;

            if (_down < 1)
                _down = 1;

            this->numbertilde_07_smooth_index = _down;
            this->numbertilde_07_smooth_increment = (x - this->numbertilde_07_smooth_prev) / _down;
        }
    }

    if (this->numbertilde_07_smooth_index > 0) {
        this->numbertilde_07_smooth_prev += this->numbertilde_07_smooth_increment;
        this->numbertilde_07_smooth_index -= 1;
    } else {
        this->numbertilde_07_smooth_prev = x;
    }

    return this->numbertilde_07_smooth_prev;
}

void numbertilde_07_smooth_reset() {
    this->numbertilde_07_smooth_prev = 0;
    this->numbertilde_07_smooth_index = 0;
    this->numbertilde_07_smooth_increment = 0;
    this->numbertilde_07_smooth_d_reset();
}

void numbertilde_07_init() {
    this->numbertilde_07_currentMode = 1;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number~_obj-15"), 1, this->_currentTime);
}

void numbertilde_07_dspsetup(bool force) {
    if ((bool)(this->numbertilde_07_setupDone) && (bool)(!(bool)(force)))
        return;

    this->numbertilde_07_currentIntervalInSamples = this->mstosamps(100);
    this->numbertilde_07_currentInterval = this->numbertilde_07_currentIntervalInSamples;
    this->numbertilde_07_rampInSamples = this->mstosamps(this->numbertilde_07_ramp);
    this->numbertilde_07_setupDone = true;
    this->numbertilde_07_smooth_d_dspsetup();
}

number recordtilde_02_calcSync(
    number writeIndex,
    number loopMin,
    number loopLength,
    SampleIndex bufferLength,
    number srInv
) {
    RNBO_UNUSED(bufferLength);
    RNBO_UNUSED(loopLength);

    {
        {
            {
                {
                    {
                        return (writeIndex - loopMin) * srInv * 1000;
                    }
                }
            }
        }
    }
}

void numberobj_141_init() {
    this->numberobj_141_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-19"), 1, this->_currentTime);
}

void numberobj_141_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_141_value;
}

void numberobj_141_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_141_value_set(preset["value"]);
}

void numberobj_142_init() {
    this->numberobj_142_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-64"), 1, this->_currentTime);
}

void numberobj_142_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_142_value;
}

void numberobj_142_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_142_value_set(preset["value"]);
}

void numberobj_143_init() {
    this->numberobj_143_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-58"), 1, this->_currentTime);
}

void numberobj_143_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_143_value;
}

void numberobj_143_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_143_value_set(preset["value"]);
}

void param_11_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_11_value;
}

void param_11_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_11_value_set(preset["value"]);
}

void param_12_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_12_value;
}

void param_12_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_12_value_set(preset["value"]);
}

void param_13_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_13_value;
}

void param_13_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_13_value_set(preset["value"]);
}

void numberobj_144_init() {
    this->numberobj_144_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-35"), 1, this->_currentTime);
}

void numberobj_144_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_144_value;
}

void numberobj_144_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_144_value_set(preset["value"]);
}

void numberobj_145_init() {
    this->numberobj_145_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-111"), 1, this->_currentTime);
}

void numberobj_145_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_145_value;
}

void numberobj_145_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_145_value_set(preset["value"]);
}

void numberobj_146_init() {
    this->numberobj_146_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-103"), 1, this->_currentTime);
}

void numberobj_146_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_146_value;
}

void numberobj_146_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_146_value_set(preset["value"]);
}

void param_14_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_14_value;
}

void param_14_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_14_value_set(preset["value"]);
}

void param_15_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_15_value;
}

void param_15_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_15_value_set(preset["value"]);
}

void data_01_init() {
    this->data_01_buffer->setWantsFill(true);
}

Index data_01_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    number size = 0;
    return (Index)(size);
}

void data_01_dspsetup(bool force) {
    if ((bool)(this->data_01_setupDone) && (bool)(!(bool)(force)))
        return;

    if (this->data_01_sizemode == 2) {
        this->data_01_buffer = this->data_01_buffer->setSize((Index)(this->mstosamps(this->data_01_sizems)));
        updateDataRef(this, this->data_01_buffer);
    } else if (this->data_01_sizemode == 3) {
        this->data_01_buffer = this->data_01_buffer->setSize(this->data_01_evaluateSizeExpr(this->samplerate(), this->vectorsize()));
        updateDataRef(this, this->data_01_buffer);
    }

    this->data_01_setupDone = true;
}

void data_01_bufferUpdated() {
    this->data_01_report();
}

void data_01_report() {
    this->data_01_srout_set(this->data_01_buffer->getSampleRate());
    this->data_01_chanout_set(this->data_01_buffer->getChannels());
    this->data_01_sizeout_set(this->data_01_buffer->getSize());
}

void data_02_init() {
    this->data_02_buffer->setWantsFill(true);
}

Index data_02_evaluateSizeExpr(number samplerate, number vectorsize) {
    RNBO_UNUSED(vectorsize);
    RNBO_UNUSED(samplerate);
    number size = 0;
    return (Index)(size);
}

void data_02_dspsetup(bool force) {
    if ((bool)(this->data_02_setupDone) && (bool)(!(bool)(force)))
        return;

    if (this->data_02_sizemode == 2) {
        this->data_02_buffer = this->data_02_buffer->setSize((Index)(this->mstosamps(this->data_02_sizems)));
        updateDataRef(this, this->data_02_buffer);
    } else if (this->data_02_sizemode == 3) {
        this->data_02_buffer = this->data_02_buffer->setSize(this->data_02_evaluateSizeExpr(this->samplerate(), this->vectorsize()));
        updateDataRef(this, this->data_02_buffer);
    }

    this->data_02_setupDone = true;
}

void data_02_bufferUpdated() {
    this->data_02_report();
}

void data_02_report() {
    this->data_02_srout_set(this->data_02_buffer->getSampleRate());
    this->data_02_chanout_set(this->data_02_buffer->getChannels());
    this->data_02_sizeout_set(this->data_02_buffer->getSize());
}

void numberobj_147_init() {
    this->numberobj_147_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-60"), 1, this->_currentTime);
}

void numberobj_147_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_147_value;
}

void numberobj_147_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_147_value_set(preset["value"]);
}

void numberobj_148_init() {
    this->numberobj_148_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-39"), 1, this->_currentTime);
}

void numberobj_148_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_148_value;
}

void numberobj_148_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_148_value_set(preset["value"]);
}

void param_16_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_16_value;
}

void param_16_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_16_value_set(preset["value"]);
}

void param_17_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_17_value;
}

void param_17_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_17_value_set(preset["value"]);
}

void numberobj_149_init() {
    this->numberobj_149_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-113"), 1, this->_currentTime);
}

void numberobj_149_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_149_value;
}

void numberobj_149_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_149_value_set(preset["value"]);
}

void numberobj_150_init() {
    this->numberobj_150_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-105"), 1, this->_currentTime);
}

void numberobj_150_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_150_value;
}

void numberobj_150_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_150_value_set(preset["value"]);
}

void param_18_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_18_value;
}

void param_18_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_18_value_set(preset["value"]);
}

void param_19_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_19_value;
}

void param_19_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_19_value_set(preset["value"]);
}

Index globaltransport_getSampleOffset(MillisecondTime time) {
    return this->mstosamps(this->maximum(0, time - this->getEngine()->getCurrentTime()));
}

number globaltransport_getTempoAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_tempo[(Index)sampleOffset] : this->globaltransport_lastTempo);
}

number globaltransport_getStateAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_state[(Index)sampleOffset] : this->globaltransport_lastState);
}

number globaltransport_getState(MillisecondTime time) {
    return this->globaltransport_getStateAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getTempo(MillisecondTime time) {
    return this->globaltransport_getTempoAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getBeatTime(MillisecondTime time) {
    number i = 2;

    while (i < this->globaltransport_beatTimeChanges->length && this->globaltransport_beatTimeChanges[(Index)(i + 1)] <= time) {
        i += 2;
    }

    i -= 2;
    number beatTimeBase = this->globaltransport_beatTimeChanges[(Index)i];

    if (this->globaltransport_getState(time) == 0)
        return beatTimeBase;

    number beatTimeBaseMsTime = this->globaltransport_beatTimeChanges[(Index)(i + 1)];
    number diff = time - beatTimeBaseMsTime;
    number diffInBeats = diff * this->globaltransport_getTempo(time) * 0.008 / (number)480;
    return beatTimeBase + diffInBeats;
}

bool globaltransport_setTempo(MillisecondTime time, number tempo, bool notify) {
    if ((bool)(notify)) {
        this->processTempoEvent(time, tempo);
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getTempoAtSample((SampleIndex)(offset)) != tempo) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_tempo, this->vs, tempo, offset);
            this->globaltransport_lastTempo = tempo;
            this->globaltransport_tempoNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setState(MillisecondTime time, number state, bool notify) {
    if ((bool)(notify)) {
        this->processTransportEvent(time, TransportState(state));
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getStateAtSample(offset) != state) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_state, this->vs, state, offset);
            this->globaltransport_lastState = TransportState(state);
            this->globaltransport_stateNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setBeatTime(MillisecondTime time, number beattime, bool notify) {
    if ((bool)(notify)) {
        this->processBeatTimeEvent(time, beattime);
        this->globaltransport_notify = true;
        return false;
    } else {
        bool beatTimeHasChanged = false;
        float oldBeatTime = (float)(this->globaltransport_getBeatTime(time));
        float newBeatTime = (float)(beattime);

        if (oldBeatTime != newBeatTime) {
            beatTimeHasChanged = true;
        }

        this->globaltransport_beatTimeChanges->push(beattime);
        this->globaltransport_beatTimeChanges->push(time);
        return beatTimeHasChanged;
    }
}

number globaltransport_getBeatTimeAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBeatTime(this->getEngine()->getCurrentTime() + msOffset);
}

array<number, 2> globaltransport_getTimeSignature(MillisecondTime time) {
    number i = 3;

    while (i < this->globaltransport_timeSignatureChanges->length && this->globaltransport_timeSignatureChanges[(Index)(i + 2)] <= time) {
        i += 3;
    }

    i -= 3;

    return {
        this->globaltransport_timeSignatureChanges[(Index)i],
        this->globaltransport_timeSignatureChanges[(Index)(i + 1)]
    };
}

array<number, 2> globaltransport_getTimeSignatureAtSample(SampleIndex sampleOffset) {
    MillisecondTime msOffset = (MillisecondTime)(this->sampstoms(sampleOffset));
    return this->globaltransport_getTimeSignature(this->getEngine()->getCurrentTime() + msOffset);
}

void globaltransport_setBBUBase(
    MillisecondTime time,
    number numerator,
    number denominator,
    number bars,
    number beats,
    number units
) {
    number beatsInQuarterNotes = this->globaltransport_getBeatTime(time);
    bars--;
    beats--;
    number beatsIncCurrenttDenom = beatsInQuarterNotes * (denominator * 0.25);
    number beatLength = (number)4 / denominator;
    number beatLengthInUnits = beatLength * 480;

    while (units > beatLengthInUnits) {
        units -= beatLengthInUnits;
        beats++;
    }

    number targetBeatTime = bars * numerator + beats + units / beatLengthInUnits;
    this->globaltransport_bbuBase = targetBeatTime - beatsIncCurrenttDenom;
}

array<number, 3> globaltransport_getBBU(MillisecondTime time) {
    array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);
    number numerator = currentSig[0];
    number denominator = currentSig[1];
    number beatsInQuarterNotes = this->globaltransport_getBeatTime(time);
    number beatsIncCurrenttDenom = beatsInQuarterNotes * (denominator * 0.25);
    number beatLength = (number)4 / denominator;
    number beatLengthInUnits = beatLength * 480;
    number targetBeatTime = beatsIncCurrenttDenom + this->globaltransport_bbuBase;
    number currentBars = 0;
    number currentBeats = 0;
    number currentUnits = 0;

    if (targetBeatTime >= 0) {
        currentBars = trunc(targetBeatTime / numerator);
        targetBeatTime -= currentBars * numerator;
        currentBeats = trunc(targetBeatTime);
        targetBeatTime -= currentBeats;
        currentUnits = targetBeatTime * beatLengthInUnits;
    } else {
        currentBars = trunc(targetBeatTime / numerator);
        targetBeatTime -= currentBars * numerator;

        if (targetBeatTime != 0) {
            currentBars -= 1;
            currentBeats = trunc(targetBeatTime);
            targetBeatTime -= currentBeats;
            currentBeats = numerator + currentBeats;
            currentUnits = targetBeatTime * beatLengthInUnits;

            if (currentUnits != 0) {
                currentUnits = beatLengthInUnits + currentUnits;
                currentBeats -= 1;
            }
        }
    }

    return {currentBars + 1, currentBeats + 1, currentUnits};
}

bool globaltransport_setTimeSignature(MillisecondTime time, number numerator, number denominator, bool notify) {
    if ((bool)(notify)) {
        this->processTimeSignatureEvent(time, (int)(numerator), (int)(denominator));
        this->globaltransport_notify = true;
    } else {
        array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);

        if (currentSig[0] != numerator || currentSig[1] != denominator) {
            array<number, 3> bbu = this->globaltransport_getBBU(time);
            this->globaltransport_setBBUBase(time, numerator, denominator, bbu[0], bbu[1], bbu[2]);
            this->globaltransport_timeSignatureChanges->push(numerator);
            this->globaltransport_timeSignatureChanges->push(denominator);
            this->globaltransport_timeSignatureChanges->push(time);
            return true;
        }
    }

    return false;
}

array<number, 3> globaltransport_getBBUAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBBU(this->getEngine()->getCurrentTime() + msOffset);
}

bool globaltransport_setBBU(MillisecondTime time, number bars, number beats, number units, bool notify) {
    RNBO_UNUSED(notify);
    array<number, 2> sig = this->globaltransport_getTimeSignature(time);
    number numerator = sig[0];
    number denominator = sig[1];
    this->globaltransport_setBBUBase(time, numerator, denominator, bars, beats, units);
    return true;
}

void globaltransport_advance() {
    if ((bool)(this->globaltransport_tempoNeedsReset)) {
        fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
        this->globaltransport_tempoNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTempoEvent(this->globaltransport_lastTempo);
        }
    }

    if ((bool)(this->globaltransport_stateNeedsReset)) {
        fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
        this->globaltransport_stateNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTransportEvent(TransportState(this->globaltransport_lastState));
        }
    }

    if (this->globaltransport_beatTimeChanges->length > 2) {
        this->globaltransport_beatTimeChanges[0] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 2)];
        this->globaltransport_beatTimeChanges[1] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 1)];
        this->globaltransport_beatTimeChanges->length = 2;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendBeatTimeEvent(this->globaltransport_beatTimeChanges[0]);
        }
    }

    if (this->globaltransport_timeSignatureChanges->length > 3) {
        this->globaltransport_timeSignatureChanges[0] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 3)];
        this->globaltransport_timeSignatureChanges[1] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 2)];
        this->globaltransport_timeSignatureChanges[2] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 1)];
        this->globaltransport_timeSignatureChanges->length = 3;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTimeSignatureEvent(
                (int)(this->globaltransport_timeSignatureChanges[0]),
                (int)(this->globaltransport_timeSignatureChanges[1])
            );
        }
    }

    this->globaltransport_notify = false;
}

void globaltransport_dspsetup(bool force) {
    if ((bool)(this->globaltransport_setupDone) && (bool)(!(bool)(force)))
        return;

    fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
    this->globaltransport_tempoNeedsReset = false;
    fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
    this->globaltransport_stateNeedsReset = false;
    this->globaltransport_setupDone = true;
}

bool stackprotect_check() {
    this->stackprotect_count++;

    if (this->stackprotect_count > 128) {
        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
        return true;
    }

    return false;
}

void updateTime(MillisecondTime time) {
    this->_currentTime = time;
    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));

    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;

    if (this->sampleOffsetIntoNextAudioBuffer < 0)
        this->sampleOffsetIntoNextAudioBuffer = 0;
}

void assign_defaults()
{
    p_14_target = 0;
    numberobj_130_value = 0;
    numberobj_130_value_setter(numberobj_130_value);
    send_04_input_number = 0;
    numberobj_131_value = 0;
    numberobj_131_value_setter(numberobj_131_value);
    send_05_input_number = 0;
    param_01_value = 0;
    param_02_value = 100;
    numberobj_132_value = 0;
    numberobj_132_value_setter(numberobj_132_value);
    send_06_input_number = 0;
    numberobj_133_value = 0;
    numberobj_133_value_setter(numberobj_133_value);
    send_07_input_number = 0;
    numberobj_134_value = 0;
    numberobj_134_value_setter(numberobj_134_value);
    send_08_input_number = 0;
    param_03_value = 0;
    param_04_value = 50;
    param_05_value = 25;
    p_15_target = 0;
    toggle_08_value_number = 0;
    toggle_08_value_number_setter(toggle_08_value_number);
    toggle_09_value_number = 0;
    toggle_09_value_number_setter(toggle_09_value_number);
    numbertilde_06_input_number = 0;
    numbertilde_06_ramp = 0;
    recordtilde_01_record = 0;
    recordtilde_01_begin = 0;
    recordtilde_01_end = -1;
    recordtilde_01_loop = 1;
    loadmess_07_message = { 1 };
    send_09_input_number = 0;
    numberobj_135_value = 0;
    numberobj_135_value_setter(numberobj_135_value);
    numberobj_136_value = 0;
    numberobj_136_value_setter(numberobj_136_value);
    send_10_input_number = 0;
    numberobj_137_value = 0;
    numberobj_137_value_setter(numberobj_137_value);
    send_11_input_number = 0;
    param_06_value = 0;
    numberobj_138_value = 0;
    numberobj_138_value_setter(numberobj_138_value);
    send_12_input_number = 0;
    param_07_value = 1;
    param_08_value = 250;
    numberobj_139_value = 0;
    numberobj_139_value_setter(numberobj_139_value);
    send_13_input_number = 0;
    numberobj_140_value = 0;
    numberobj_140_value_setter(numberobj_140_value);
    send_14_input_number = 0;
    param_09_value = 1;
    param_10_value = 1;
    toggle_10_value_number = 0;
    toggle_10_value_number_setter(toggle_10_value_number);
    numbertilde_07_input_number = 0;
    numbertilde_07_ramp = 0;
    recordtilde_02_record = 0;
    recordtilde_02_begin = 0;
    recordtilde_02_end = -1;
    recordtilde_02_loop = 1;
    send_15_input_number = 0;
    numberobj_141_value = 0;
    numberobj_141_value_setter(numberobj_141_value);
    numberobj_142_value = 0;
    numberobj_142_value_setter(numberobj_142_value);
    send_16_input_number = 0;
    numberobj_143_value = 0;
    numberobj_143_value_setter(numberobj_143_value);
    send_17_input_number = 0;
    param_11_value = 0;
    send_18_input_number = 0;
    param_12_value = 0;
    param_13_value = 500;
    numberobj_144_value = 0;
    numberobj_144_value_setter(numberobj_144_value);
    numberobj_145_value = 0;
    numberobj_145_value_setter(numberobj_145_value);
    send_19_input_number = 0;
    numberobj_146_value = 0;
    numberobj_146_value_setter(numberobj_146_value);
    send_20_input_number = 0;
    param_14_value = 20;
    param_15_value = 600;
    data_01_sizeout = 0;
    data_01_size = 0;
    data_01_sizems = 30000;
    data_01_normalize = 0.995;
    data_01_channels = 1;
    data_02_sizeout = 0;
    data_02_size = 0;
    data_02_sizems = 30000;
    data_02_normalize = 0.995;
    data_02_channels = 1;
    numberobj_147_value = 0;
    numberobj_147_value_setter(numberobj_147_value);
    send_21_input_number = 0;
    send_22_input_number = 0;
    numberobj_148_value = 0;
    numberobj_148_value_setter(numberobj_148_value);
    param_16_value = 1;
    param_17_value = 1500;
    numberobj_149_value = 0;
    numberobj_149_value_setter(numberobj_149_value);
    send_23_input_number = 0;
    numberobj_150_value = 0;
    numberobj_150_value_setter(numberobj_150_value);
    send_24_input_number = 0;
    param_18_value = 0;
    param_19_value = 100;
    _currentTime = 0;
    audioProcessSampleCount = 0;
    sampleOffsetIntoNextAudioBuffer = 0;
    zeroBuffer = nullptr;
    dummyBuffer = nullptr;
    signals[0] = nullptr;
    signals[1] = nullptr;
    didAllocateSignals = 0;
    vs = 0;
    maxvs = 0;
    sr = 44100;
    invsr = 0.00002267573696;
    numberobj_130_currentFormat = 6;
    numberobj_130_lastValue = 0;
    numberobj_131_currentFormat = 6;
    numberobj_131_lastValue = 0;
    param_01_lastValue = 0;
    param_02_lastValue = 0;
    numberobj_132_currentFormat = 6;
    numberobj_132_lastValue = 0;
    numberobj_133_currentFormat = 6;
    numberobj_133_lastValue = 0;
    numberobj_134_currentFormat = 6;
    numberobj_134_lastValue = 0;
    param_03_lastValue = 0;
    param_04_lastValue = 0;
    param_05_lastValue = 0;
    toggle_08_lastValue = 0;
    toggle_09_lastValue = 0;
    numbertilde_06_currentInterval = 0;
    numbertilde_06_currentIntervalInSamples = 0;
    numbertilde_06_lastValue = 0;
    numbertilde_06_outValue = 0;
    numbertilde_06_rampInSamples = 0;
    numbertilde_06_currentMode = 0;
    numbertilde_06_smooth_d_prev = 0;
    numbertilde_06_smooth_prev = 0;
    numbertilde_06_smooth_index = 0;
    numbertilde_06_smooth_increment = 0;
    numbertilde_06_setupDone = false;
    recordtilde_01_wIndex = 0;
    recordtilde_01_lastRecord = 0;
    numberobj_135_currentFormat = 6;
    numberobj_135_lastValue = 0;
    numberobj_136_currentFormat = 6;
    numberobj_136_lastValue = 0;
    numberobj_137_currentFormat = 6;
    numberobj_137_lastValue = 0;
    param_06_lastValue = 0;
    numberobj_138_currentFormat = 6;
    numberobj_138_lastValue = 0;
    param_07_lastValue = 0;
    param_08_lastValue = 0;
    numberobj_139_currentFormat = 6;
    numberobj_139_lastValue = 0;
    numberobj_140_currentFormat = 6;
    numberobj_140_lastValue = 0;
    param_09_lastValue = 0;
    param_10_lastValue = 0;
    toggle_10_lastValue = 0;
    numbertilde_07_currentInterval = 0;
    numbertilde_07_currentIntervalInSamples = 0;
    numbertilde_07_lastValue = 0;
    numbertilde_07_outValue = 0;
    numbertilde_07_rampInSamples = 0;
    numbertilde_07_currentMode = 0;
    numbertilde_07_smooth_d_prev = 0;
    numbertilde_07_smooth_prev = 0;
    numbertilde_07_smooth_index = 0;
    numbertilde_07_smooth_increment = 0;
    numbertilde_07_setupDone = false;
    recordtilde_02_wIndex = 0;
    recordtilde_02_lastRecord = 0;
    numberobj_141_currentFormat = 6;
    numberobj_141_lastValue = 0;
    numberobj_142_currentFormat = 6;
    numberobj_142_lastValue = 0;
    numberobj_143_currentFormat = 6;
    numberobj_143_lastValue = 0;
    param_11_lastValue = 0;
    param_12_lastValue = 0;
    param_13_lastValue = 0;
    numberobj_144_currentFormat = 6;
    numberobj_144_lastValue = 0;
    numberobj_145_currentFormat = 6;
    numberobj_145_lastValue = 0;
    numberobj_146_currentFormat = 6;
    numberobj_146_lastValue = 0;
    param_14_lastValue = 0;
    param_15_lastValue = 0;
    data_01_sizemode = 2;
    data_01_setupDone = false;
    data_02_sizemode = 2;
    data_02_setupDone = false;
    numberobj_147_currentFormat = 6;
    numberobj_147_lastValue = 0;
    numberobj_148_currentFormat = 6;
    numberobj_148_lastValue = 0;
    param_16_lastValue = 0;
    param_17_lastValue = 0;
    numberobj_149_currentFormat = 6;
    numberobj_149_lastValue = 0;
    numberobj_150_currentFormat = 6;
    numberobj_150_lastValue = 0;
    param_18_lastValue = 0;
    param_19_lastValue = 0;
    globaltransport_tempo = nullptr;
    globaltransport_tempoNeedsReset = false;
    globaltransport_lastTempo = 120;
    globaltransport_state = nullptr;
    globaltransport_stateNeedsReset = false;
    globaltransport_lastState = 0;
    globaltransport_beatTimeChanges = { 0, 0 };
    globaltransport_timeSignatureChanges = { 4, 4, 0 };
    globaltransport_notify = false;
    globaltransport_bbuBase = 0;
    globaltransport_setupDone = false;
    stackprotect_count = 0;
    _voiceIndex = 0;
    _noteNumber = 0;
    isMuted = 1;
}

// member variables

    number p_14_target;
    number numberobj_130_value;
    number send_04_input_number;
    list send_04_input_list;
    number numberobj_131_value;
    number send_05_input_number;
    list send_05_input_list;
    number param_01_value;
    number param_02_value;
    number numberobj_132_value;
    number send_06_input_number;
    list send_06_input_list;
    number numberobj_133_value;
    number send_07_input_number;
    list send_07_input_list;
    number numberobj_134_value;
    number send_08_input_number;
    list send_08_input_list;
    number param_03_value;
    number param_04_value;
    number param_05_value;
    number p_15_target;
    number toggle_08_value_number;
    number toggle_09_value_number;
    number numbertilde_06_input_number;
    number numbertilde_06_ramp;
    number recordtilde_01_record;
    number recordtilde_01_begin;
    number recordtilde_01_end;
    number recordtilde_01_loop;
    list loadmess_07_message;
    number send_09_input_number;
    list send_09_input_list;
    number numberobj_135_value;
    number numberobj_136_value;
    number send_10_input_number;
    list send_10_input_list;
    number numberobj_137_value;
    number send_11_input_number;
    list send_11_input_list;
    number param_06_value;
    number numberobj_138_value;
    number send_12_input_number;
    list send_12_input_list;
    number param_07_value;
    number param_08_value;
    number numberobj_139_value;
    number send_13_input_number;
    list send_13_input_list;
    number numberobj_140_value;
    number send_14_input_number;
    list send_14_input_list;
    number param_09_value;
    number param_10_value;
    number toggle_10_value_number;
    number numbertilde_07_input_number;
    number numbertilde_07_ramp;
    number recordtilde_02_record;
    number recordtilde_02_begin;
    number recordtilde_02_end;
    number recordtilde_02_loop;
    number send_15_input_number;
    list send_15_input_list;
    number numberobj_141_value;
    number numberobj_142_value;
    number send_16_input_number;
    list send_16_input_list;
    number numberobj_143_value;
    number send_17_input_number;
    list send_17_input_list;
    number param_11_value;
    number send_18_input_number;
    list send_18_input_list;
    number param_12_value;
    number param_13_value;
    number numberobj_144_value;
    number numberobj_145_value;
    number send_19_input_number;
    list send_19_input_list;
    number numberobj_146_value;
    number send_20_input_number;
    list send_20_input_list;
    number param_14_value;
    number param_15_value;
    number data_01_sizeout;
    number data_01_size;
    number data_01_sizems;
    number data_01_normalize;
    number data_01_channels;
    number data_02_sizeout;
    number data_02_size;
    number data_02_sizems;
    number data_02_normalize;
    number data_02_channels;
    number numberobj_147_value;
    number send_21_input_number;
    list send_21_input_list;
    number send_22_input_number;
    list send_22_input_list;
    number numberobj_148_value;
    number param_16_value;
    number param_17_value;
    number numberobj_149_value;
    number send_23_input_number;
    list send_23_input_list;
    number numberobj_150_value;
    number send_24_input_number;
    list send_24_input_list;
    number param_18_value;
    number param_19_value;
    MillisecondTime _currentTime;
    UInt64 audioProcessSampleCount;
    SampleIndex sampleOffsetIntoNextAudioBuffer;
    signal zeroBuffer;
    signal dummyBuffer;
    SampleValue * signals[2];
    bool didAllocateSignals;
    Index vs;
    Index maxvs;
    number sr;
    number invsr;
    Int numberobj_130_currentFormat;
    number numberobj_130_lastValue;
    Int numberobj_131_currentFormat;
    number numberobj_131_lastValue;
    number param_01_lastValue;
    number param_02_lastValue;
    Int numberobj_132_currentFormat;
    number numberobj_132_lastValue;
    Int numberobj_133_currentFormat;
    number numberobj_133_lastValue;
    Int numberobj_134_currentFormat;
    number numberobj_134_lastValue;
    number param_03_lastValue;
    number param_04_lastValue;
    number param_05_lastValue;
    number toggle_08_lastValue;
    number toggle_09_lastValue;
    SampleIndex numbertilde_06_currentInterval;
    SampleIndex numbertilde_06_currentIntervalInSamples;
    number numbertilde_06_lastValue;
    number numbertilde_06_outValue;
    number numbertilde_06_rampInSamples;
    Int numbertilde_06_currentMode;
    number numbertilde_06_smooth_d_prev;
    number numbertilde_06_smooth_prev;
    number numbertilde_06_smooth_index;
    number numbertilde_06_smooth_increment;
    bool numbertilde_06_setupDone;
    Float32BufferRef recordtilde_01_buffer;
    SampleIndex recordtilde_01_wIndex;
    number recordtilde_01_lastRecord;
    Int numberobj_135_currentFormat;
    number numberobj_135_lastValue;
    Int numberobj_136_currentFormat;
    number numberobj_136_lastValue;
    Int numberobj_137_currentFormat;
    number numberobj_137_lastValue;
    number param_06_lastValue;
    Int numberobj_138_currentFormat;
    number numberobj_138_lastValue;
    number param_07_lastValue;
    number param_08_lastValue;
    Int numberobj_139_currentFormat;
    number numberobj_139_lastValue;
    Int numberobj_140_currentFormat;
    number numberobj_140_lastValue;
    number param_09_lastValue;
    number param_10_lastValue;
    number toggle_10_lastValue;
    SampleIndex numbertilde_07_currentInterval;
    SampleIndex numbertilde_07_currentIntervalInSamples;
    number numbertilde_07_lastValue;
    number numbertilde_07_outValue;
    number numbertilde_07_rampInSamples;
    Int numbertilde_07_currentMode;
    number numbertilde_07_smooth_d_prev;
    number numbertilde_07_smooth_prev;
    number numbertilde_07_smooth_index;
    number numbertilde_07_smooth_increment;
    bool numbertilde_07_setupDone;
    Float32BufferRef recordtilde_02_buffer;
    SampleIndex recordtilde_02_wIndex;
    number recordtilde_02_lastRecord;
    Int numberobj_141_currentFormat;
    number numberobj_141_lastValue;
    Int numberobj_142_currentFormat;
    number numberobj_142_lastValue;
    Int numberobj_143_currentFormat;
    number numberobj_143_lastValue;
    number param_11_lastValue;
    number param_12_lastValue;
    number param_13_lastValue;
    Int numberobj_144_currentFormat;
    number numberobj_144_lastValue;
    Int numberobj_145_currentFormat;
    number numberobj_145_lastValue;
    Int numberobj_146_currentFormat;
    number numberobj_146_lastValue;
    number param_14_lastValue;
    number param_15_lastValue;
    Float32BufferRef data_01_buffer;
    Int data_01_sizemode;
    bool data_01_setupDone;
    Float32BufferRef data_02_buffer;
    Int data_02_sizemode;
    bool data_02_setupDone;
    Int numberobj_147_currentFormat;
    number numberobj_147_lastValue;
    Int numberobj_148_currentFormat;
    number numberobj_148_lastValue;
    number param_16_lastValue;
    number param_17_lastValue;
    Int numberobj_149_currentFormat;
    number numberobj_149_lastValue;
    Int numberobj_150_currentFormat;
    number numberobj_150_lastValue;
    number param_18_lastValue;
    number param_19_lastValue;
    signal globaltransport_tempo;
    bool globaltransport_tempoNeedsReset;
    number globaltransport_lastTempo;
    signal globaltransport_state;
    bool globaltransport_stateNeedsReset;
    number globaltransport_lastState;
    list globaltransport_beatTimeChanges;
    list globaltransport_timeSignatureChanges;
    bool globaltransport_notify;
    number globaltransport_bbuBase;
    bool globaltransport_setupDone;
    number stackprotect_count;
    DataRef buff1;
    DataRef buff2;
    Index _voiceIndex;
    Int _noteNumber;
    Index isMuted;
    indexlist paramInitIndices;
    indexlist paramInitOrder;
    RNBOSubpatcher_29* p_14;
    RNBOSubpatcher_30* p_15;

};

PatcherInterface* creaternbomatic()
{
    return new rnbomatic();
}

#ifndef RNBO_NO_PATCHERFACTORY

extern "C" PatcherFactoryFunctionPtr GetPatcherFactoryFunction(PlatformInterface* platformInterface)
#else

extern "C" PatcherFactoryFunctionPtr rnbomaticFactoryFunction(PlatformInterface* platformInterface)
#endif

{
    Platform::set(platformInterface);
    return creaternbomatic;
}

} // end RNBO namespace

